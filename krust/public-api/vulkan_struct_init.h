#ifndef KRUST_STRUCT_INIT_H_INCLUDED_E26EF
#define KRUST_STRUCT_INIT_H_INCLUDED_E26EF

// Copyright (c) 2016-2020 Andrew Helge Cox
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

/// @note Do not edit this file. It is generated from the Vulkan XML
/// specification by the script at `tools/scripts/gen_info_struct_wrappers.py`.

/**
 * @file Three sets of functions used to initialize Vulkan API structs.
 * 1. Functions to initialize the type ID enum and pNext extension pointer
 *    of Vulkan API structures which require those as their first two fields.
 * 2. Functions to initialize all members of Vulkan API structures, automatically
 *    supplying the type ID and pNext extension pointer while requiring all other
 *    fields to be supplied by the user.
 * 3. Functions initialize all members of small Vulkan structures from parameters
 *    supplied by the user.
 *
 * @see VulkanTaggedStructSimpleInit, VulkanTaggedStructParamsInit,
 *      VulkanUntaggedStructParamsInit
 */

// External includes:
#include <krust/public-api/vulkan_types_and_macros.h>

namespace Krust
{

/**
 * @name VulkanTaggedStructSimpleInit For each Vulkan API struct tagged with a
 * type enum and possessing an extension pointer, a function to initialize the
 * first two fields of that struct.
 *
 * The use of these functions saves some code and makes sure the type
 * and the extension field of each struct are set correctly and reliably.
 * 
 * Usage without these helpers:
 *
 *     VkImageCreateInfo info;
 *     info.sType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO;
 *     info.pNext = nullptr;
 *     info.flags = 0;
 *     info.imageType = VK_IMAGE_TYPE_2D;
 *     // ...
 *
 * Usage with these helpers:
 *
 *     auto info = kr::ImageCreateInfo();
 *     info.flags = 0;
 *     info.imageType = VK_IMAGE_TYPE_2D;
 *     // ...
 *
 * In the second example those first two lines of member initialization are saved.
 *
 * See `krust-examples/clear/clear.cpp` for more usage examples. 
 */
 ///@{

inline VkApplicationInfo ApplicationInfo()
{
  VkApplicationInfo info;
  info.sType = VK_STRUCTURE_TYPE_APPLICATION_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkDeviceQueueCreateInfo DeviceQueueCreateInfo()
{
  VkDeviceQueueCreateInfo info;
  info.sType = VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkDeviceCreateInfo DeviceCreateInfo()
{
  VkDeviceCreateInfo info;
  info.sType = VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkInstanceCreateInfo InstanceCreateInfo()
{
  VkInstanceCreateInfo info;
  info.sType = VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkMemoryAllocateInfo MemoryAllocateInfo()
{
  VkMemoryAllocateInfo info;
  info.sType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkMappedMemoryRange MappedMemoryRange()
{
  VkMappedMemoryRange info;
  info.sType = VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE;
  info.pNext = nullptr;
  return info;
}

inline VkWriteDescriptorSet WriteDescriptorSet()
{
  VkWriteDescriptorSet info;
  info.sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;
  info.pNext = nullptr;
  return info;
}

inline VkCopyDescriptorSet CopyDescriptorSet()
{
  VkCopyDescriptorSet info;
  info.sType = VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET;
  info.pNext = nullptr;
  return info;
}

inline VkBufferCreateInfo BufferCreateInfo()
{
  VkBufferCreateInfo info;
  info.sType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkBufferViewCreateInfo BufferViewCreateInfo()
{
  VkBufferViewCreateInfo info;
  info.sType = VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkMemoryBarrier MemoryBarrier()
{
  VkMemoryBarrier info;
  info.sType = VK_STRUCTURE_TYPE_MEMORY_BARRIER;
  info.pNext = nullptr;
  return info;
}

inline VkBufferMemoryBarrier BufferMemoryBarrier()
{
  VkBufferMemoryBarrier info;
  info.sType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER;
  info.pNext = nullptr;
  return info;
}

inline VkImageMemoryBarrier ImageMemoryBarrier()
{
  VkImageMemoryBarrier info;
  info.sType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER;
  info.pNext = nullptr;
  return info;
}

inline VkImageCreateInfo ImageCreateInfo()
{
  VkImageCreateInfo info;
  info.sType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkImageViewCreateInfo ImageViewCreateInfo()
{
  VkImageViewCreateInfo info;
  info.sType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkBindSparseInfo BindSparseInfo()
{
  VkBindSparseInfo info;
  info.sType = VK_STRUCTURE_TYPE_BIND_SPARSE_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkShaderModuleCreateInfo ShaderModuleCreateInfo()
{
  VkShaderModuleCreateInfo info;
  info.sType = VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkDescriptorSetLayoutCreateInfo DescriptorSetLayoutCreateInfo()
{
  VkDescriptorSetLayoutCreateInfo info;
  info.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkDescriptorPoolCreateInfo DescriptorPoolCreateInfo()
{
  VkDescriptorPoolCreateInfo info;
  info.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkDescriptorSetAllocateInfo DescriptorSetAllocateInfo()
{
  VkDescriptorSetAllocateInfo info;
  info.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkPipelineShaderStageCreateInfo PipelineShaderStageCreateInfo()
{
  VkPipelineShaderStageCreateInfo info;
  info.sType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkComputePipelineCreateInfo ComputePipelineCreateInfo()
{
  VkComputePipelineCreateInfo info;
  info.sType = VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkPipelineVertexInputStateCreateInfo PipelineVertexInputStateCreateInfo()
{
  VkPipelineVertexInputStateCreateInfo info;
  info.sType = VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkPipelineInputAssemblyStateCreateInfo PipelineInputAssemblyStateCreateInfo()
{
  VkPipelineInputAssemblyStateCreateInfo info;
  info.sType = VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkPipelineTessellationStateCreateInfo PipelineTessellationStateCreateInfo()
{
  VkPipelineTessellationStateCreateInfo info;
  info.sType = VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkPipelineViewportStateCreateInfo PipelineViewportStateCreateInfo()
{
  VkPipelineViewportStateCreateInfo info;
  info.sType = VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkPipelineRasterizationStateCreateInfo PipelineRasterizationStateCreateInfo()
{
  VkPipelineRasterizationStateCreateInfo info;
  info.sType = VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkPipelineMultisampleStateCreateInfo PipelineMultisampleStateCreateInfo()
{
  VkPipelineMultisampleStateCreateInfo info;
  info.sType = VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkPipelineColorBlendStateCreateInfo PipelineColorBlendStateCreateInfo()
{
  VkPipelineColorBlendStateCreateInfo info;
  info.sType = VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkPipelineDynamicStateCreateInfo PipelineDynamicStateCreateInfo()
{
  VkPipelineDynamicStateCreateInfo info;
  info.sType = VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkPipelineDepthStencilStateCreateInfo PipelineDepthStencilStateCreateInfo()
{
  VkPipelineDepthStencilStateCreateInfo info;
  info.sType = VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkGraphicsPipelineCreateInfo GraphicsPipelineCreateInfo()
{
  VkGraphicsPipelineCreateInfo info;
  info.sType = VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkPipelineCacheCreateInfo PipelineCacheCreateInfo()
{
  VkPipelineCacheCreateInfo info;
  info.sType = VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkPipelineLayoutCreateInfo PipelineLayoutCreateInfo()
{
  VkPipelineLayoutCreateInfo info;
  info.sType = VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkSamplerCreateInfo SamplerCreateInfo()
{
  VkSamplerCreateInfo info;
  info.sType = VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkCommandPoolCreateInfo CommandPoolCreateInfo()
{
  VkCommandPoolCreateInfo info;
  info.sType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkCommandBufferAllocateInfo CommandBufferAllocateInfo()
{
  VkCommandBufferAllocateInfo info;
  info.sType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkCommandBufferInheritanceInfo CommandBufferInheritanceInfo()
{
  VkCommandBufferInheritanceInfo info;
  info.sType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkCommandBufferBeginInfo CommandBufferBeginInfo()
{
  VkCommandBufferBeginInfo info;
  info.sType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkRenderPassBeginInfo RenderPassBeginInfo()
{
  VkRenderPassBeginInfo info;
  info.sType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkRenderPassCreateInfo RenderPassCreateInfo()
{
  VkRenderPassCreateInfo info;
  info.sType = VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkEventCreateInfo EventCreateInfo()
{
  VkEventCreateInfo info;
  info.sType = VK_STRUCTURE_TYPE_EVENT_CREATE_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkFenceCreateInfo FenceCreateInfo()
{
  VkFenceCreateInfo info;
  info.sType = VK_STRUCTURE_TYPE_FENCE_CREATE_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkSemaphoreCreateInfo SemaphoreCreateInfo()
{
  VkSemaphoreCreateInfo info;
  info.sType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkQueryPoolCreateInfo QueryPoolCreateInfo()
{
  VkQueryPoolCreateInfo info;
  info.sType = VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkFramebufferCreateInfo FramebufferCreateInfo()
{
  VkFramebufferCreateInfo info;
  info.sType = VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkSubmitInfo SubmitInfo()
{
  VkSubmitInfo info;
  info.sType = VK_STRUCTURE_TYPE_SUBMIT_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkDisplayModeCreateInfoKHR DisplayModeCreateInfoKHR()
{
  VkDisplayModeCreateInfoKHR info;
  info.sType = VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR;
  info.pNext = nullptr;
  return info;
}

inline VkDisplaySurfaceCreateInfoKHR DisplaySurfaceCreateInfoKHR()
{
  VkDisplaySurfaceCreateInfoKHR info;
  info.sType = VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR;
  info.pNext = nullptr;
  return info;
}

inline VkDisplayPresentInfoKHR DisplayPresentInfoKHR()
{
  VkDisplayPresentInfoKHR info;
  info.sType = VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR;
  info.pNext = nullptr;
  return info;
}

#ifdef  VK_USE_PLATFORM_ANDROID_KHR
inline VkAndroidSurfaceCreateInfoKHR AndroidSurfaceCreateInfoKHR()
{
  VkAndroidSurfaceCreateInfoKHR info;
  info.sType = VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR;
  info.pNext = nullptr;
  return info;
}
#endif

#ifdef  VK_USE_PLATFORM_VI_NN
inline VkViSurfaceCreateInfoNN ViSurfaceCreateInfoNN()
{
  VkViSurfaceCreateInfoNN info;
  info.sType = VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN;
  info.pNext = nullptr;
  return info;
}
#endif

#ifdef  VK_USE_PLATFORM_WAYLAND_KHR
inline VkWaylandSurfaceCreateInfoKHR WaylandSurfaceCreateInfoKHR()
{
  VkWaylandSurfaceCreateInfoKHR info;
  info.sType = VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR;
  info.pNext = nullptr;
  return info;
}
#endif

#ifdef  VK_USE_PLATFORM_WIN32_KHR
inline VkWin32SurfaceCreateInfoKHR Win32SurfaceCreateInfoKHR()
{
  VkWin32SurfaceCreateInfoKHR info;
  info.sType = VK_STRUCTURE_TYPE_WIN_32_SURFACE_CREATE_INFO_KHR;
  info.pNext = nullptr;
  return info;
}
#endif

#ifdef  VK_USE_PLATFORM_XLIB_KHR
inline VkXlibSurfaceCreateInfoKHR XlibSurfaceCreateInfoKHR()
{
  VkXlibSurfaceCreateInfoKHR info;
  info.sType = VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR;
  info.pNext = nullptr;
  return info;
}
#endif

#ifdef  VK_USE_PLATFORM_XCB_KHR
inline VkXcbSurfaceCreateInfoKHR XcbSurfaceCreateInfoKHR()
{
  VkXcbSurfaceCreateInfoKHR info;
  info.sType = VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR;
  info.pNext = nullptr;
  return info;
}
#endif

#ifdef  VK_USE_PLATFORM_DIRECTFB_EXT
inline VkDirectFBSurfaceCreateInfoEXT DirectFBSurfaceCreateInfoEXT()
{
  VkDirectFBSurfaceCreateInfoEXT info;
  info.sType = VK_STRUCTURE_TYPE_DIRECT_FBS_CREATE_INFO_EXT;
  info.pNext = nullptr;
  return info;
}
#endif

#ifdef  VK_USE_PLATFORM_FUCHSIA
inline VkImagePipeSurfaceCreateInfoFUCHSIA ImagePipeSurfaceCreateInfoFUCHSIA()
{
  VkImagePipeSurfaceCreateInfoFUCHSIA info;
  info.sType = VK_STRUCTURE_TYPE_IMAGE_PIPE_SURFACE_CREATE_INFO_FUCHSIA;
  info.pNext = nullptr;
  return info;
}
#endif

#ifdef  VK_USE_PLATFORM_GGP
inline VkStreamDescriptorSurfaceCreateInfoGGP StreamDescriptorSurfaceCreateInfoGGP()
{
  VkStreamDescriptorSurfaceCreateInfoGGP info;
  info.sType = VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP;
  info.pNext = nullptr;
  return info;
}
#endif

#ifdef  VK_USE_PLATFORM_SCREEN_QNX
inline VkScreenSurfaceCreateInfoQNX ScreenSurfaceCreateInfoQNX()
{
  VkScreenSurfaceCreateInfoQNX info;
  info.sType = VK_STRUCTURE_TYPE_SCREEN_SURFACE_CREATE_INFO_QNX;
  info.pNext = nullptr;
  return info;
}
#endif

inline VkSwapchainCreateInfoKHR SwapchainCreateInfoKHR()
{
  VkSwapchainCreateInfoKHR info;
  info.sType = VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR;
  info.pNext = nullptr;
  return info;
}

inline VkPresentInfoKHR PresentInfoKHR()
{
  VkPresentInfoKHR info;
  info.sType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR;
  info.pNext = nullptr;
  return info;
}

inline VkDebugReportCallbackCreateInfoEXT DebugReportCallbackCreateInfoEXT()
{
  VkDebugReportCallbackCreateInfoEXT info;
  info.sType = VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkValidationFlagsEXT ValidationFlagsEXT()
{
  VkValidationFlagsEXT info;
  info.sType = VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkValidationFeaturesEXT ValidationFeaturesEXT()
{
  VkValidationFeaturesEXT info;
  info.sType = VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkPipelineRasterizationStateRasterizationOrderAMD PipelineRasterizationStateRasterizationOrderAMD()
{
  VkPipelineRasterizationStateRasterizationOrderAMD info;
  info.sType = VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD;
  info.pNext = nullptr;
  return info;
}

inline VkDebugMarkerObjectNameInfoEXT DebugMarkerObjectNameInfoEXT()
{
  VkDebugMarkerObjectNameInfoEXT info;
  info.sType = VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkDebugMarkerObjectTagInfoEXT DebugMarkerObjectTagInfoEXT()
{
  VkDebugMarkerObjectTagInfoEXT info;
  info.sType = VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkDebugMarkerMarkerInfoEXT DebugMarkerMarkerInfoEXT()
{
  VkDebugMarkerMarkerInfoEXT info;
  info.sType = VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkDedicatedAllocationImageCreateInfoNV DedicatedAllocationImageCreateInfoNV()
{
  VkDedicatedAllocationImageCreateInfoNV info;
  info.sType = VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV;
  info.pNext = nullptr;
  return info;
}

inline VkDedicatedAllocationBufferCreateInfoNV DedicatedAllocationBufferCreateInfoNV()
{
  VkDedicatedAllocationBufferCreateInfoNV info;
  info.sType = VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV;
  info.pNext = nullptr;
  return info;
}

inline VkDedicatedAllocationMemoryAllocateInfoNV DedicatedAllocationMemoryAllocateInfoNV()
{
  VkDedicatedAllocationMemoryAllocateInfoNV info;
  info.sType = VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV;
  info.pNext = nullptr;
  return info;
}

inline VkExternalMemoryImageCreateInfoNV ExternalMemoryImageCreateInfoNV()
{
  VkExternalMemoryImageCreateInfoNV info;
  info.sType = VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV;
  info.pNext = nullptr;
  return info;
}

inline VkExportMemoryAllocateInfoNV ExportMemoryAllocateInfoNV()
{
  VkExportMemoryAllocateInfoNV info;
  info.sType = VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV;
  info.pNext = nullptr;
  return info;
}

#ifdef  VK_USE_PLATFORM_WIN32_KHR
inline VkImportMemoryWin32HandleInfoNV ImportMemoryWin32HandleInfoNV()
{
  VkImportMemoryWin32HandleInfoNV info;
  info.sType = VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN_32_HANDLE_INFO_NV;
  info.pNext = nullptr;
  return info;
}
#endif

#ifdef  VK_USE_PLATFORM_WIN32_KHR
inline VkExportMemoryWin32HandleInfoNV ExportMemoryWin32HandleInfoNV()
{
  VkExportMemoryWin32HandleInfoNV info;
  info.sType = VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN_32_HANDLE_INFO_NV;
  info.pNext = nullptr;
  return info;
}
#endif

#ifdef  VK_USE_PLATFORM_WIN32_KHR
inline VkWin32KeyedMutexAcquireReleaseInfoNV Win32KeyedMutexAcquireReleaseInfoNV()
{
  VkWin32KeyedMutexAcquireReleaseInfoNV info;
  info.sType = VK_STRUCTURE_TYPE_WIN_32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV;
  info.pNext = nullptr;
  return info;
}
#endif

inline VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV PhysicalDeviceDeviceGeneratedCommandsFeaturesNV()
{
  VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV;
  info.pNext = nullptr;
  return info;
}

inline VkDevicePrivateDataCreateInfoEXT DevicePrivateDataCreateInfoEXT()
{
  VkDevicePrivateDataCreateInfoEXT info;
  info.sType = VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkPrivateDataSlotCreateInfoEXT PrivateDataSlotCreateInfoEXT()
{
  VkPrivateDataSlotCreateInfoEXT info;
  info.sType = VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDevicePrivateDataFeaturesEXT PhysicalDevicePrivateDataFeaturesEXT()
{
  VkPhysicalDevicePrivateDataFeaturesEXT info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkGraphicsShaderGroupCreateInfoNV GraphicsShaderGroupCreateInfoNV()
{
  VkGraphicsShaderGroupCreateInfoNV info;
  info.sType = VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV;
  info.pNext = nullptr;
  return info;
}

inline VkGraphicsPipelineShaderGroupsCreateInfoNV GraphicsPipelineShaderGroupsCreateInfoNV()
{
  VkGraphicsPipelineShaderGroupsCreateInfoNV info;
  info.sType = VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV;
  info.pNext = nullptr;
  return info;
}

inline VkIndirectCommandsLayoutTokenNV IndirectCommandsLayoutTokenNV()
{
  VkIndirectCommandsLayoutTokenNV info;
  info.sType = VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV;
  info.pNext = nullptr;
  return info;
}

inline VkIndirectCommandsLayoutCreateInfoNV IndirectCommandsLayoutCreateInfoNV()
{
  VkIndirectCommandsLayoutCreateInfoNV info;
  info.sType = VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV;
  info.pNext = nullptr;
  return info;
}

inline VkGeneratedCommandsInfoNV GeneratedCommandsInfoNV()
{
  VkGeneratedCommandsInfoNV info;
  info.sType = VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV;
  info.pNext = nullptr;
  return info;
}

inline VkGeneratedCommandsMemoryRequirementsInfoNV GeneratedCommandsMemoryRequirementsInfoNV()
{
  VkGeneratedCommandsMemoryRequirementsInfoNV info;
  info.sType = VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceFeatures2 PhysicalDeviceFeatures2()
{
  VkPhysicalDeviceFeatures2 info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceImageFormatInfo2 PhysicalDeviceImageFormatInfo2()
{
  VkPhysicalDeviceImageFormatInfo2 info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceSparseImageFormatInfo2 PhysicalDeviceSparseImageFormatInfo2()
{
  VkPhysicalDeviceSparseImageFormatInfo2 info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2;
  info.pNext = nullptr;
  return info;
}

inline VkPresentRegionsKHR PresentRegionsKHR()
{
  VkPresentRegionsKHR info;
  info.sType = VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceVariablePointersFeatures PhysicalDeviceVariablePointersFeatures()
{
  VkPhysicalDeviceVariablePointersFeatures info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceExternalImageFormatInfo PhysicalDeviceExternalImageFormatInfo()
{
  VkPhysicalDeviceExternalImageFormatInfo info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceExternalBufferInfo PhysicalDeviceExternalBufferInfo()
{
  VkPhysicalDeviceExternalBufferInfo info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkExternalMemoryImageCreateInfo ExternalMemoryImageCreateInfo()
{
  VkExternalMemoryImageCreateInfo info;
  info.sType = VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkExternalMemoryBufferCreateInfo ExternalMemoryBufferCreateInfo()
{
  VkExternalMemoryBufferCreateInfo info;
  info.sType = VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkExportMemoryAllocateInfo ExportMemoryAllocateInfo()
{
  VkExportMemoryAllocateInfo info;
  info.sType = VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO;
  info.pNext = nullptr;
  return info;
}

#ifdef  VK_USE_PLATFORM_WIN32_KHR
inline VkImportMemoryWin32HandleInfoKHR ImportMemoryWin32HandleInfoKHR()
{
  VkImportMemoryWin32HandleInfoKHR info;
  info.sType = VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN_32_HANDLE_INFO_KHR;
  info.pNext = nullptr;
  return info;
}
#endif

#ifdef  VK_USE_PLATFORM_WIN32_KHR
inline VkExportMemoryWin32HandleInfoKHR ExportMemoryWin32HandleInfoKHR()
{
  VkExportMemoryWin32HandleInfoKHR info;
  info.sType = VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN_32_HANDLE_INFO_KHR;
  info.pNext = nullptr;
  return info;
}
#endif

#ifdef  VK_USE_PLATFORM_FUCHSIA
inline VkImportMemoryZirconHandleInfoFUCHSIA ImportMemoryZirconHandleInfoFUCHSIA()
{
  VkImportMemoryZirconHandleInfoFUCHSIA info;
  info.sType = VK_STRUCTURE_TYPE_IMPORT_MEMORY_ZIRCON_HANDLE_INFO_FUCHSIA;
  info.pNext = nullptr;
  return info;
}
#endif

#ifdef  VK_USE_PLATFORM_FUCHSIA
inline VkMemoryGetZirconHandleInfoFUCHSIA MemoryGetZirconHandleInfoFUCHSIA()
{
  VkMemoryGetZirconHandleInfoFUCHSIA info;
  info.sType = VK_STRUCTURE_TYPE_MEMORY_GET_ZIRCON_HANDLE_INFO_FUCHSIA;
  info.pNext = nullptr;
  return info;
}
#endif

#ifdef  VK_USE_PLATFORM_WIN32_KHR
inline VkMemoryGetWin32HandleInfoKHR MemoryGetWin32HandleInfoKHR()
{
  VkMemoryGetWin32HandleInfoKHR info;
  info.sType = VK_STRUCTURE_TYPE_MEMORY_GET_WIN_32_HANDLE_INFO_KHR;
  info.pNext = nullptr;
  return info;
}
#endif

inline VkImportMemoryFdInfoKHR ImportMemoryFdInfoKHR()
{
  VkImportMemoryFdInfoKHR info;
  info.sType = VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR;
  info.pNext = nullptr;
  return info;
}

inline VkMemoryGetFdInfoKHR MemoryGetFdInfoKHR()
{
  VkMemoryGetFdInfoKHR info;
  info.sType = VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR;
  info.pNext = nullptr;
  return info;
}

#ifdef  VK_USE_PLATFORM_WIN32_KHR
inline VkWin32KeyedMutexAcquireReleaseInfoKHR Win32KeyedMutexAcquireReleaseInfoKHR()
{
  VkWin32KeyedMutexAcquireReleaseInfoKHR info;
  info.sType = VK_STRUCTURE_TYPE_WIN_32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR;
  info.pNext = nullptr;
  return info;
}
#endif

inline VkPhysicalDeviceExternalSemaphoreInfo PhysicalDeviceExternalSemaphoreInfo()
{
  VkPhysicalDeviceExternalSemaphoreInfo info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkExportSemaphoreCreateInfo ExportSemaphoreCreateInfo()
{
  VkExportSemaphoreCreateInfo info;
  info.sType = VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO;
  info.pNext = nullptr;
  return info;
}

#ifdef  VK_USE_PLATFORM_WIN32_KHR
inline VkImportSemaphoreWin32HandleInfoKHR ImportSemaphoreWin32HandleInfoKHR()
{
  VkImportSemaphoreWin32HandleInfoKHR info;
  info.sType = VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN_32_HANDLE_INFO_KHR;
  info.pNext = nullptr;
  return info;
}
#endif

#ifdef  VK_USE_PLATFORM_WIN32_KHR
inline VkExportSemaphoreWin32HandleInfoKHR ExportSemaphoreWin32HandleInfoKHR()
{
  VkExportSemaphoreWin32HandleInfoKHR info;
  info.sType = VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN_32_HANDLE_INFO_KHR;
  info.pNext = nullptr;
  return info;
}
#endif

#ifdef  VK_USE_PLATFORM_WIN32_KHR
inline VkD3D12FenceSubmitInfoKHR D3D12FenceSubmitInfoKHR()
{
  VkD3D12FenceSubmitInfoKHR info;
  info.sType = VK_STRUCTURE_TYPE_3_12_FENCE_SUBMIT_INFO_KHR;
  info.pNext = nullptr;
  return info;
}
#endif

#ifdef  VK_USE_PLATFORM_WIN32_KHR
inline VkSemaphoreGetWin32HandleInfoKHR SemaphoreGetWin32HandleInfoKHR()
{
  VkSemaphoreGetWin32HandleInfoKHR info;
  info.sType = VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN_32_HANDLE_INFO_KHR;
  info.pNext = nullptr;
  return info;
}
#endif

inline VkImportSemaphoreFdInfoKHR ImportSemaphoreFdInfoKHR()
{
  VkImportSemaphoreFdInfoKHR info;
  info.sType = VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR;
  info.pNext = nullptr;
  return info;
}

inline VkSemaphoreGetFdInfoKHR SemaphoreGetFdInfoKHR()
{
  VkSemaphoreGetFdInfoKHR info;
  info.sType = VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR;
  info.pNext = nullptr;
  return info;
}

#ifdef  VK_USE_PLATFORM_FUCHSIA
inline VkImportSemaphoreZirconHandleInfoFUCHSIA ImportSemaphoreZirconHandleInfoFUCHSIA()
{
  VkImportSemaphoreZirconHandleInfoFUCHSIA info;
  info.sType = VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_ZIRCON_HANDLE_INFO_FUCHSIA;
  info.pNext = nullptr;
  return info;
}
#endif

#ifdef  VK_USE_PLATFORM_FUCHSIA
inline VkSemaphoreGetZirconHandleInfoFUCHSIA SemaphoreGetZirconHandleInfoFUCHSIA()
{
  VkSemaphoreGetZirconHandleInfoFUCHSIA info;
  info.sType = VK_STRUCTURE_TYPE_SEMAPHORE_GET_ZIRCON_HANDLE_INFO_FUCHSIA;
  info.pNext = nullptr;
  return info;
}
#endif

inline VkPhysicalDeviceExternalFenceInfo PhysicalDeviceExternalFenceInfo()
{
  VkPhysicalDeviceExternalFenceInfo info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkExportFenceCreateInfo ExportFenceCreateInfo()
{
  VkExportFenceCreateInfo info;
  info.sType = VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO;
  info.pNext = nullptr;
  return info;
}

#ifdef  VK_USE_PLATFORM_WIN32_KHR
inline VkImportFenceWin32HandleInfoKHR ImportFenceWin32HandleInfoKHR()
{
  VkImportFenceWin32HandleInfoKHR info;
  info.sType = VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN_32_HANDLE_INFO_KHR;
  info.pNext = nullptr;
  return info;
}
#endif

#ifdef  VK_USE_PLATFORM_WIN32_KHR
inline VkExportFenceWin32HandleInfoKHR ExportFenceWin32HandleInfoKHR()
{
  VkExportFenceWin32HandleInfoKHR info;
  info.sType = VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN_32_HANDLE_INFO_KHR;
  info.pNext = nullptr;
  return info;
}
#endif

#ifdef  VK_USE_PLATFORM_WIN32_KHR
inline VkFenceGetWin32HandleInfoKHR FenceGetWin32HandleInfoKHR()
{
  VkFenceGetWin32HandleInfoKHR info;
  info.sType = VK_STRUCTURE_TYPE_FENCE_GET_WIN_32_HANDLE_INFO_KHR;
  info.pNext = nullptr;
  return info;
}
#endif

inline VkImportFenceFdInfoKHR ImportFenceFdInfoKHR()
{
  VkImportFenceFdInfoKHR info;
  info.sType = VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR;
  info.pNext = nullptr;
  return info;
}

inline VkFenceGetFdInfoKHR FenceGetFdInfoKHR()
{
  VkFenceGetFdInfoKHR info;
  info.sType = VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceMultiviewFeatures PhysicalDeviceMultiviewFeatures()
{
  VkPhysicalDeviceMultiviewFeatures info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES;
  info.pNext = nullptr;
  return info;
}

inline VkRenderPassMultiviewCreateInfo RenderPassMultiviewCreateInfo()
{
  VkRenderPassMultiviewCreateInfo info;
  info.sType = VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkDisplayPowerInfoEXT DisplayPowerInfoEXT()
{
  VkDisplayPowerInfoEXT info;
  info.sType = VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkDeviceEventInfoEXT DeviceEventInfoEXT()
{
  VkDeviceEventInfoEXT info;
  info.sType = VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkDisplayEventInfoEXT DisplayEventInfoEXT()
{
  VkDisplayEventInfoEXT info;
  info.sType = VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkSwapchainCounterCreateInfoEXT SwapchainCounterCreateInfoEXT()
{
  VkSwapchainCounterCreateInfoEXT info;
  info.sType = VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkMemoryAllocateFlagsInfo MemoryAllocateFlagsInfo()
{
  VkMemoryAllocateFlagsInfo info;
  info.sType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkBindBufferMemoryInfo BindBufferMemoryInfo()
{
  VkBindBufferMemoryInfo info;
  info.sType = VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkBindBufferMemoryDeviceGroupInfo BindBufferMemoryDeviceGroupInfo()
{
  VkBindBufferMemoryDeviceGroupInfo info;
  info.sType = VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkBindImageMemoryInfo BindImageMemoryInfo()
{
  VkBindImageMemoryInfo info;
  info.sType = VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkBindImageMemoryDeviceGroupInfo BindImageMemoryDeviceGroupInfo()
{
  VkBindImageMemoryDeviceGroupInfo info;
  info.sType = VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkDeviceGroupRenderPassBeginInfo DeviceGroupRenderPassBeginInfo()
{
  VkDeviceGroupRenderPassBeginInfo info;
  info.sType = VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkDeviceGroupCommandBufferBeginInfo DeviceGroupCommandBufferBeginInfo()
{
  VkDeviceGroupCommandBufferBeginInfo info;
  info.sType = VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkDeviceGroupSubmitInfo DeviceGroupSubmitInfo()
{
  VkDeviceGroupSubmitInfo info;
  info.sType = VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkDeviceGroupBindSparseInfo DeviceGroupBindSparseInfo()
{
  VkDeviceGroupBindSparseInfo info;
  info.sType = VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkImageSwapchainCreateInfoKHR ImageSwapchainCreateInfoKHR()
{
  VkImageSwapchainCreateInfoKHR info;
  info.sType = VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR;
  info.pNext = nullptr;
  return info;
}

inline VkBindImageMemorySwapchainInfoKHR BindImageMemorySwapchainInfoKHR()
{
  VkBindImageMemorySwapchainInfoKHR info;
  info.sType = VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR;
  info.pNext = nullptr;
  return info;
}

inline VkAcquireNextImageInfoKHR AcquireNextImageInfoKHR()
{
  VkAcquireNextImageInfoKHR info;
  info.sType = VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR;
  info.pNext = nullptr;
  return info;
}

inline VkDeviceGroupPresentInfoKHR DeviceGroupPresentInfoKHR()
{
  VkDeviceGroupPresentInfoKHR info;
  info.sType = VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR;
  info.pNext = nullptr;
  return info;
}

inline VkDeviceGroupDeviceCreateInfo DeviceGroupDeviceCreateInfo()
{
  VkDeviceGroupDeviceCreateInfo info;
  info.sType = VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkDeviceGroupSwapchainCreateInfoKHR DeviceGroupSwapchainCreateInfoKHR()
{
  VkDeviceGroupSwapchainCreateInfoKHR info;
  info.sType = VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR;
  info.pNext = nullptr;
  return info;
}

inline VkDescriptorUpdateTemplateCreateInfo DescriptorUpdateTemplateCreateInfo()
{
  VkDescriptorUpdateTemplateCreateInfo info;
  info.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkHdrMetadataEXT HdrMetadataEXT()
{
  VkHdrMetadataEXT info;
  info.sType = VK_STRUCTURE_TYPE_HDR_METADATA_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkSwapchainDisplayNativeHdrCreateInfoAMD SwapchainDisplayNativeHdrCreateInfoAMD()
{
  VkSwapchainDisplayNativeHdrCreateInfoAMD info;
  info.sType = VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD;
  info.pNext = nullptr;
  return info;
}

inline VkPresentTimesInfoGOOGLE PresentTimesInfoGOOGLE()
{
  VkPresentTimesInfoGOOGLE info;
  info.sType = VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE;
  info.pNext = nullptr;
  return info;
}

#ifdef  VK_USE_PLATFORM_IOS_MVK
inline VkIOSSurfaceCreateInfoMVK IOSSurfaceCreateInfoMVK()
{
  VkIOSSurfaceCreateInfoMVK info;
  info.sType = VK_STRUCTURE_TYPE_IOSS_CREATE_INFO_MVK;
  info.pNext = nullptr;
  return info;
}
#endif

#ifdef  VK_USE_PLATFORM_MACOS_MVK
inline VkMacOSSurfaceCreateInfoMVK MacOSSurfaceCreateInfoMVK()
{
  VkMacOSSurfaceCreateInfoMVK info;
  info.sType = VK_STRUCTURE_TYPE_MAC_OSS_CREATE_INFO_MVK;
  info.pNext = nullptr;
  return info;
}
#endif

#ifdef  VK_USE_PLATFORM_METAL_EXT
inline VkMetalSurfaceCreateInfoEXT MetalSurfaceCreateInfoEXT()
{
  VkMetalSurfaceCreateInfoEXT info;
  info.sType = VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT;
  info.pNext = nullptr;
  return info;
}
#endif

inline VkPipelineViewportWScalingStateCreateInfoNV PipelineViewportWScalingStateCreateInfoNV()
{
  VkPipelineViewportWScalingStateCreateInfoNV info;
  info.sType = VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV;
  info.pNext = nullptr;
  return info;
}

inline VkPipelineViewportSwizzleStateCreateInfoNV PipelineViewportSwizzleStateCreateInfoNV()
{
  VkPipelineViewportSwizzleStateCreateInfoNV info;
  info.sType = VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV;
  info.pNext = nullptr;
  return info;
}

inline VkPipelineDiscardRectangleStateCreateInfoEXT PipelineDiscardRectangleStateCreateInfoEXT()
{
  VkPipelineDiscardRectangleStateCreateInfoEXT info;
  info.sType = VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkRenderPassInputAttachmentAspectCreateInfo RenderPassInputAttachmentAspectCreateInfo()
{
  VkRenderPassInputAttachmentAspectCreateInfo info;
  info.sType = VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceSurfaceInfo2KHR PhysicalDeviceSurfaceInfo2KHR()
{
  VkPhysicalDeviceSurfaceInfo2KHR info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR;
  info.pNext = nullptr;
  return info;
}

inline VkDisplayPlaneInfo2KHR DisplayPlaneInfo2KHR()
{
  VkDisplayPlaneInfo2KHR info;
  info.sType = VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDevice16BitStorageFeatures PhysicalDevice16BitStorageFeatures()
{
  VkPhysicalDevice16BitStorageFeatures info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures PhysicalDeviceShaderSubgroupExtendedTypesFeatures()
{
  VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES;
  info.pNext = nullptr;
  return info;
}

inline VkBufferMemoryRequirementsInfo2 BufferMemoryRequirementsInfo2()
{
  VkBufferMemoryRequirementsInfo2 info;
  info.sType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2;
  info.pNext = nullptr;
  return info;
}

inline VkImageMemoryRequirementsInfo2 ImageMemoryRequirementsInfo2()
{
  VkImageMemoryRequirementsInfo2 info;
  info.sType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2;
  info.pNext = nullptr;
  return info;
}

inline VkImageSparseMemoryRequirementsInfo2 ImageSparseMemoryRequirementsInfo2()
{
  VkImageSparseMemoryRequirementsInfo2 info;
  info.sType = VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2;
  info.pNext = nullptr;
  return info;
}

inline VkMemoryDedicatedAllocateInfo MemoryDedicatedAllocateInfo()
{
  VkMemoryDedicatedAllocateInfo info;
  info.sType = VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkImageViewUsageCreateInfo ImageViewUsageCreateInfo()
{
  VkImageViewUsageCreateInfo info;
  info.sType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkPipelineTessellationDomainOriginStateCreateInfo PipelineTessellationDomainOriginStateCreateInfo()
{
  VkPipelineTessellationDomainOriginStateCreateInfo info;
  info.sType = VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkSamplerYcbcrConversionInfo SamplerYcbcrConversionInfo()
{
  VkSamplerYcbcrConversionInfo info;
  info.sType = VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkSamplerYcbcrConversionCreateInfo SamplerYcbcrConversionCreateInfo()
{
  VkSamplerYcbcrConversionCreateInfo info;
  info.sType = VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkBindImagePlaneMemoryInfo BindImagePlaneMemoryInfo()
{
  VkBindImagePlaneMemoryInfo info;
  info.sType = VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkImagePlaneMemoryRequirementsInfo ImagePlaneMemoryRequirementsInfo()
{
  VkImagePlaneMemoryRequirementsInfo info;
  info.sType = VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceSamplerYcbcrConversionFeatures PhysicalDeviceSamplerYcbcrConversionFeatures()
{
  VkPhysicalDeviceSamplerYcbcrConversionFeatures info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES;
  info.pNext = nullptr;
  return info;
}

inline VkConditionalRenderingBeginInfoEXT ConditionalRenderingBeginInfoEXT()
{
  VkConditionalRenderingBeginInfoEXT info;
  info.sType = VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkProtectedSubmitInfo ProtectedSubmitInfo()
{
  VkProtectedSubmitInfo info;
  info.sType = VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceProtectedMemoryFeatures PhysicalDeviceProtectedMemoryFeatures()
{
  VkPhysicalDeviceProtectedMemoryFeatures info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES;
  info.pNext = nullptr;
  return info;
}

inline VkDeviceQueueInfo2 DeviceQueueInfo2()
{
  VkDeviceQueueInfo2 info;
  info.sType = VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2;
  info.pNext = nullptr;
  return info;
}

inline VkPipelineCoverageToColorStateCreateInfoNV PipelineCoverageToColorStateCreateInfoNV()
{
  VkPipelineCoverageToColorStateCreateInfoNV info;
  info.sType = VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV;
  info.pNext = nullptr;
  return info;
}

inline VkSampleLocationsInfoEXT SampleLocationsInfoEXT()
{
  VkSampleLocationsInfoEXT info;
  info.sType = VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkRenderPassSampleLocationsBeginInfoEXT RenderPassSampleLocationsBeginInfoEXT()
{
  VkRenderPassSampleLocationsBeginInfoEXT info;
  info.sType = VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkPipelineSampleLocationsStateCreateInfoEXT PipelineSampleLocationsStateCreateInfoEXT()
{
  VkPipelineSampleLocationsStateCreateInfoEXT info;
  info.sType = VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkSamplerReductionModeCreateInfo SamplerReductionModeCreateInfo()
{
  VkSamplerReductionModeCreateInfo info;
  info.sType = VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT PhysicalDeviceBlendOperationAdvancedFeaturesEXT()
{
  VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkPipelineColorBlendAdvancedStateCreateInfoEXT PipelineColorBlendAdvancedStateCreateInfoEXT()
{
  VkPipelineColorBlendAdvancedStateCreateInfoEXT info;
  info.sType = VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceInlineUniformBlockFeaturesEXT PhysicalDeviceInlineUniformBlockFeaturesEXT()
{
  VkPhysicalDeviceInlineUniformBlockFeaturesEXT info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkWriteDescriptorSetInlineUniformBlockEXT WriteDescriptorSetInlineUniformBlockEXT()
{
  VkWriteDescriptorSetInlineUniformBlockEXT info;
  info.sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkDescriptorPoolInlineUniformBlockCreateInfoEXT DescriptorPoolInlineUniformBlockCreateInfoEXT()
{
  VkDescriptorPoolInlineUniformBlockCreateInfoEXT info;
  info.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkPipelineCoverageModulationStateCreateInfoNV PipelineCoverageModulationStateCreateInfoNV()
{
  VkPipelineCoverageModulationStateCreateInfoNV info;
  info.sType = VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV;
  info.pNext = nullptr;
  return info;
}

inline VkImageFormatListCreateInfo ImageFormatListCreateInfo()
{
  VkImageFormatListCreateInfo info;
  info.sType = VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkValidationCacheCreateInfoEXT ValidationCacheCreateInfoEXT()
{
  VkValidationCacheCreateInfoEXT info;
  info.sType = VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkShaderModuleValidationCacheCreateInfoEXT ShaderModuleValidationCacheCreateInfoEXT()
{
  VkShaderModuleValidationCacheCreateInfoEXT info;
  info.sType = VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceShaderDrawParametersFeatures PhysicalDeviceShaderDrawParametersFeatures()
{
  VkPhysicalDeviceShaderDrawParametersFeatures info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceShaderFloat16Int8Features PhysicalDeviceShaderFloat16Int8Features()
{
  VkPhysicalDeviceShaderFloat16Int8Features info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceHostQueryResetFeatures PhysicalDeviceHostQueryResetFeatures()
{
  VkPhysicalDeviceHostQueryResetFeatures info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES;
  info.pNext = nullptr;
  return info;
}

#ifdef  VK_USE_PLATFORM_ANDROID_KHR
inline VkNativeBufferANDROID NativeBufferANDROID()
{
  VkNativeBufferANDROID info;
  info.sType = VK_STRUCTURE_TYPE_NATIVE_BUFFER_ANDROID;
  info.pNext = nullptr;
  return info;
}
#endif

#ifdef  VK_USE_PLATFORM_ANDROID_KHR
inline VkSwapchainImageCreateInfoANDROID SwapchainImageCreateInfoANDROID()
{
  VkSwapchainImageCreateInfoANDROID info;
  info.sType = VK_STRUCTURE_TYPE_SWAPCHAIN_IMAGE_CREATE_INFO_ANDROID;
  info.pNext = nullptr;
  return info;
}
#endif

#ifdef  VK_USE_PLATFORM_ANDROID_KHR
inline VkPhysicalDevicePresentationPropertiesANDROID PhysicalDevicePresentationPropertiesANDROID()
{
  VkPhysicalDevicePresentationPropertiesANDROID info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENTATION_PROPERTIES_ANDROID;
  info.pNext = nullptr;
  return info;
}
#endif

inline VkDeviceQueueGlobalPriorityCreateInfoEXT DeviceQueueGlobalPriorityCreateInfoEXT()
{
  VkDeviceQueueGlobalPriorityCreateInfoEXT info;
  info.sType = VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkDebugUtilsObjectNameInfoEXT DebugUtilsObjectNameInfoEXT()
{
  VkDebugUtilsObjectNameInfoEXT info;
  info.sType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkDebugUtilsObjectTagInfoEXT DebugUtilsObjectTagInfoEXT()
{
  VkDebugUtilsObjectTagInfoEXT info;
  info.sType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkDebugUtilsLabelEXT DebugUtilsLabelEXT()
{
  VkDebugUtilsLabelEXT info;
  info.sType = VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkDebugUtilsMessengerCreateInfoEXT DebugUtilsMessengerCreateInfoEXT()
{
  VkDebugUtilsMessengerCreateInfoEXT info;
  info.sType = VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkDebugUtilsMessengerCallbackDataEXT DebugUtilsMessengerCallbackDataEXT()
{
  VkDebugUtilsMessengerCallbackDataEXT info;
  info.sType = VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceDeviceMemoryReportFeaturesEXT PhysicalDeviceDeviceMemoryReportFeaturesEXT()
{
  VkPhysicalDeviceDeviceMemoryReportFeaturesEXT info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkDeviceDeviceMemoryReportCreateInfoEXT DeviceDeviceMemoryReportCreateInfoEXT()
{
  VkDeviceDeviceMemoryReportCreateInfoEXT info;
  info.sType = VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkImportMemoryHostPointerInfoEXT ImportMemoryHostPointerInfoEXT()
{
  VkImportMemoryHostPointerInfoEXT info;
  info.sType = VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkCalibratedTimestampInfoEXT CalibratedTimestampInfoEXT()
{
  VkCalibratedTimestampInfoEXT info;
  info.sType = VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkPipelineRasterizationConservativeStateCreateInfoEXT PipelineRasterizationConservativeStateCreateInfoEXT()
{
  VkPipelineRasterizationConservativeStateCreateInfoEXT info;
  info.sType = VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceDescriptorIndexingFeatures PhysicalDeviceDescriptorIndexingFeatures()
{
  VkPhysicalDeviceDescriptorIndexingFeatures info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES;
  info.pNext = nullptr;
  return info;
}

inline VkDescriptorSetLayoutBindingFlagsCreateInfo DescriptorSetLayoutBindingFlagsCreateInfo()
{
  VkDescriptorSetLayoutBindingFlagsCreateInfo info;
  info.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkDescriptorSetVariableDescriptorCountAllocateInfo DescriptorSetVariableDescriptorCountAllocateInfo()
{
  VkDescriptorSetVariableDescriptorCountAllocateInfo info;
  info.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkAttachmentDescription2 AttachmentDescription2()
{
  VkAttachmentDescription2 info;
  info.sType = VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2;
  info.pNext = nullptr;
  return info;
}

inline VkAttachmentReference2 AttachmentReference2()
{
  VkAttachmentReference2 info;
  info.sType = VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2;
  info.pNext = nullptr;
  return info;
}

inline VkSubpassDescription2 SubpassDescription2()
{
  VkSubpassDescription2 info;
  info.sType = VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2;
  info.pNext = nullptr;
  return info;
}

inline VkSubpassDependency2 SubpassDependency2()
{
  VkSubpassDependency2 info;
  info.sType = VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2;
  info.pNext = nullptr;
  return info;
}

inline VkRenderPassCreateInfo2 RenderPassCreateInfo2()
{
  VkRenderPassCreateInfo2 info;
  info.sType = VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2;
  info.pNext = nullptr;
  return info;
}

inline VkSubpassBeginInfo SubpassBeginInfo()
{
  VkSubpassBeginInfo info;
  info.sType = VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkSubpassEndInfo SubpassEndInfo()
{
  VkSubpassEndInfo info;
  info.sType = VK_STRUCTURE_TYPE_SUBPASS_END_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceTimelineSemaphoreFeatures PhysicalDeviceTimelineSemaphoreFeatures()
{
  VkPhysicalDeviceTimelineSemaphoreFeatures info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES;
  info.pNext = nullptr;
  return info;
}

inline VkSemaphoreTypeCreateInfo SemaphoreTypeCreateInfo()
{
  VkSemaphoreTypeCreateInfo info;
  info.sType = VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkTimelineSemaphoreSubmitInfo TimelineSemaphoreSubmitInfo()
{
  VkTimelineSemaphoreSubmitInfo info;
  info.sType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkSemaphoreWaitInfo SemaphoreWaitInfo()
{
  VkSemaphoreWaitInfo info;
  info.sType = VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkSemaphoreSignalInfo SemaphoreSignalInfo()
{
  VkSemaphoreSignalInfo info;
  info.sType = VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkPipelineVertexInputDivisorStateCreateInfoEXT PipelineVertexInputDivisorStateCreateInfoEXT()
{
  VkPipelineVertexInputDivisorStateCreateInfoEXT info;
  info.sType = VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT;
  info.pNext = nullptr;
  return info;
}

#ifdef  VK_USE_PLATFORM_ANDROID_KHR
inline VkImportAndroidHardwareBufferInfoANDROID ImportAndroidHardwareBufferInfoANDROID()
{
  VkImportAndroidHardwareBufferInfoANDROID info;
  info.sType = VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID;
  info.pNext = nullptr;
  return info;
}
#endif

#ifdef  VK_USE_PLATFORM_ANDROID_KHR
inline VkMemoryGetAndroidHardwareBufferInfoANDROID MemoryGetAndroidHardwareBufferInfoANDROID()
{
  VkMemoryGetAndroidHardwareBufferInfoANDROID info;
  info.sType = VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID;
  info.pNext = nullptr;
  return info;
}
#endif

inline VkCommandBufferInheritanceConditionalRenderingInfoEXT CommandBufferInheritanceConditionalRenderingInfoEXT()
{
  VkCommandBufferInheritanceConditionalRenderingInfoEXT info;
  info.sType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT;
  info.pNext = nullptr;
  return info;
}

#ifdef  VK_USE_PLATFORM_ANDROID_KHR
inline VkExternalFormatANDROID ExternalFormatANDROID()
{
  VkExternalFormatANDROID info;
  info.sType = VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID;
  info.pNext = nullptr;
  return info;
}
#endif

inline VkPhysicalDevice8BitStorageFeatures PhysicalDevice8BitStorageFeatures()
{
  VkPhysicalDevice8BitStorageFeatures info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceConditionalRenderingFeaturesEXT PhysicalDeviceConditionalRenderingFeaturesEXT()
{
  VkPhysicalDeviceConditionalRenderingFeaturesEXT info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceVulkanMemoryModelFeatures PhysicalDeviceVulkanMemoryModelFeatures()
{
  VkPhysicalDeviceVulkanMemoryModelFeatures info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceShaderAtomicInt64Features PhysicalDeviceShaderAtomicInt64Features()
{
  VkPhysicalDeviceShaderAtomicInt64Features info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceShaderAtomicFloatFeaturesEXT PhysicalDeviceShaderAtomicFloatFeaturesEXT()
{
  VkPhysicalDeviceShaderAtomicFloatFeaturesEXT info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT PhysicalDeviceVertexAttributeDivisorFeaturesEXT()
{
  VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkSubpassDescriptionDepthStencilResolve SubpassDescriptionDepthStencilResolve()
{
  VkSubpassDescriptionDepthStencilResolve info;
  info.sType = VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE;
  info.pNext = nullptr;
  return info;
}

inline VkImageViewASTCDecodeModeEXT ImageViewASTCDecodeModeEXT()
{
  VkImageViewASTCDecodeModeEXT info;
  info.sType = VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceASTCDecodeFeaturesEXT PhysicalDeviceASTCDecodeFeaturesEXT()
{
  VkPhysicalDeviceASTCDecodeFeaturesEXT info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceTransformFeedbackFeaturesEXT PhysicalDeviceTransformFeedbackFeaturesEXT()
{
  VkPhysicalDeviceTransformFeedbackFeaturesEXT info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkPipelineRasterizationStateStreamCreateInfoEXT PipelineRasterizationStateStreamCreateInfoEXT()
{
  VkPipelineRasterizationStateStreamCreateInfoEXT info;
  info.sType = VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV PhysicalDeviceRepresentativeFragmentTestFeaturesNV()
{
  VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV;
  info.pNext = nullptr;
  return info;
}

inline VkPipelineRepresentativeFragmentTestStateCreateInfoNV PipelineRepresentativeFragmentTestStateCreateInfoNV()
{
  VkPipelineRepresentativeFragmentTestStateCreateInfoNV info;
  info.sType = VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceExclusiveScissorFeaturesNV PhysicalDeviceExclusiveScissorFeaturesNV()
{
  VkPhysicalDeviceExclusiveScissorFeaturesNV info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV;
  info.pNext = nullptr;
  return info;
}

inline VkPipelineViewportExclusiveScissorStateCreateInfoNV PipelineViewportExclusiveScissorStateCreateInfoNV()
{
  VkPipelineViewportExclusiveScissorStateCreateInfoNV info;
  info.sType = VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceCornerSampledImageFeaturesNV PhysicalDeviceCornerSampledImageFeaturesNV()
{
  VkPhysicalDeviceCornerSampledImageFeaturesNV info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceComputeShaderDerivativesFeaturesNV PhysicalDeviceComputeShaderDerivativesFeaturesNV()
{
  VkPhysicalDeviceComputeShaderDerivativesFeaturesNV info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV PhysicalDeviceFragmentShaderBarycentricFeaturesNV()
{
  VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceShaderImageFootprintFeaturesNV PhysicalDeviceShaderImageFootprintFeaturesNV()
{
  VkPhysicalDeviceShaderImageFootprintFeaturesNV info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV()
{
  VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV;
  info.pNext = nullptr;
  return info;
}

inline VkPipelineViewportShadingRateImageStateCreateInfoNV PipelineViewportShadingRateImageStateCreateInfoNV()
{
  VkPipelineViewportShadingRateImageStateCreateInfoNV info;
  info.sType = VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceShadingRateImageFeaturesNV PhysicalDeviceShadingRateImageFeaturesNV()
{
  VkPhysicalDeviceShadingRateImageFeaturesNV info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV;
  info.pNext = nullptr;
  return info;
}

inline VkPipelineViewportCoarseSampleOrderStateCreateInfoNV PipelineViewportCoarseSampleOrderStateCreateInfoNV()
{
  VkPipelineViewportCoarseSampleOrderStateCreateInfoNV info;
  info.sType = VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceMeshShaderFeaturesNV PhysicalDeviceMeshShaderFeaturesNV()
{
  VkPhysicalDeviceMeshShaderFeaturesNV info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV;
  info.pNext = nullptr;
  return info;
}

inline VkRayTracingShaderGroupCreateInfoNV RayTracingShaderGroupCreateInfoNV()
{
  VkRayTracingShaderGroupCreateInfoNV info;
  info.sType = VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV;
  info.pNext = nullptr;
  return info;
}

inline VkRayTracingShaderGroupCreateInfoKHR RayTracingShaderGroupCreateInfoKHR()
{
  VkRayTracingShaderGroupCreateInfoKHR info;
  info.sType = VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR;
  info.pNext = nullptr;
  return info;
}

inline VkRayTracingPipelineCreateInfoNV RayTracingPipelineCreateInfoNV()
{
  VkRayTracingPipelineCreateInfoNV info;
  info.sType = VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV;
  info.pNext = nullptr;
  return info;
}

inline VkRayTracingPipelineCreateInfoKHR RayTracingPipelineCreateInfoKHR()
{
  VkRayTracingPipelineCreateInfoKHR info;
  info.sType = VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR;
  info.pNext = nullptr;
  return info;
}

inline VkGeometryTrianglesNV GeometryTrianglesNV()
{
  VkGeometryTrianglesNV info;
  info.sType = VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV;
  info.pNext = nullptr;
  return info;
}

inline VkGeometryAABBNV GeometryAABBNV()
{
  VkGeometryAABBNV info;
  info.sType = VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV;
  info.pNext = nullptr;
  return info;
}

inline VkGeometryNV GeometryNV()
{
  VkGeometryNV info;
  info.sType = VK_STRUCTURE_TYPE_GEOMETRY_NV;
  info.pNext = nullptr;
  return info;
}

inline VkAccelerationStructureInfoNV AccelerationStructureInfoNV()
{
  VkAccelerationStructureInfoNV info;
  info.sType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV;
  info.pNext = nullptr;
  return info;
}

inline VkAccelerationStructureCreateInfoNV AccelerationStructureCreateInfoNV()
{
  VkAccelerationStructureCreateInfoNV info;
  info.sType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV;
  info.pNext = nullptr;
  return info;
}

inline VkBindAccelerationStructureMemoryInfoNV BindAccelerationStructureMemoryInfoNV()
{
  VkBindAccelerationStructureMemoryInfoNV info;
  info.sType = VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV;
  info.pNext = nullptr;
  return info;
}

inline VkWriteDescriptorSetAccelerationStructureKHR WriteDescriptorSetAccelerationStructureKHR()
{
  VkWriteDescriptorSetAccelerationStructureKHR info;
  info.sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR;
  info.pNext = nullptr;
  return info;
}

inline VkWriteDescriptorSetAccelerationStructureNV WriteDescriptorSetAccelerationStructureNV()
{
  VkWriteDescriptorSetAccelerationStructureNV info;
  info.sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV;
  info.pNext = nullptr;
  return info;
}

inline VkAccelerationStructureMemoryRequirementsInfoNV AccelerationStructureMemoryRequirementsInfoNV()
{
  VkAccelerationStructureMemoryRequirementsInfoNV info;
  info.sType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceAccelerationStructureFeaturesKHR PhysicalDeviceAccelerationStructureFeaturesKHR()
{
  VkPhysicalDeviceAccelerationStructureFeaturesKHR info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceRayTracingPipelineFeaturesKHR PhysicalDeviceRayTracingPipelineFeaturesKHR()
{
  VkPhysicalDeviceRayTracingPipelineFeaturesKHR info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceRayQueryFeaturesKHR PhysicalDeviceRayQueryFeaturesKHR()
{
  VkPhysicalDeviceRayQueryFeaturesKHR info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceImageDrmFormatModifierInfoEXT PhysicalDeviceImageDrmFormatModifierInfoEXT()
{
  VkPhysicalDeviceImageDrmFormatModifierInfoEXT info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkImageDrmFormatModifierListCreateInfoEXT ImageDrmFormatModifierListCreateInfoEXT()
{
  VkImageDrmFormatModifierListCreateInfoEXT info;
  info.sType = VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkImageDrmFormatModifierExplicitCreateInfoEXT ImageDrmFormatModifierExplicitCreateInfoEXT()
{
  VkImageDrmFormatModifierExplicitCreateInfoEXT info;
  info.sType = VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkImageStencilUsageCreateInfo ImageStencilUsageCreateInfo()
{
  VkImageStencilUsageCreateInfo info;
  info.sType = VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkDeviceMemoryOverallocationCreateInfoAMD DeviceMemoryOverallocationCreateInfoAMD()
{
  VkDeviceMemoryOverallocationCreateInfoAMD info;
  info.sType = VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceFragmentDensityMapFeaturesEXT PhysicalDeviceFragmentDensityMapFeaturesEXT()
{
  VkPhysicalDeviceFragmentDensityMapFeaturesEXT info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceFragmentDensityMap2FeaturesEXT PhysicalDeviceFragmentDensityMap2FeaturesEXT()
{
  VkPhysicalDeviceFragmentDensityMap2FeaturesEXT info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkRenderPassFragmentDensityMapCreateInfoEXT RenderPassFragmentDensityMapCreateInfoEXT()
{
  VkRenderPassFragmentDensityMapCreateInfoEXT info;
  info.sType = VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceScalarBlockLayoutFeatures PhysicalDeviceScalarBlockLayoutFeatures()
{
  VkPhysicalDeviceScalarBlockLayoutFeatures info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES;
  info.pNext = nullptr;
  return info;
}

inline VkSurfaceProtectedCapabilitiesKHR SurfaceProtectedCapabilitiesKHR()
{
  VkSurfaceProtectedCapabilitiesKHR info;
  info.sType = VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceUniformBufferStandardLayoutFeatures PhysicalDeviceUniformBufferStandardLayoutFeatures()
{
  VkPhysicalDeviceUniformBufferStandardLayoutFeatures info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceDepthClipEnableFeaturesEXT PhysicalDeviceDepthClipEnableFeaturesEXT()
{
  VkPhysicalDeviceDepthClipEnableFeaturesEXT info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkPipelineRasterizationDepthClipStateCreateInfoEXT PipelineRasterizationDepthClipStateCreateInfoEXT()
{
  VkPipelineRasterizationDepthClipStateCreateInfoEXT info;
  info.sType = VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceMemoryPriorityFeaturesEXT PhysicalDeviceMemoryPriorityFeaturesEXT()
{
  VkPhysicalDeviceMemoryPriorityFeaturesEXT info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkMemoryPriorityAllocateInfoEXT MemoryPriorityAllocateInfoEXT()
{
  VkMemoryPriorityAllocateInfoEXT info;
  info.sType = VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceBufferDeviceAddressFeatures PhysicalDeviceBufferDeviceAddressFeatures()
{
  VkPhysicalDeviceBufferDeviceAddressFeatures info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceBufferDeviceAddressFeaturesEXT PhysicalDeviceBufferDeviceAddressFeaturesEXT()
{
  VkPhysicalDeviceBufferDeviceAddressFeaturesEXT info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkBufferDeviceAddressInfo BufferDeviceAddressInfo()
{
  VkBufferDeviceAddressInfo info;
  info.sType = VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkBufferOpaqueCaptureAddressCreateInfo BufferOpaqueCaptureAddressCreateInfo()
{
  VkBufferOpaqueCaptureAddressCreateInfo info;
  info.sType = VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkBufferDeviceAddressCreateInfoEXT BufferDeviceAddressCreateInfoEXT()
{
  VkBufferDeviceAddressCreateInfoEXT info;
  info.sType = VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceImageViewImageFormatInfoEXT PhysicalDeviceImageViewImageFormatInfoEXT()
{
  VkPhysicalDeviceImageViewImageFormatInfoEXT info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceImagelessFramebufferFeatures PhysicalDeviceImagelessFramebufferFeatures()
{
  VkPhysicalDeviceImagelessFramebufferFeatures info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES;
  info.pNext = nullptr;
  return info;
}

inline VkFramebufferAttachmentsCreateInfo FramebufferAttachmentsCreateInfo()
{
  VkFramebufferAttachmentsCreateInfo info;
  info.sType = VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkFramebufferAttachmentImageInfo FramebufferAttachmentImageInfo()
{
  VkFramebufferAttachmentImageInfo info;
  info.sType = VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkRenderPassAttachmentBeginInfo RenderPassAttachmentBeginInfo()
{
  VkRenderPassAttachmentBeginInfo info;
  info.sType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT PhysicalDeviceTextureCompressionASTCHDRFeaturesEXT()
{
  VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceCooperativeMatrixFeaturesNV PhysicalDeviceCooperativeMatrixFeaturesNV()
{
  VkPhysicalDeviceCooperativeMatrixFeaturesNV info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV;
  info.pNext = nullptr;
  return info;
}

inline VkCooperativeMatrixPropertiesNV CooperativeMatrixPropertiesNV()
{
  VkCooperativeMatrixPropertiesNV info;
  info.sType = VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceYcbcrImageArraysFeaturesEXT PhysicalDeviceYcbcrImageArraysFeaturesEXT()
{
  VkPhysicalDeviceYcbcrImageArraysFeaturesEXT info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkImageViewHandleInfoNVX ImageViewHandleInfoNVX()
{
  VkImageViewHandleInfoNVX info;
  info.sType = VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX;
  info.pNext = nullptr;
  return info;
}

#ifdef  VK_USE_PLATFORM_GGP
inline VkPresentFrameTokenGGP PresentFrameTokenGGP()
{
  VkPresentFrameTokenGGP info;
  info.sType = VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP;
  info.pNext = nullptr;
  return info;
}
#endif

inline VkPipelineCreationFeedbackCreateInfoEXT PipelineCreationFeedbackCreateInfoEXT()
{
  VkPipelineCreationFeedbackCreateInfoEXT info;
  info.sType = VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT;
  info.pNext = nullptr;
  return info;
}

#ifdef  VK_USE_PLATFORM_WIN32_KHR
inline VkSurfaceFullScreenExclusiveInfoEXT SurfaceFullScreenExclusiveInfoEXT()
{
  VkSurfaceFullScreenExclusiveInfoEXT info;
  info.sType = VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT;
  info.pNext = nullptr;
  return info;
}
#endif

#ifdef  VK_USE_PLATFORM_WIN32_KHR
inline VkSurfaceFullScreenExclusiveWin32InfoEXT SurfaceFullScreenExclusiveWin32InfoEXT()
{
  VkSurfaceFullScreenExclusiveWin32InfoEXT info;
  info.sType = VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN_32_INFO_EXT;
  info.pNext = nullptr;
  return info;
}
#endif

#ifdef  VK_USE_PLATFORM_WIN32_KHR
inline VkSurfaceCapabilitiesFullScreenExclusiveEXT SurfaceCapabilitiesFullScreenExclusiveEXT()
{
  VkSurfaceCapabilitiesFullScreenExclusiveEXT info;
  info.sType = VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT;
  info.pNext = nullptr;
  return info;
}
#endif

inline VkPhysicalDevicePerformanceQueryFeaturesKHR PhysicalDevicePerformanceQueryFeaturesKHR()
{
  VkPhysicalDevicePerformanceQueryFeaturesKHR info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR;
  info.pNext = nullptr;
  return info;
}

inline VkQueryPoolPerformanceCreateInfoKHR QueryPoolPerformanceCreateInfoKHR()
{
  VkQueryPoolPerformanceCreateInfoKHR info;
  info.sType = VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR;
  info.pNext = nullptr;
  return info;
}

inline VkAcquireProfilingLockInfoKHR AcquireProfilingLockInfoKHR()
{
  VkAcquireProfilingLockInfoKHR info;
  info.sType = VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR;
  info.pNext = nullptr;
  return info;
}

inline VkPerformanceQuerySubmitInfoKHR PerformanceQuerySubmitInfoKHR()
{
  VkPerformanceQuerySubmitInfoKHR info;
  info.sType = VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR;
  info.pNext = nullptr;
  return info;
}

inline VkHeadlessSurfaceCreateInfoEXT HeadlessSurfaceCreateInfoEXT()
{
  VkHeadlessSurfaceCreateInfoEXT info;
  info.sType = VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceCoverageReductionModeFeaturesNV PhysicalDeviceCoverageReductionModeFeaturesNV()
{
  VkPhysicalDeviceCoverageReductionModeFeaturesNV info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV;
  info.pNext = nullptr;
  return info;
}

inline VkPipelineCoverageReductionStateCreateInfoNV PipelineCoverageReductionStateCreateInfoNV()
{
  VkPipelineCoverageReductionStateCreateInfoNV info;
  info.sType = VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL()
{
  VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL;
  info.pNext = nullptr;
  return info;
}

inline VkInitializePerformanceApiInfoINTEL InitializePerformanceApiInfoINTEL()
{
  VkInitializePerformanceApiInfoINTEL info;
  info.sType = VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL;
  info.pNext = nullptr;
  return info;
}

inline VkQueryPoolPerformanceQueryCreateInfoINTEL QueryPoolPerformanceQueryCreateInfoINTEL()
{
  VkQueryPoolPerformanceQueryCreateInfoINTEL info;
  info.sType = VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL;
  info.pNext = nullptr;
  return info;
}

inline VkPerformanceMarkerInfoINTEL PerformanceMarkerInfoINTEL()
{
  VkPerformanceMarkerInfoINTEL info;
  info.sType = VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL;
  info.pNext = nullptr;
  return info;
}

inline VkPerformanceStreamMarkerInfoINTEL PerformanceStreamMarkerInfoINTEL()
{
  VkPerformanceStreamMarkerInfoINTEL info;
  info.sType = VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL;
  info.pNext = nullptr;
  return info;
}

inline VkPerformanceOverrideInfoINTEL PerformanceOverrideInfoINTEL()
{
  VkPerformanceOverrideInfoINTEL info;
  info.sType = VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL;
  info.pNext = nullptr;
  return info;
}

inline VkPerformanceConfigurationAcquireInfoINTEL PerformanceConfigurationAcquireInfoINTEL()
{
  VkPerformanceConfigurationAcquireInfoINTEL info;
  info.sType = VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceShaderClockFeaturesKHR PhysicalDeviceShaderClockFeaturesKHR()
{
  VkPhysicalDeviceShaderClockFeaturesKHR info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceIndexTypeUint8FeaturesEXT PhysicalDeviceIndexTypeUint8FeaturesEXT()
{
  VkPhysicalDeviceIndexTypeUint8FeaturesEXT info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceShaderSMBuiltinsFeaturesNV PhysicalDeviceShaderSMBuiltinsFeaturesNV()
{
  VkPhysicalDeviceShaderSMBuiltinsFeaturesNV info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT PhysicalDeviceFragmentShaderInterlockFeaturesEXT()
{
  VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures PhysicalDeviceSeparateDepthStencilLayoutsFeatures()
{
  VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES;
  info.pNext = nullptr;
  return info;
}

inline VkAttachmentReferenceStencilLayout AttachmentReferenceStencilLayout()
{
  VkAttachmentReferenceStencilLayout info;
  info.sType = VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT;
  info.pNext = nullptr;
  return info;
}

inline VkAttachmentDescriptionStencilLayout AttachmentDescriptionStencilLayout()
{
  VkAttachmentDescriptionStencilLayout info;
  info.sType = VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR PhysicalDevicePipelineExecutablePropertiesFeaturesKHR()
{
  VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR;
  info.pNext = nullptr;
  return info;
}

inline VkPipelineInfoKHR PipelineInfoKHR()
{
  VkPipelineInfoKHR info;
  info.sType = VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR;
  info.pNext = nullptr;
  return info;
}

inline VkPipelineExecutableInfoKHR PipelineExecutableInfoKHR()
{
  VkPipelineExecutableInfoKHR info;
  info.sType = VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT PhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT()
{
  VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT PhysicalDeviceTexelBufferAlignmentFeaturesEXT()
{
  VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceSubgroupSizeControlFeaturesEXT PhysicalDeviceSubgroupSizeControlFeaturesEXT()
{
  VkPhysicalDeviceSubgroupSizeControlFeaturesEXT info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkMemoryOpaqueCaptureAddressAllocateInfo MemoryOpaqueCaptureAddressAllocateInfo()
{
  VkMemoryOpaqueCaptureAddressAllocateInfo info;
  info.sType = VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkDeviceMemoryOpaqueCaptureAddressInfo DeviceMemoryOpaqueCaptureAddressInfo()
{
  VkDeviceMemoryOpaqueCaptureAddressInfo info;
  info.sType = VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceLineRasterizationFeaturesEXT PhysicalDeviceLineRasterizationFeaturesEXT()
{
  VkPhysicalDeviceLineRasterizationFeaturesEXT info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkPipelineRasterizationLineStateCreateInfoEXT PipelineRasterizationLineStateCreateInfoEXT()
{
  VkPipelineRasterizationLineStateCreateInfoEXT info;
  info.sType = VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT PhysicalDevicePipelineCreationCacheControlFeaturesEXT()
{
  VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceVulkan11Features PhysicalDeviceVulkan11Features()
{
  VkPhysicalDeviceVulkan11Features info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceVulkan12Features PhysicalDeviceVulkan12Features()
{
  VkPhysicalDeviceVulkan12Features info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES;
  info.pNext = nullptr;
  return info;
}

inline VkPipelineCompilerControlCreateInfoAMD PipelineCompilerControlCreateInfoAMD()
{
  VkPipelineCompilerControlCreateInfoAMD info;
  info.sType = VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceCoherentMemoryFeaturesAMD PhysicalDeviceCoherentMemoryFeaturesAMD()
{
  VkPhysicalDeviceCoherentMemoryFeaturesAMD info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD;
  info.pNext = nullptr;
  return info;
}

inline VkSamplerCustomBorderColorCreateInfoEXT SamplerCustomBorderColorCreateInfoEXT()
{
  VkSamplerCustomBorderColorCreateInfoEXT info;
  info.sType = VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceCustomBorderColorFeaturesEXT PhysicalDeviceCustomBorderColorFeaturesEXT()
{
  VkPhysicalDeviceCustomBorderColorFeaturesEXT info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkAccelerationStructureGeometryTrianglesDataKHR AccelerationStructureGeometryTrianglesDataKHR()
{
  VkAccelerationStructureGeometryTrianglesDataKHR info;
  info.sType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR;
  info.pNext = nullptr;
  return info;
}

inline VkAccelerationStructureGeometryAabbsDataKHR AccelerationStructureGeometryAabbsDataKHR()
{
  VkAccelerationStructureGeometryAabbsDataKHR info;
  info.sType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR;
  info.pNext = nullptr;
  return info;
}

inline VkAccelerationStructureGeometryInstancesDataKHR AccelerationStructureGeometryInstancesDataKHR()
{
  VkAccelerationStructureGeometryInstancesDataKHR info;
  info.sType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR;
  info.pNext = nullptr;
  return info;
}

inline VkAccelerationStructureGeometryKHR AccelerationStructureGeometryKHR()
{
  VkAccelerationStructureGeometryKHR info;
  info.sType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR;
  info.pNext = nullptr;
  return info;
}

inline VkAccelerationStructureBuildGeometryInfoKHR AccelerationStructureBuildGeometryInfoKHR()
{
  VkAccelerationStructureBuildGeometryInfoKHR info;
  info.sType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR;
  info.pNext = nullptr;
  return info;
}

inline VkAccelerationStructureCreateInfoKHR AccelerationStructureCreateInfoKHR()
{
  VkAccelerationStructureCreateInfoKHR info;
  info.sType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR;
  info.pNext = nullptr;
  return info;
}

inline VkAccelerationStructureDeviceAddressInfoKHR AccelerationStructureDeviceAddressInfoKHR()
{
  VkAccelerationStructureDeviceAddressInfoKHR info;
  info.sType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR;
  info.pNext = nullptr;
  return info;
}

inline VkAccelerationStructureVersionInfoKHR AccelerationStructureVersionInfoKHR()
{
  VkAccelerationStructureVersionInfoKHR info;
  info.sType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR;
  info.pNext = nullptr;
  return info;
}

inline VkCopyAccelerationStructureInfoKHR CopyAccelerationStructureInfoKHR()
{
  VkCopyAccelerationStructureInfoKHR info;
  info.sType = VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR;
  info.pNext = nullptr;
  return info;
}

inline VkCopyAccelerationStructureToMemoryInfoKHR CopyAccelerationStructureToMemoryInfoKHR()
{
  VkCopyAccelerationStructureToMemoryInfoKHR info;
  info.sType = VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR;
  info.pNext = nullptr;
  return info;
}

inline VkCopyMemoryToAccelerationStructureInfoKHR CopyMemoryToAccelerationStructureInfoKHR()
{
  VkCopyMemoryToAccelerationStructureInfoKHR info;
  info.sType = VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR;
  info.pNext = nullptr;
  return info;
}

inline VkRayTracingPipelineInterfaceCreateInfoKHR RayTracingPipelineInterfaceCreateInfoKHR()
{
  VkRayTracingPipelineInterfaceCreateInfoKHR info;
  info.sType = VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR;
  info.pNext = nullptr;
  return info;
}

inline VkPipelineLibraryCreateInfoKHR PipelineLibraryCreateInfoKHR()
{
  VkPipelineLibraryCreateInfoKHR info;
  info.sType = VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceExtendedDynamicStateFeaturesEXT PhysicalDeviceExtendedDynamicStateFeaturesEXT()
{
  VkPhysicalDeviceExtendedDynamicStateFeaturesEXT info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceExtendedDynamicState2FeaturesEXT PhysicalDeviceExtendedDynamicState2FeaturesEXT()
{
  VkPhysicalDeviceExtendedDynamicState2FeaturesEXT info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkRenderPassTransformBeginInfoQCOM RenderPassTransformBeginInfoQCOM()
{
  VkRenderPassTransformBeginInfoQCOM info;
  info.sType = VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM;
  info.pNext = nullptr;
  return info;
}

inline VkCopyCommandTransformInfoQCOM CopyCommandTransformInfoQCOM()
{
  VkCopyCommandTransformInfoQCOM info;
  info.sType = VK_STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM;
  info.pNext = nullptr;
  return info;
}

inline VkCommandBufferInheritanceRenderPassTransformInfoQCOM CommandBufferInheritanceRenderPassTransformInfoQCOM()
{
  VkCommandBufferInheritanceRenderPassTransformInfoQCOM info;
  info.sType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceDiagnosticsConfigFeaturesNV PhysicalDeviceDiagnosticsConfigFeaturesNV()
{
  VkPhysicalDeviceDiagnosticsConfigFeaturesNV info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV;
  info.pNext = nullptr;
  return info;
}

inline VkDeviceDiagnosticsConfigCreateInfoNV DeviceDiagnosticsConfigCreateInfoNV()
{
  VkDeviceDiagnosticsConfigCreateInfoNV info;
  info.sType = VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR PhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR()
{
  VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES_KHR;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceRobustness2FeaturesEXT PhysicalDeviceRobustness2FeaturesEXT()
{
  VkPhysicalDeviceRobustness2FeaturesEXT info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceImageRobustnessFeaturesEXT PhysicalDeviceImageRobustnessFeaturesEXT()
{
  VkPhysicalDeviceImageRobustnessFeaturesEXT info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR()
{
  VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR;
  info.pNext = nullptr;
  return info;
}

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkPhysicalDevicePortabilitySubsetFeaturesKHR PhysicalDevicePortabilitySubsetFeaturesKHR()
{
  VkPhysicalDevicePortabilitySubsetFeaturesKHR info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_FEATURES_KHR;
  info.pNext = nullptr;
  return info;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkPhysicalDevicePortabilitySubsetPropertiesKHR PhysicalDevicePortabilitySubsetPropertiesKHR()
{
  VkPhysicalDevicePortabilitySubsetPropertiesKHR info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_PROPERTIES_KHR;
  info.pNext = nullptr;
  return info;
}
#endif

inline VkPhysicalDevice4444FormatsFeaturesEXT PhysicalDevice4444FormatsFeaturesEXT()
{
  VkPhysicalDevice4444FormatsFeaturesEXT info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkBufferCopy2KHR BufferCopy2KHR()
{
  VkBufferCopy2KHR info;
  info.sType = VK_STRUCTURE_TYPE_BUFFER_COPY_2_KHR;
  info.pNext = nullptr;
  return info;
}

inline VkImageCopy2KHR ImageCopy2KHR()
{
  VkImageCopy2KHR info;
  info.sType = VK_STRUCTURE_TYPE_IMAGE_COPY_2_KHR;
  info.pNext = nullptr;
  return info;
}

inline VkImageBlit2KHR ImageBlit2KHR()
{
  VkImageBlit2KHR info;
  info.sType = VK_STRUCTURE_TYPE_IMAGE_BLIT_2_KHR;
  info.pNext = nullptr;
  return info;
}

inline VkBufferImageCopy2KHR BufferImageCopy2KHR()
{
  VkBufferImageCopy2KHR info;
  info.sType = VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR;
  info.pNext = nullptr;
  return info;
}

inline VkImageResolve2KHR ImageResolve2KHR()
{
  VkImageResolve2KHR info;
  info.sType = VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR;
  info.pNext = nullptr;
  return info;
}

inline VkCopyBufferInfo2KHR CopyBufferInfo2KHR()
{
  VkCopyBufferInfo2KHR info;
  info.sType = VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR;
  info.pNext = nullptr;
  return info;
}

inline VkCopyImageInfo2KHR CopyImageInfo2KHR()
{
  VkCopyImageInfo2KHR info;
  info.sType = VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR;
  info.pNext = nullptr;
  return info;
}

inline VkBlitImageInfo2KHR BlitImageInfo2KHR()
{
  VkBlitImageInfo2KHR info;
  info.sType = VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR;
  info.pNext = nullptr;
  return info;
}

inline VkCopyBufferToImageInfo2KHR CopyBufferToImageInfo2KHR()
{
  VkCopyBufferToImageInfo2KHR info;
  info.sType = VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR;
  info.pNext = nullptr;
  return info;
}

inline VkCopyImageToBufferInfo2KHR CopyImageToBufferInfo2KHR()
{
  VkCopyImageToBufferInfo2KHR info;
  info.sType = VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR;
  info.pNext = nullptr;
  return info;
}

inline VkResolveImageInfo2KHR ResolveImageInfo2KHR()
{
  VkResolveImageInfo2KHR info;
  info.sType = VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT PhysicalDeviceShaderImageAtomicInt64FeaturesEXT()
{
  VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkFragmentShadingRateAttachmentInfoKHR FragmentShadingRateAttachmentInfoKHR()
{
  VkFragmentShadingRateAttachmentInfoKHR info;
  info.sType = VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR;
  info.pNext = nullptr;
  return info;
}

inline VkPipelineFragmentShadingRateStateCreateInfoKHR PipelineFragmentShadingRateStateCreateInfoKHR()
{
  VkPipelineFragmentShadingRateStateCreateInfoKHR info;
  info.sType = VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceFragmentShadingRateFeaturesKHR PhysicalDeviceFragmentShadingRateFeaturesKHR()
{
  VkPhysicalDeviceFragmentShadingRateFeaturesKHR info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR PhysicalDeviceShaderTerminateInvocationFeaturesKHR()
{
  VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV PhysicalDeviceFragmentShadingRateEnumsFeaturesNV()
{
  VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV PhysicalDeviceFragmentShadingRateEnumsPropertiesNV()
{
  VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV;
  info.pNext = nullptr;
  return info;
}

inline VkPipelineFragmentShadingRateEnumStateCreateInfoNV PipelineFragmentShadingRateEnumStateCreateInfoNV()
{
  VkPipelineFragmentShadingRateEnumStateCreateInfoNV info;
  info.sType = VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV;
  info.pNext = nullptr;
  return info;
}

inline VkAccelerationStructureBuildSizesInfoKHR AccelerationStructureBuildSizesInfoKHR()
{
  VkAccelerationStructureBuildSizesInfoKHR info;
  info.sType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE PhysicalDeviceMutableDescriptorTypeFeaturesVALVE()
{
  VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_VALVE;
  info.pNext = nullptr;
  return info;
}

inline VkMutableDescriptorTypeCreateInfoVALVE MutableDescriptorTypeCreateInfoVALVE()
{
  VkMutableDescriptorTypeCreateInfoVALVE info;
  info.sType = VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_VALVE;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT PhysicalDeviceVertexInputDynamicStateFeaturesEXT()
{
  VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkVertexInputBindingDescription2EXT VertexInputBindingDescription2EXT()
{
  VkVertexInputBindingDescription2EXT info;
  info.sType = VK_STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkVertexInputAttributeDescription2EXT VertexInputAttributeDescription2EXT()
{
  VkVertexInputAttributeDescription2EXT info;
  info.sType = VK_STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceColorWriteEnableFeaturesEXT PhysicalDeviceColorWriteEnableFeaturesEXT()
{
  VkPhysicalDeviceColorWriteEnableFeaturesEXT info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkPipelineColorWriteCreateInfoEXT PipelineColorWriteCreateInfoEXT()
{
  VkPipelineColorWriteCreateInfoEXT info;
  info.sType = VK_STRUCTURE_TYPE_PIPELINE_COLOR_WRITE_CREATE_INFO_EXT;
  info.pNext = nullptr;
  return info;
}

inline VkMemoryBarrier2KHR MemoryBarrier2KHR()
{
  VkMemoryBarrier2KHR info;
  info.sType = VK_STRUCTURE_TYPE_MEMORY_BARRIER_2_KHR;
  info.pNext = nullptr;
  return info;
}

inline VkImageMemoryBarrier2KHR ImageMemoryBarrier2KHR()
{
  VkImageMemoryBarrier2KHR info;
  info.sType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2_KHR;
  info.pNext = nullptr;
  return info;
}

inline VkBufferMemoryBarrier2KHR BufferMemoryBarrier2KHR()
{
  VkBufferMemoryBarrier2KHR info;
  info.sType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2_KHR;
  info.pNext = nullptr;
  return info;
}

inline VkDependencyInfoKHR DependencyInfoKHR()
{
  VkDependencyInfoKHR info;
  info.sType = VK_STRUCTURE_TYPE_DEPENDENCY_INFO_KHR;
  info.pNext = nullptr;
  return info;
}

inline VkSemaphoreSubmitInfoKHR SemaphoreSubmitInfoKHR()
{
  VkSemaphoreSubmitInfoKHR info;
  info.sType = VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO_KHR;
  info.pNext = nullptr;
  return info;
}

inline VkCommandBufferSubmitInfoKHR CommandBufferSubmitInfoKHR()
{
  VkCommandBufferSubmitInfoKHR info;
  info.sType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO_KHR;
  info.pNext = nullptr;
  return info;
}

inline VkSubmitInfo2KHR SubmitInfo2KHR()
{
  VkSubmitInfo2KHR info;
  info.sType = VK_STRUCTURE_TYPE_SUBMIT_INFO_2_KHR;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceSynchronization2FeaturesKHR PhysicalDeviceSynchronization2FeaturesKHR()
{
  VkPhysicalDeviceSynchronization2FeaturesKHR info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES_KHR;
  info.pNext = nullptr;
  return info;
}

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoQueueFamilyProperties2KHR VideoQueueFamilyProperties2KHR()
{
  VkVideoQueueFamilyProperties2KHR info;
  info.sType = VK_STRUCTURE_TYPE_VIDEO_QUEUE_FAMILY_PROPERTIES_2_KHR;
  info.pNext = nullptr;
  return info;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoProfilesKHR VideoProfilesKHR()
{
  VkVideoProfilesKHR info;
  info.sType = VK_STRUCTURE_TYPE_VIDEO_PROFILES_KHR;
  info.pNext = nullptr;
  return info;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoProfileKHR VideoProfileKHR()
{
  VkVideoProfileKHR info;
  info.sType = VK_STRUCTURE_TYPE_VIDEO_PROFILE_KHR;
  info.pNext = nullptr;
  return info;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoGetMemoryPropertiesKHR VideoGetMemoryPropertiesKHR()
{
  VkVideoGetMemoryPropertiesKHR info;
  info.sType = VK_STRUCTURE_TYPE_VIDEO_GET_MEMORY_PROPERTIES_KHR;
  info.pNext = nullptr;
  return info;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoBindMemoryKHR VideoBindMemoryKHR()
{
  VkVideoBindMemoryKHR info;
  info.sType = VK_STRUCTURE_TYPE_VIDEO_BIND_MEMORY_KHR;
  info.pNext = nullptr;
  return info;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoPictureResourceKHR VideoPictureResourceKHR()
{
  VkVideoPictureResourceKHR info;
  info.sType = VK_STRUCTURE_TYPE_VIDEO_PICTURE_RESOURCE_KHR;
  info.pNext = nullptr;
  return info;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoReferenceSlotKHR VideoReferenceSlotKHR()
{
  VkVideoReferenceSlotKHR info;
  info.sType = VK_STRUCTURE_TYPE_VIDEO_REFERENCE_SLOT_KHR;
  info.pNext = nullptr;
  return info;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoDecodeInfoKHR VideoDecodeInfoKHR()
{
  VkVideoDecodeInfoKHR info;
  info.sType = VK_STRUCTURE_TYPE_VIDEO_DECODE_INFO_KHR;
  info.pNext = nullptr;
  return info;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoDecodeH264ProfileEXT VideoDecodeH264ProfileEXT()
{
  VkVideoDecodeH264ProfileEXT info;
  info.sType = VK_STRUCTURE_TYPE_VIDEO_DECODE_264_PROFILE_EXT;
  info.pNext = nullptr;
  return info;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoDecodeH264SessionCreateInfoEXT VideoDecodeH264SessionCreateInfoEXT()
{
  VkVideoDecodeH264SessionCreateInfoEXT info;
  info.sType = VK_STRUCTURE_TYPE_VIDEO_DECODE_264_SESSION_CREATE_INFO_EXT;
  info.pNext = nullptr;
  return info;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoDecodeH264SessionParametersAddInfoEXT VideoDecodeH264SessionParametersAddInfoEXT()
{
  VkVideoDecodeH264SessionParametersAddInfoEXT info;
  info.sType = VK_STRUCTURE_TYPE_VIDEO_DECODE_264_SESSION_PARAMETERS_ADD_INFO_EXT;
  info.pNext = nullptr;
  return info;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoDecodeH264SessionParametersCreateInfoEXT VideoDecodeH264SessionParametersCreateInfoEXT()
{
  VkVideoDecodeH264SessionParametersCreateInfoEXT info;
  info.sType = VK_STRUCTURE_TYPE_VIDEO_DECODE_264_SESSION_PARAMETERS_CREATE_INFO_EXT;
  info.pNext = nullptr;
  return info;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoDecodeH264PictureInfoEXT VideoDecodeH264PictureInfoEXT()
{
  VkVideoDecodeH264PictureInfoEXT info;
  info.sType = VK_STRUCTURE_TYPE_VIDEO_DECODE_264_PICTURE_INFO_EXT;
  info.pNext = nullptr;
  return info;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoDecodeH264DpbSlotInfoEXT VideoDecodeH264DpbSlotInfoEXT()
{
  VkVideoDecodeH264DpbSlotInfoEXT info;
  info.sType = VK_STRUCTURE_TYPE_VIDEO_DECODE_264_DPB_SLOT_INFO_EXT;
  info.pNext = nullptr;
  return info;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoDecodeH264MvcEXT VideoDecodeH264MvcEXT()
{
  VkVideoDecodeH264MvcEXT info;
  info.sType = VK_STRUCTURE_TYPE_VIDEO_DECODE_264_MVC_EXT;
  info.pNext = nullptr;
  return info;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoDecodeH265ProfileEXT VideoDecodeH265ProfileEXT()
{
  VkVideoDecodeH265ProfileEXT info;
  info.sType = VK_STRUCTURE_TYPE_VIDEO_DECODE_265_PROFILE_EXT;
  info.pNext = nullptr;
  return info;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoDecodeH265SessionCreateInfoEXT VideoDecodeH265SessionCreateInfoEXT()
{
  VkVideoDecodeH265SessionCreateInfoEXT info;
  info.sType = VK_STRUCTURE_TYPE_VIDEO_DECODE_265_SESSION_CREATE_INFO_EXT;
  info.pNext = nullptr;
  return info;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoDecodeH265SessionParametersAddInfoEXT VideoDecodeH265SessionParametersAddInfoEXT()
{
  VkVideoDecodeH265SessionParametersAddInfoEXT info;
  info.sType = VK_STRUCTURE_TYPE_VIDEO_DECODE_265_SESSION_PARAMETERS_ADD_INFO_EXT;
  info.pNext = nullptr;
  return info;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoDecodeH265SessionParametersCreateInfoEXT VideoDecodeH265SessionParametersCreateInfoEXT()
{
  VkVideoDecodeH265SessionParametersCreateInfoEXT info;
  info.sType = VK_STRUCTURE_TYPE_VIDEO_DECODE_265_SESSION_PARAMETERS_CREATE_INFO_EXT;
  info.pNext = nullptr;
  return info;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoDecodeH265PictureInfoEXT VideoDecodeH265PictureInfoEXT()
{
  VkVideoDecodeH265PictureInfoEXT info;
  info.sType = VK_STRUCTURE_TYPE_VIDEO_DECODE_265_PICTURE_INFO_EXT;
  info.pNext = nullptr;
  return info;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoDecodeH265DpbSlotInfoEXT VideoDecodeH265DpbSlotInfoEXT()
{
  VkVideoDecodeH265DpbSlotInfoEXT info;
  info.sType = VK_STRUCTURE_TYPE_VIDEO_DECODE_265_DPB_SLOT_INFO_EXT;
  info.pNext = nullptr;
  return info;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoSessionCreateInfoKHR VideoSessionCreateInfoKHR()
{
  VkVideoSessionCreateInfoKHR info;
  info.sType = VK_STRUCTURE_TYPE_VIDEO_SESSION_CREATE_INFO_KHR;
  info.pNext = nullptr;
  return info;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoSessionParametersCreateInfoKHR VideoSessionParametersCreateInfoKHR()
{
  VkVideoSessionParametersCreateInfoKHR info;
  info.sType = VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_CREATE_INFO_KHR;
  info.pNext = nullptr;
  return info;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoSessionParametersUpdateInfoKHR VideoSessionParametersUpdateInfoKHR()
{
  VkVideoSessionParametersUpdateInfoKHR info;
  info.sType = VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_UPDATE_INFO_KHR;
  info.pNext = nullptr;
  return info;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoBeginCodingInfoKHR VideoBeginCodingInfoKHR()
{
  VkVideoBeginCodingInfoKHR info;
  info.sType = VK_STRUCTURE_TYPE_VIDEO_BEGIN_CODING_INFO_KHR;
  info.pNext = nullptr;
  return info;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoEndCodingInfoKHR VideoEndCodingInfoKHR()
{
  VkVideoEndCodingInfoKHR info;
  info.sType = VK_STRUCTURE_TYPE_VIDEO_END_CODING_INFO_KHR;
  info.pNext = nullptr;
  return info;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoCodingControlInfoKHR VideoCodingControlInfoKHR()
{
  VkVideoCodingControlInfoKHR info;
  info.sType = VK_STRUCTURE_TYPE_VIDEO_CODING_CONTROL_INFO_KHR;
  info.pNext = nullptr;
  return info;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoEncodeInfoKHR VideoEncodeInfoKHR()
{
  VkVideoEncodeInfoKHR info;
  info.sType = VK_STRUCTURE_TYPE_VIDEO_ENCODE_INFO_KHR;
  info.pNext = nullptr;
  return info;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoEncodeRateControlInfoKHR VideoEncodeRateControlInfoKHR()
{
  VkVideoEncodeRateControlInfoKHR info;
  info.sType = VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_INFO_KHR;
  info.pNext = nullptr;
  return info;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoEncodeH264CapabilitiesEXT VideoEncodeH264CapabilitiesEXT()
{
  VkVideoEncodeH264CapabilitiesEXT info;
  info.sType = VK_STRUCTURE_TYPE_VIDEO_ENCODE_264_CAPABILITIES_EXT;
  info.pNext = nullptr;
  return info;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoEncodeH264SessionCreateInfoEXT VideoEncodeH264SessionCreateInfoEXT()
{
  VkVideoEncodeH264SessionCreateInfoEXT info;
  info.sType = VK_STRUCTURE_TYPE_VIDEO_ENCODE_264_SESSION_CREATE_INFO_EXT;
  info.pNext = nullptr;
  return info;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoEncodeH264SessionParametersAddInfoEXT VideoEncodeH264SessionParametersAddInfoEXT()
{
  VkVideoEncodeH264SessionParametersAddInfoEXT info;
  info.sType = VK_STRUCTURE_TYPE_VIDEO_ENCODE_264_SESSION_PARAMETERS_ADD_INFO_EXT;
  info.pNext = nullptr;
  return info;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoEncodeH264SessionParametersCreateInfoEXT VideoEncodeH264SessionParametersCreateInfoEXT()
{
  VkVideoEncodeH264SessionParametersCreateInfoEXT info;
  info.sType = VK_STRUCTURE_TYPE_VIDEO_ENCODE_264_SESSION_PARAMETERS_CREATE_INFO_EXT;
  info.pNext = nullptr;
  return info;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoEncodeH264DpbSlotInfoEXT VideoEncodeH264DpbSlotInfoEXT()
{
  VkVideoEncodeH264DpbSlotInfoEXT info;
  info.sType = VK_STRUCTURE_TYPE_VIDEO_ENCODE_264_DPB_SLOT_INFO_EXT;
  info.pNext = nullptr;
  return info;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoEncodeH264VclFrameInfoEXT VideoEncodeH264VclFrameInfoEXT()
{
  VkVideoEncodeH264VclFrameInfoEXT info;
  info.sType = VK_STRUCTURE_TYPE_VIDEO_ENCODE_264_VCL_FRAME_INFO_EXT;
  info.pNext = nullptr;
  return info;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoEncodeH264EmitPictureParametersEXT VideoEncodeH264EmitPictureParametersEXT()
{
  VkVideoEncodeH264EmitPictureParametersEXT info;
  info.sType = VK_STRUCTURE_TYPE_VIDEO_ENCODE_264_EMIT_PICTURE_PARAMETERS_EXT;
  info.pNext = nullptr;
  return info;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoEncodeH264ProfileEXT VideoEncodeH264ProfileEXT()
{
  VkVideoEncodeH264ProfileEXT info;
  info.sType = VK_STRUCTURE_TYPE_VIDEO_ENCODE_264_PROFILE_EXT;
  info.pNext = nullptr;
  return info;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoEncodeH264NaluSliceEXT VideoEncodeH264NaluSliceEXT()
{
  VkVideoEncodeH264NaluSliceEXT info;
  info.sType = VK_STRUCTURE_TYPE_VIDEO_ENCODE_264_NALU_SLICE_EXT;
  info.pNext = nullptr;
  return info;
}
#endif

inline VkPhysicalDeviceInheritedViewportScissorFeaturesNV PhysicalDeviceInheritedViewportScissorFeaturesNV()
{
  VkPhysicalDeviceInheritedViewportScissorFeaturesNV info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV;
  info.pNext = nullptr;
  return info;
}

inline VkCommandBufferInheritanceViewportScissorInfoNV CommandBufferInheritanceViewportScissorInfoNV()
{
  VkCommandBufferInheritanceViewportScissorInfoNV info;
  info.sType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV;
  info.pNext = nullptr;
  return info;
}

inline VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT PhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT()
{
  VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT info;
  info.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT;
  info.pNext = nullptr;
  return info;
}

///@}

/**
 * @name VulkanTaggedStructParamsInit For each Vulkan API struct tagged with a
 * type enum and possessing an extension pointer, a function to initialize the
 * members of the struct without having to set the first two fields.
 *
 * The use of these functions saves some code and makes sure the type
 * and the extension field of each struct are set correctly and reliably.
 * It also ensures no member is forgotten by the user.
 * 
 * Usage without these helpers:
 *
 *     VkImageCreateInfo info;
 *     info.sType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO;
 *     info.pNext = nullptr;
 *     info.flags = 0;
 *     info.imageType = VK_IMAGE_TYPE_2D;
 *     // ...
 *
 * Usage with these helpers:
 *
 *     auto info = kr::ImageCreateInfo(
 *       0,
 *       VK_IMAGE_TYPE_2D;
 *       // ...
 *     );
 *
 * See `krust-examples/clear2/clear2.cpp` for more usage examples. 
 */
 ///@{

inline VkApplicationInfo ApplicationInfo(
  const char* pApplicationName,
  uint32_t applicationVersion,
  const char* pEngineName,
  uint32_t engineVersion,
  uint32_t apiVersion
)
{
  VkApplicationInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_APPLICATION_INFO;
  temp.pNext = nullptr;
  temp.pApplicationName = pApplicationName;
  temp.applicationVersion = applicationVersion;
  temp.pEngineName = pEngineName;
  temp.engineVersion = engineVersion;
  temp.apiVersion = apiVersion;

  return temp;
}

inline VkDeviceQueueCreateInfo DeviceQueueCreateInfo(
  VkDeviceQueueCreateFlags flags,
  uint32_t queueFamilyIndex,
  uint32_t queueCount,
  const float* pQueuePriorities
)
{
  VkDeviceQueueCreateInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.queueFamilyIndex = queueFamilyIndex;
  temp.queueCount = queueCount;
  temp.pQueuePriorities = pQueuePriorities;

  return temp;
}

inline VkDeviceCreateInfo DeviceCreateInfo(
  VkDeviceCreateFlags flags,
  uint32_t queueCreateInfoCount,
  const VkDeviceQueueCreateInfo* pQueueCreateInfos,
  uint32_t enabledLayerCount,
  const char* const* ppEnabledLayerNames,
  uint32_t enabledExtensionCount,
  const char* const* ppEnabledExtensionNames,
  const VkPhysicalDeviceFeatures* pEnabledFeatures
)
{
  VkDeviceCreateInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.queueCreateInfoCount = queueCreateInfoCount;
  temp.pQueueCreateInfos = pQueueCreateInfos;
  temp.enabledLayerCount = enabledLayerCount;
  temp.ppEnabledLayerNames = ppEnabledLayerNames;
  temp.enabledExtensionCount = enabledExtensionCount;
  temp.ppEnabledExtensionNames = ppEnabledExtensionNames;
  temp.pEnabledFeatures = pEnabledFeatures;

  return temp;
}

inline VkInstanceCreateInfo InstanceCreateInfo(
  VkInstanceCreateFlags flags,
  const VkApplicationInfo* pApplicationInfo,
  uint32_t enabledLayerCount,
  const char* const* ppEnabledLayerNames,
  uint32_t enabledExtensionCount,
  const char* const* ppEnabledExtensionNames
)
{
  VkInstanceCreateInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.pApplicationInfo = pApplicationInfo;
  temp.enabledLayerCount = enabledLayerCount;
  temp.ppEnabledLayerNames = ppEnabledLayerNames;
  temp.enabledExtensionCount = enabledExtensionCount;
  temp.ppEnabledExtensionNames = ppEnabledExtensionNames;

  return temp;
}

inline VkMemoryAllocateInfo MemoryAllocateInfo(
  VkDeviceSize allocationSize,
  uint32_t memoryTypeIndex
)
{
  VkMemoryAllocateInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO;
  temp.pNext = nullptr;
  temp.allocationSize = allocationSize;
  temp.memoryTypeIndex = memoryTypeIndex;

  return temp;
}

inline VkMappedMemoryRange MappedMemoryRange(
  VkDeviceMemory memory,
  VkDeviceSize offset,
  VkDeviceSize size
)
{
  VkMappedMemoryRange temp;
  temp.sType = VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE;
  temp.pNext = nullptr;
  temp.memory = memory;
  temp.offset = offset;
  temp.size = size;

  return temp;
}

inline VkWriteDescriptorSet WriteDescriptorSet(
  VkDescriptorSet dstSet,
  uint32_t dstBinding,
  uint32_t dstArrayElement,
  uint32_t descriptorCount,
  VkDescriptorType descriptorType,
  const VkDescriptorImageInfo* pImageInfo,
  const VkDescriptorBufferInfo* pBufferInfo,
  const VkBufferView* pTexelBufferView
)
{
  VkWriteDescriptorSet temp;
  temp.sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET;
  temp.pNext = nullptr;
  temp.dstSet = dstSet;
  temp.dstBinding = dstBinding;
  temp.dstArrayElement = dstArrayElement;
  temp.descriptorCount = descriptorCount;
  temp.descriptorType = descriptorType;
  temp.pImageInfo = pImageInfo;
  temp.pBufferInfo = pBufferInfo;
  temp.pTexelBufferView = pTexelBufferView;

  return temp;
}

inline VkCopyDescriptorSet CopyDescriptorSet(
  VkDescriptorSet srcSet,
  uint32_t srcBinding,
  uint32_t srcArrayElement,
  VkDescriptorSet dstSet,
  uint32_t dstBinding,
  uint32_t dstArrayElement,
  uint32_t descriptorCount
)
{
  VkCopyDescriptorSet temp;
  temp.sType = VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET;
  temp.pNext = nullptr;
  temp.srcSet = srcSet;
  temp.srcBinding = srcBinding;
  temp.srcArrayElement = srcArrayElement;
  temp.dstSet = dstSet;
  temp.dstBinding = dstBinding;
  temp.dstArrayElement = dstArrayElement;
  temp.descriptorCount = descriptorCount;

  return temp;
}

inline VkBufferCreateInfo BufferCreateInfo(
  VkBufferCreateFlags flags,
  VkDeviceSize size,
  VkBufferUsageFlags usage,
  VkSharingMode sharingMode,
  uint32_t queueFamilyIndexCount,
  const uint32_t* pQueueFamilyIndices
)
{
  VkBufferCreateInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.size = size;
  temp.usage = usage;
  temp.sharingMode = sharingMode;
  temp.queueFamilyIndexCount = queueFamilyIndexCount;
  temp.pQueueFamilyIndices = pQueueFamilyIndices;

  return temp;
}

inline VkBufferViewCreateInfo BufferViewCreateInfo(
  VkBufferViewCreateFlags flags,
  VkBuffer buffer,
  VkFormat format,
  VkDeviceSize offset,
  VkDeviceSize range
)
{
  VkBufferViewCreateInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.buffer = buffer;
  temp.format = format;
  temp.offset = offset;
  temp.range = range;

  return temp;
}

inline VkMemoryBarrier MemoryBarrier(
  VkAccessFlags srcAccessMask,
  VkAccessFlags dstAccessMask
)
{
  VkMemoryBarrier temp;
  temp.sType = VK_STRUCTURE_TYPE_MEMORY_BARRIER;
  temp.pNext = nullptr;
  temp.srcAccessMask = srcAccessMask;
  temp.dstAccessMask = dstAccessMask;

  return temp;
}

inline VkBufferMemoryBarrier BufferMemoryBarrier(
  VkAccessFlags srcAccessMask,
  VkAccessFlags dstAccessMask,
  uint32_t srcQueueFamilyIndex,
  uint32_t dstQueueFamilyIndex,
  VkBuffer buffer,
  VkDeviceSize offset,
  VkDeviceSize size
)
{
  VkBufferMemoryBarrier temp;
  temp.sType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER;
  temp.pNext = nullptr;
  temp.srcAccessMask = srcAccessMask;
  temp.dstAccessMask = dstAccessMask;
  temp.srcQueueFamilyIndex = srcQueueFamilyIndex;
  temp.dstQueueFamilyIndex = dstQueueFamilyIndex;
  temp.buffer = buffer;
  temp.offset = offset;
  temp.size = size;

  return temp;
}

inline VkImageMemoryBarrier ImageMemoryBarrier(
  VkAccessFlags srcAccessMask,
  VkAccessFlags dstAccessMask,
  VkImageLayout oldLayout,
  VkImageLayout newLayout,
  uint32_t srcQueueFamilyIndex,
  uint32_t dstQueueFamilyIndex,
  VkImage image,
  VkImageSubresourceRange subresourceRange
)
{
  VkImageMemoryBarrier temp;
  temp.sType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER;
  temp.pNext = nullptr;
  temp.srcAccessMask = srcAccessMask;
  temp.dstAccessMask = dstAccessMask;
  temp.oldLayout = oldLayout;
  temp.newLayout = newLayout;
  temp.srcQueueFamilyIndex = srcQueueFamilyIndex;
  temp.dstQueueFamilyIndex = dstQueueFamilyIndex;
  temp.image = image;
  temp.subresourceRange = subresourceRange;

  return temp;
}

inline VkImageCreateInfo ImageCreateInfo(
  VkImageCreateFlags flags,
  VkImageType imageType,
  VkFormat format,
  VkExtent3D extent,
  uint32_t mipLevels,
  uint32_t arrayLayers,
  VkSampleCountFlagBits samples,
  VkImageTiling tiling,
  VkImageUsageFlags usage,
  VkSharingMode sharingMode,
  uint32_t queueFamilyIndexCount,
  const uint32_t* pQueueFamilyIndices,
  VkImageLayout initialLayout
)
{
  VkImageCreateInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.imageType = imageType;
  temp.format = format;
  temp.extent = extent;
  temp.mipLevels = mipLevels;
  temp.arrayLayers = arrayLayers;
  temp.samples = samples;
  temp.tiling = tiling;
  temp.usage = usage;
  temp.sharingMode = sharingMode;
  temp.queueFamilyIndexCount = queueFamilyIndexCount;
  temp.pQueueFamilyIndices = pQueueFamilyIndices;
  temp.initialLayout = initialLayout;

  return temp;
}

inline VkImageViewCreateInfo ImageViewCreateInfo(
  VkImageViewCreateFlags flags,
  VkImage image,
  VkImageViewType viewType,
  VkFormat format,
  VkComponentMapping components,
  VkImageSubresourceRange subresourceRange
)
{
  VkImageViewCreateInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.image = image;
  temp.viewType = viewType;
  temp.format = format;
  temp.components = components;
  temp.subresourceRange = subresourceRange;

  return temp;
}

inline VkBindSparseInfo BindSparseInfo(
  uint32_t waitSemaphoreCount,
  const VkSemaphore* pWaitSemaphores,
  uint32_t bufferBindCount,
  const VkSparseBufferMemoryBindInfo* pBufferBinds,
  uint32_t imageOpaqueBindCount,
  const VkSparseImageOpaqueMemoryBindInfo* pImageOpaqueBinds,
  uint32_t imageBindCount,
  const VkSparseImageMemoryBindInfo* pImageBinds,
  uint32_t signalSemaphoreCount,
  const VkSemaphore* pSignalSemaphores
)
{
  VkBindSparseInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_BIND_SPARSE_INFO;
  temp.pNext = nullptr;
  temp.waitSemaphoreCount = waitSemaphoreCount;
  temp.pWaitSemaphores = pWaitSemaphores;
  temp.bufferBindCount = bufferBindCount;
  temp.pBufferBinds = pBufferBinds;
  temp.imageOpaqueBindCount = imageOpaqueBindCount;
  temp.pImageOpaqueBinds = pImageOpaqueBinds;
  temp.imageBindCount = imageBindCount;
  temp.pImageBinds = pImageBinds;
  temp.signalSemaphoreCount = signalSemaphoreCount;
  temp.pSignalSemaphores = pSignalSemaphores;

  return temp;
}

inline VkShaderModuleCreateInfo ShaderModuleCreateInfo(
  VkShaderModuleCreateFlags flags,
  size_t codeSize,
  const uint32_t* pCode
)
{
  VkShaderModuleCreateInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.codeSize = codeSize;
  temp.pCode = pCode;

  return temp;
}

inline VkDescriptorSetLayoutCreateInfo DescriptorSetLayoutCreateInfo(
  VkDescriptorSetLayoutCreateFlags flags,
  uint32_t bindingCount,
  const VkDescriptorSetLayoutBinding* pBindings
)
{
  VkDescriptorSetLayoutCreateInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.bindingCount = bindingCount;
  temp.pBindings = pBindings;

  return temp;
}

inline VkDescriptorPoolCreateInfo DescriptorPoolCreateInfo(
  VkDescriptorPoolCreateFlags flags,
  uint32_t maxSets,
  uint32_t poolSizeCount,
  const VkDescriptorPoolSize* pPoolSizes
)
{
  VkDescriptorPoolCreateInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.maxSets = maxSets;
  temp.poolSizeCount = poolSizeCount;
  temp.pPoolSizes = pPoolSizes;

  return temp;
}

inline VkDescriptorSetAllocateInfo DescriptorSetAllocateInfo(
  VkDescriptorPool descriptorPool,
  uint32_t descriptorSetCount,
  const VkDescriptorSetLayout* pSetLayouts
)
{
  VkDescriptorSetAllocateInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO;
  temp.pNext = nullptr;
  temp.descriptorPool = descriptorPool;
  temp.descriptorSetCount = descriptorSetCount;
  temp.pSetLayouts = pSetLayouts;

  return temp;
}

inline VkPipelineShaderStageCreateInfo PipelineShaderStageCreateInfo(
  VkPipelineShaderStageCreateFlags flags,
  VkShaderStageFlagBits stage,
  VkShaderModule module,
  const char* pName,
  const VkSpecializationInfo* pSpecializationInfo
)
{
  VkPipelineShaderStageCreateInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.stage = stage;
  temp.module = module;
  temp.pName = pName;
  temp.pSpecializationInfo = pSpecializationInfo;

  return temp;
}

inline VkComputePipelineCreateInfo ComputePipelineCreateInfo(
  VkPipelineCreateFlags flags,
  VkPipelineShaderStageCreateInfo stage,
  VkPipelineLayout layout,
  VkPipeline basePipelineHandle,
  int32_t basePipelineIndex
)
{
  VkComputePipelineCreateInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.stage = stage;
  temp.layout = layout;
  temp.basePipelineHandle = basePipelineHandle;
  temp.basePipelineIndex = basePipelineIndex;

  return temp;
}

inline VkPipelineVertexInputStateCreateInfo PipelineVertexInputStateCreateInfo(
  VkPipelineVertexInputStateCreateFlags flags,
  uint32_t vertexBindingDescriptionCount,
  const VkVertexInputBindingDescription* pVertexBindingDescriptions,
  uint32_t vertexAttributeDescriptionCount,
  const VkVertexInputAttributeDescription* pVertexAttributeDescriptions
)
{
  VkPipelineVertexInputStateCreateInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.vertexBindingDescriptionCount = vertexBindingDescriptionCount;
  temp.pVertexBindingDescriptions = pVertexBindingDescriptions;
  temp.vertexAttributeDescriptionCount = vertexAttributeDescriptionCount;
  temp.pVertexAttributeDescriptions = pVertexAttributeDescriptions;

  return temp;
}

inline VkPipelineInputAssemblyStateCreateInfo PipelineInputAssemblyStateCreateInfo(
  VkPipelineInputAssemblyStateCreateFlags flags,
  VkPrimitiveTopology topology,
  VkBool32 primitiveRestartEnable
)
{
  VkPipelineInputAssemblyStateCreateInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.topology = topology;
  temp.primitiveRestartEnable = primitiveRestartEnable;

  return temp;
}

inline VkPipelineTessellationStateCreateInfo PipelineTessellationStateCreateInfo(
  VkPipelineTessellationStateCreateFlags flags,
  uint32_t patchControlPoints
)
{
  VkPipelineTessellationStateCreateInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.patchControlPoints = patchControlPoints;

  return temp;
}

inline VkPipelineViewportStateCreateInfo PipelineViewportStateCreateInfo(
  VkPipelineViewportStateCreateFlags flags,
  uint32_t viewportCount,
  const VkViewport* pViewports,
  uint32_t scissorCount,
  const VkRect2D* pScissors
)
{
  VkPipelineViewportStateCreateInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.viewportCount = viewportCount;
  temp.pViewports = pViewports;
  temp.scissorCount = scissorCount;
  temp.pScissors = pScissors;

  return temp;
}

inline VkPipelineRasterizationStateCreateInfo PipelineRasterizationStateCreateInfo(
  VkPipelineRasterizationStateCreateFlags flags,
  VkBool32 depthClampEnable,
  VkBool32 rasterizerDiscardEnable,
  VkPolygonMode polygonMode,
  VkCullModeFlags cullMode,
  VkFrontFace frontFace,
  VkBool32 depthBiasEnable,
  float depthBiasConstantFactor,
  float depthBiasClamp,
  float depthBiasSlopeFactor,
  float lineWidth
)
{
  VkPipelineRasterizationStateCreateInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.depthClampEnable = depthClampEnable;
  temp.rasterizerDiscardEnable = rasterizerDiscardEnable;
  temp.polygonMode = polygonMode;
  temp.cullMode = cullMode;
  temp.frontFace = frontFace;
  temp.depthBiasEnable = depthBiasEnable;
  temp.depthBiasConstantFactor = depthBiasConstantFactor;
  temp.depthBiasClamp = depthBiasClamp;
  temp.depthBiasSlopeFactor = depthBiasSlopeFactor;
  temp.lineWidth = lineWidth;

  return temp;
}

inline VkPipelineMultisampleStateCreateInfo PipelineMultisampleStateCreateInfo(
  VkPipelineMultisampleStateCreateFlags flags,
  VkSampleCountFlagBits rasterizationSamples,
  VkBool32 sampleShadingEnable,
  float minSampleShading,
  const VkSampleMask* pSampleMask,
  VkBool32 alphaToCoverageEnable,
  VkBool32 alphaToOneEnable
)
{
  VkPipelineMultisampleStateCreateInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.rasterizationSamples = rasterizationSamples;
  temp.sampleShadingEnable = sampleShadingEnable;
  temp.minSampleShading = minSampleShading;
  temp.pSampleMask = pSampleMask;
  temp.alphaToCoverageEnable = alphaToCoverageEnable;
  temp.alphaToOneEnable = alphaToOneEnable;

  return temp;
}

inline VkPipelineColorBlendStateCreateInfo PipelineColorBlendStateCreateInfo(
  VkPipelineColorBlendStateCreateFlags flags,
  VkBool32 logicOpEnable,
  VkLogicOp logicOp,
  uint32_t attachmentCount,
  const VkPipelineColorBlendAttachmentState* pAttachments,
  float blendConstants[4]
)
{
  VkPipelineColorBlendStateCreateInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.logicOpEnable = logicOpEnable;
  temp.logicOp = logicOp;
  temp.attachmentCount = attachmentCount;
  temp.pAttachments = pAttachments;
  for(size_t i = 0; i < 4; ++i){
    temp.blendConstants[i] = blendConstants[i];
  }

  return temp;
}

inline VkPipelineDynamicStateCreateInfo PipelineDynamicStateCreateInfo(
  VkPipelineDynamicStateCreateFlags flags,
  uint32_t dynamicStateCount,
  const VkDynamicState* pDynamicStates
)
{
  VkPipelineDynamicStateCreateInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.dynamicStateCount = dynamicStateCount;
  temp.pDynamicStates = pDynamicStates;

  return temp;
}

inline VkPipelineDepthStencilStateCreateInfo PipelineDepthStencilStateCreateInfo(
  VkPipelineDepthStencilStateCreateFlags flags,
  VkBool32 depthTestEnable,
  VkBool32 depthWriteEnable,
  VkCompareOp depthCompareOp,
  VkBool32 depthBoundsTestEnable,
  VkBool32 stencilTestEnable,
  VkStencilOpState front,
  VkStencilOpState back,
  float minDepthBounds,
  float maxDepthBounds
)
{
  VkPipelineDepthStencilStateCreateInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.depthTestEnable = depthTestEnable;
  temp.depthWriteEnable = depthWriteEnable;
  temp.depthCompareOp = depthCompareOp;
  temp.depthBoundsTestEnable = depthBoundsTestEnable;
  temp.stencilTestEnable = stencilTestEnable;
  temp.front = front;
  temp.back = back;
  temp.minDepthBounds = minDepthBounds;
  temp.maxDepthBounds = maxDepthBounds;

  return temp;
}

inline VkGraphicsPipelineCreateInfo GraphicsPipelineCreateInfo(
  VkPipelineCreateFlags flags,
  uint32_t stageCount,
  const VkPipelineShaderStageCreateInfo* pStages,
  const VkPipelineVertexInputStateCreateInfo* pVertexInputState,
  const VkPipelineInputAssemblyStateCreateInfo* pInputAssemblyState,
  const VkPipelineTessellationStateCreateInfo* pTessellationState,
  const VkPipelineViewportStateCreateInfo* pViewportState,
  const VkPipelineRasterizationStateCreateInfo* pRasterizationState,
  const VkPipelineMultisampleStateCreateInfo* pMultisampleState,
  const VkPipelineDepthStencilStateCreateInfo* pDepthStencilState,
  const VkPipelineColorBlendStateCreateInfo* pColorBlendState,
  const VkPipelineDynamicStateCreateInfo* pDynamicState,
  VkPipelineLayout layout,
  VkRenderPass renderPass,
  uint32_t subpass,
  VkPipeline basePipelineHandle,
  int32_t basePipelineIndex
)
{
  VkGraphicsPipelineCreateInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.stageCount = stageCount;
  temp.pStages = pStages;
  temp.pVertexInputState = pVertexInputState;
  temp.pInputAssemblyState = pInputAssemblyState;
  temp.pTessellationState = pTessellationState;
  temp.pViewportState = pViewportState;
  temp.pRasterizationState = pRasterizationState;
  temp.pMultisampleState = pMultisampleState;
  temp.pDepthStencilState = pDepthStencilState;
  temp.pColorBlendState = pColorBlendState;
  temp.pDynamicState = pDynamicState;
  temp.layout = layout;
  temp.renderPass = renderPass;
  temp.subpass = subpass;
  temp.basePipelineHandle = basePipelineHandle;
  temp.basePipelineIndex = basePipelineIndex;

  return temp;
}

inline VkPipelineCacheCreateInfo PipelineCacheCreateInfo(
  VkPipelineCacheCreateFlags flags,
  size_t initialDataSize,
  const void* pInitialData
)
{
  VkPipelineCacheCreateInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.initialDataSize = initialDataSize;
  temp.pInitialData = pInitialData;

  return temp;
}

inline VkPipelineLayoutCreateInfo PipelineLayoutCreateInfo(
  VkPipelineLayoutCreateFlags flags,
  uint32_t setLayoutCount,
  const VkDescriptorSetLayout* pSetLayouts,
  uint32_t pushConstantRangeCount,
  const VkPushConstantRange* pPushConstantRanges
)
{
  VkPipelineLayoutCreateInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.setLayoutCount = setLayoutCount;
  temp.pSetLayouts = pSetLayouts;
  temp.pushConstantRangeCount = pushConstantRangeCount;
  temp.pPushConstantRanges = pPushConstantRanges;

  return temp;
}

inline VkSamplerCreateInfo SamplerCreateInfo(
  VkSamplerCreateFlags flags,
  VkFilter magFilter,
  VkFilter minFilter,
  VkSamplerMipmapMode mipmapMode,
  VkSamplerAddressMode addressModeU,
  VkSamplerAddressMode addressModeV,
  VkSamplerAddressMode addressModeW,
  float mipLodBias,
  VkBool32 anisotropyEnable,
  float maxAnisotropy,
  VkBool32 compareEnable,
  VkCompareOp compareOp,
  float minLod,
  float maxLod,
  VkBorderColor borderColor,
  VkBool32 unnormalizedCoordinates
)
{
  VkSamplerCreateInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.magFilter = magFilter;
  temp.minFilter = minFilter;
  temp.mipmapMode = mipmapMode;
  temp.addressModeU = addressModeU;
  temp.addressModeV = addressModeV;
  temp.addressModeW = addressModeW;
  temp.mipLodBias = mipLodBias;
  temp.anisotropyEnable = anisotropyEnable;
  temp.maxAnisotropy = maxAnisotropy;
  temp.compareEnable = compareEnable;
  temp.compareOp = compareOp;
  temp.minLod = minLod;
  temp.maxLod = maxLod;
  temp.borderColor = borderColor;
  temp.unnormalizedCoordinates = unnormalizedCoordinates;

  return temp;
}

inline VkCommandPoolCreateInfo CommandPoolCreateInfo(
  VkCommandPoolCreateFlags flags,
  uint32_t queueFamilyIndex
)
{
  VkCommandPoolCreateInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.queueFamilyIndex = queueFamilyIndex;

  return temp;
}

inline VkCommandBufferAllocateInfo CommandBufferAllocateInfo(
  VkCommandPool commandPool,
  VkCommandBufferLevel level,
  uint32_t commandBufferCount
)
{
  VkCommandBufferAllocateInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO;
  temp.pNext = nullptr;
  temp.commandPool = commandPool;
  temp.level = level;
  temp.commandBufferCount = commandBufferCount;

  return temp;
}

inline VkCommandBufferInheritanceInfo CommandBufferInheritanceInfo(
  VkRenderPass renderPass,
  uint32_t subpass,
  VkFramebuffer framebuffer,
  VkBool32 occlusionQueryEnable,
  VkQueryControlFlags queryFlags,
  VkQueryPipelineStatisticFlags pipelineStatistics
)
{
  VkCommandBufferInheritanceInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO;
  temp.pNext = nullptr;
  temp.renderPass = renderPass;
  temp.subpass = subpass;
  temp.framebuffer = framebuffer;
  temp.occlusionQueryEnable = occlusionQueryEnable;
  temp.queryFlags = queryFlags;
  temp.pipelineStatistics = pipelineStatistics;

  return temp;
}

inline VkCommandBufferBeginInfo CommandBufferBeginInfo(
  VkCommandBufferUsageFlags flags,
  const VkCommandBufferInheritanceInfo* pInheritanceInfo
)
{
  VkCommandBufferBeginInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.pInheritanceInfo = pInheritanceInfo;

  return temp;
}

inline VkRenderPassBeginInfo RenderPassBeginInfo(
  VkRenderPass renderPass,
  VkFramebuffer framebuffer,
  VkRect2D renderArea,
  uint32_t clearValueCount,
  const VkClearValue* pClearValues
)
{
  VkRenderPassBeginInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO;
  temp.pNext = nullptr;
  temp.renderPass = renderPass;
  temp.framebuffer = framebuffer;
  temp.renderArea = renderArea;
  temp.clearValueCount = clearValueCount;
  temp.pClearValues = pClearValues;

  return temp;
}

inline VkRenderPassCreateInfo RenderPassCreateInfo(
  VkRenderPassCreateFlags flags,
  uint32_t attachmentCount,
  const VkAttachmentDescription* pAttachments,
  uint32_t subpassCount,
  const VkSubpassDescription* pSubpasses,
  uint32_t dependencyCount,
  const VkSubpassDependency* pDependencies
)
{
  VkRenderPassCreateInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.attachmentCount = attachmentCount;
  temp.pAttachments = pAttachments;
  temp.subpassCount = subpassCount;
  temp.pSubpasses = pSubpasses;
  temp.dependencyCount = dependencyCount;
  temp.pDependencies = pDependencies;

  return temp;
}

inline VkEventCreateInfo EventCreateInfo(
  VkEventCreateFlags flags
)
{
  VkEventCreateInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_EVENT_CREATE_INFO;
  temp.pNext = nullptr;
  temp.flags = flags;

  return temp;
}

inline VkFenceCreateInfo FenceCreateInfo(
  VkFenceCreateFlags flags
)
{
  VkFenceCreateInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_FENCE_CREATE_INFO;
  temp.pNext = nullptr;
  temp.flags = flags;

  return temp;
}

inline VkSemaphoreCreateInfo SemaphoreCreateInfo(
  VkSemaphoreCreateFlags flags
)
{
  VkSemaphoreCreateInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO;
  temp.pNext = nullptr;
  temp.flags = flags;

  return temp;
}

inline VkQueryPoolCreateInfo QueryPoolCreateInfo(
  VkQueryPoolCreateFlags flags,
  VkQueryType queryType,
  uint32_t queryCount,
  VkQueryPipelineStatisticFlags pipelineStatistics
)
{
  VkQueryPoolCreateInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.queryType = queryType;
  temp.queryCount = queryCount;
  temp.pipelineStatistics = pipelineStatistics;

  return temp;
}

inline VkFramebufferCreateInfo FramebufferCreateInfo(
  VkFramebufferCreateFlags flags,
  VkRenderPass renderPass,
  uint32_t attachmentCount,
  const VkImageView* pAttachments,
  uint32_t width,
  uint32_t height,
  uint32_t layers
)
{
  VkFramebufferCreateInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.renderPass = renderPass;
  temp.attachmentCount = attachmentCount;
  temp.pAttachments = pAttachments;
  temp.width = width;
  temp.height = height;
  temp.layers = layers;

  return temp;
}

inline VkSubmitInfo SubmitInfo(
  uint32_t waitSemaphoreCount,
  const VkSemaphore* pWaitSemaphores,
  const VkPipelineStageFlags* pWaitDstStageMask,
  uint32_t commandBufferCount,
  const VkCommandBuffer* pCommandBuffers,
  uint32_t signalSemaphoreCount,
  const VkSemaphore* pSignalSemaphores
)
{
  VkSubmitInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_SUBMIT_INFO;
  temp.pNext = nullptr;
  temp.waitSemaphoreCount = waitSemaphoreCount;
  temp.pWaitSemaphores = pWaitSemaphores;
  temp.pWaitDstStageMask = pWaitDstStageMask;
  temp.commandBufferCount = commandBufferCount;
  temp.pCommandBuffers = pCommandBuffers;
  temp.signalSemaphoreCount = signalSemaphoreCount;
  temp.pSignalSemaphores = pSignalSemaphores;

  return temp;
}

inline VkDisplayModeCreateInfoKHR DisplayModeCreateInfoKHR(
  VkDisplayModeCreateFlagsKHR flags,
  VkDisplayModeParametersKHR parameters
)
{
  VkDisplayModeCreateInfoKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.parameters = parameters;

  return temp;
}

inline VkDisplaySurfaceCreateInfoKHR DisplaySurfaceCreateInfoKHR(
  VkDisplaySurfaceCreateFlagsKHR flags,
  VkDisplayModeKHR displayMode,
  uint32_t planeIndex,
  uint32_t planeStackIndex,
  VkSurfaceTransformFlagBitsKHR transform,
  float globalAlpha,
  VkDisplayPlaneAlphaFlagBitsKHR alphaMode,
  VkExtent2D imageExtent
)
{
  VkDisplaySurfaceCreateInfoKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.displayMode = displayMode;
  temp.planeIndex = planeIndex;
  temp.planeStackIndex = planeStackIndex;
  temp.transform = transform;
  temp.globalAlpha = globalAlpha;
  temp.alphaMode = alphaMode;
  temp.imageExtent = imageExtent;

  return temp;
}

inline VkDisplayPresentInfoKHR DisplayPresentInfoKHR(
  VkRect2D srcRect,
  VkRect2D dstRect,
  VkBool32 persistent
)
{
  VkDisplayPresentInfoKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR;
  temp.pNext = nullptr;
  temp.srcRect = srcRect;
  temp.dstRect = dstRect;
  temp.persistent = persistent;

  return temp;
}

#ifdef  VK_USE_PLATFORM_ANDROID_KHR
inline VkAndroidSurfaceCreateInfoKHR AndroidSurfaceCreateInfoKHR(
  VkAndroidSurfaceCreateFlagsKHR flags,
  ANativeWindow* window
)
{
  VkAndroidSurfaceCreateInfoKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.window = window;

  return temp;
}
#endif

#ifdef  VK_USE_PLATFORM_VI_NN
inline VkViSurfaceCreateInfoNN ViSurfaceCreateInfoNN(
  VkViSurfaceCreateFlagsNN flags,
  void* window
)
{
  VkViSurfaceCreateInfoNN temp;
  temp.sType = VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.window = window;

  return temp;
}
#endif

#ifdef  VK_USE_PLATFORM_WAYLAND_KHR
inline VkWaylandSurfaceCreateInfoKHR WaylandSurfaceCreateInfoKHR(
  VkWaylandSurfaceCreateFlagsKHR flags,
  wl_display* display,
  wl_surface* surface
)
{
  VkWaylandSurfaceCreateInfoKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.display = display;
  temp.surface = surface;

  return temp;
}
#endif

#ifdef  VK_USE_PLATFORM_WIN32_KHR
inline VkWin32SurfaceCreateInfoKHR Win32SurfaceCreateInfoKHR(
  VkWin32SurfaceCreateFlagsKHR flags,
  HINSTANCE hinstance,
  HWND hwnd
)
{
  VkWin32SurfaceCreateInfoKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_WIN_32_SURFACE_CREATE_INFO_KHR;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.hinstance = hinstance;
  temp.hwnd = hwnd;

  return temp;
}
#endif

#ifdef  VK_USE_PLATFORM_XLIB_KHR
inline VkXlibSurfaceCreateInfoKHR XlibSurfaceCreateInfoKHR(
  VkXlibSurfaceCreateFlagsKHR flags,
  Display* dpy,
  Window window
)
{
  VkXlibSurfaceCreateInfoKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.dpy = dpy;
  temp.window = window;

  return temp;
}
#endif

#ifdef  VK_USE_PLATFORM_XCB_KHR
inline VkXcbSurfaceCreateInfoKHR XcbSurfaceCreateInfoKHR(
  VkXcbSurfaceCreateFlagsKHR flags,
  xcb_connection_t* connection,
  xcb_window_t window
)
{
  VkXcbSurfaceCreateInfoKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.connection = connection;
  temp.window = window;

  return temp;
}
#endif

#ifdef  VK_USE_PLATFORM_DIRECTFB_EXT
inline VkDirectFBSurfaceCreateInfoEXT DirectFBSurfaceCreateInfoEXT(
  VkDirectFBSurfaceCreateFlagsEXT flags,
  IDirectFB* dfb,
  IDirectFBSurface* surface
)
{
  VkDirectFBSurfaceCreateInfoEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_DIRECT_FBS_CREATE_INFO_EXT;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.dfb = dfb;
  temp.surface = surface;

  return temp;
}
#endif

#ifdef  VK_USE_PLATFORM_FUCHSIA
inline VkImagePipeSurfaceCreateInfoFUCHSIA ImagePipeSurfaceCreateInfoFUCHSIA(
  VkImagePipeSurfaceCreateFlagsFUCHSIA flags,
  zx_handle_t imagePipeHandle
)
{
  VkImagePipeSurfaceCreateInfoFUCHSIA temp;
  temp.sType = VK_STRUCTURE_TYPE_IMAGE_PIPE_SURFACE_CREATE_INFO_FUCHSIA;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.imagePipeHandle = imagePipeHandle;

  return temp;
}
#endif

#ifdef  VK_USE_PLATFORM_GGP
inline VkStreamDescriptorSurfaceCreateInfoGGP StreamDescriptorSurfaceCreateInfoGGP(
  VkStreamDescriptorSurfaceCreateFlagsGGP flags,
  GgpStreamDescriptor streamDescriptor
)
{
  VkStreamDescriptorSurfaceCreateInfoGGP temp;
  temp.sType = VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.streamDescriptor = streamDescriptor;

  return temp;
}
#endif

#ifdef  VK_USE_PLATFORM_SCREEN_QNX
inline VkScreenSurfaceCreateInfoQNX ScreenSurfaceCreateInfoQNX(
  VkScreenSurfaceCreateFlagsQNX flags,
  _screen_context* context,
  _screen_window* window
)
{
  VkScreenSurfaceCreateInfoQNX temp;
  temp.sType = VK_STRUCTURE_TYPE_SCREEN_SURFACE_CREATE_INFO_QNX;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.context = context;
  temp.window = window;

  return temp;
}
#endif

inline VkSwapchainCreateInfoKHR SwapchainCreateInfoKHR(
  VkSwapchainCreateFlagsKHR flags,
  VkSurfaceKHR surface,
  uint32_t minImageCount,
  VkFormat imageFormat,
  VkColorSpaceKHR imageColorSpace,
  VkExtent2D imageExtent,
  uint32_t imageArrayLayers,
  VkImageUsageFlags imageUsage,
  VkSharingMode imageSharingMode,
  uint32_t queueFamilyIndexCount,
  const uint32_t* pQueueFamilyIndices,
  VkSurfaceTransformFlagBitsKHR preTransform,
  VkCompositeAlphaFlagBitsKHR compositeAlpha,
  VkPresentModeKHR presentMode,
  VkBool32 clipped,
  VkSwapchainKHR oldSwapchain
)
{
  VkSwapchainCreateInfoKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.surface = surface;
  temp.minImageCount = minImageCount;
  temp.imageFormat = imageFormat;
  temp.imageColorSpace = imageColorSpace;
  temp.imageExtent = imageExtent;
  temp.imageArrayLayers = imageArrayLayers;
  temp.imageUsage = imageUsage;
  temp.imageSharingMode = imageSharingMode;
  temp.queueFamilyIndexCount = queueFamilyIndexCount;
  temp.pQueueFamilyIndices = pQueueFamilyIndices;
  temp.preTransform = preTransform;
  temp.compositeAlpha = compositeAlpha;
  temp.presentMode = presentMode;
  temp.clipped = clipped;
  temp.oldSwapchain = oldSwapchain;

  return temp;
}

inline VkPresentInfoKHR PresentInfoKHR(
  uint32_t waitSemaphoreCount,
  const VkSemaphore* pWaitSemaphores,
  uint32_t swapchainCount,
  const VkSwapchainKHR* pSwapchains,
  const uint32_t* pImageIndices,
  VkResult* pResults
)
{
  VkPresentInfoKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_PRESENT_INFO_KHR;
  temp.pNext = nullptr;
  temp.waitSemaphoreCount = waitSemaphoreCount;
  temp.pWaitSemaphores = pWaitSemaphores;
  temp.swapchainCount = swapchainCount;
  temp.pSwapchains = pSwapchains;
  temp.pImageIndices = pImageIndices;
  temp.pResults = pResults;

  return temp;
}

inline VkDebugReportCallbackCreateInfoEXT DebugReportCallbackCreateInfoEXT(
  VkDebugReportFlagsEXT flags,
  PFN_vkDebugReportCallbackEXT pfnCallback,
  void* pUserData
)
{
  VkDebugReportCallbackCreateInfoEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.pfnCallback = pfnCallback;
  temp.pUserData = pUserData;

  return temp;
}

inline VkValidationFlagsEXT ValidationFlagsEXT(
  uint32_t disabledValidationCheckCount,
  const VkValidationCheckEXT* pDisabledValidationChecks
)
{
  VkValidationFlagsEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT;
  temp.pNext = nullptr;
  temp.disabledValidationCheckCount = disabledValidationCheckCount;
  temp.pDisabledValidationChecks = pDisabledValidationChecks;

  return temp;
}

inline VkValidationFeaturesEXT ValidationFeaturesEXT(
  uint32_t enabledValidationFeatureCount,
  const VkValidationFeatureEnableEXT* pEnabledValidationFeatures,
  uint32_t disabledValidationFeatureCount,
  const VkValidationFeatureDisableEXT* pDisabledValidationFeatures
)
{
  VkValidationFeaturesEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT;
  temp.pNext = nullptr;
  temp.enabledValidationFeatureCount = enabledValidationFeatureCount;
  temp.pEnabledValidationFeatures = pEnabledValidationFeatures;
  temp.disabledValidationFeatureCount = disabledValidationFeatureCount;
  temp.pDisabledValidationFeatures = pDisabledValidationFeatures;

  return temp;
}

inline VkPipelineRasterizationStateRasterizationOrderAMD PipelineRasterizationStateRasterizationOrderAMD(
  VkRasterizationOrderAMD rasterizationOrder
)
{
  VkPipelineRasterizationStateRasterizationOrderAMD temp;
  temp.sType = VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD;
  temp.pNext = nullptr;
  temp.rasterizationOrder = rasterizationOrder;

  return temp;
}

inline VkDebugMarkerObjectNameInfoEXT DebugMarkerObjectNameInfoEXT(
  VkDebugReportObjectTypeEXT objectType,
  uint64_t object,
  const char* pObjectName
)
{
  VkDebugMarkerObjectNameInfoEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT;
  temp.pNext = nullptr;
  temp.objectType = objectType;
  temp.object = object;
  temp.pObjectName = pObjectName;

  return temp;
}

inline VkDebugMarkerObjectTagInfoEXT DebugMarkerObjectTagInfoEXT(
  VkDebugReportObjectTypeEXT objectType,
  uint64_t object,
  uint64_t tagName,
  size_t tagSize,
  const void* pTag
)
{
  VkDebugMarkerObjectTagInfoEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT;
  temp.pNext = nullptr;
  temp.objectType = objectType;
  temp.object = object;
  temp.tagName = tagName;
  temp.tagSize = tagSize;
  temp.pTag = pTag;

  return temp;
}

inline VkDebugMarkerMarkerInfoEXT DebugMarkerMarkerInfoEXT(
  const char* pMarkerName,
  float color[4]
)
{
  VkDebugMarkerMarkerInfoEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT;
  temp.pNext = nullptr;
  temp.pMarkerName = pMarkerName;
  for(size_t i = 0; i < 4; ++i){
    temp.color[i] = color[i];
  }

  return temp;
}

inline VkDedicatedAllocationImageCreateInfoNV DedicatedAllocationImageCreateInfoNV(
  VkBool32 dedicatedAllocation
)
{
  VkDedicatedAllocationImageCreateInfoNV temp;
  temp.sType = VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV;
  temp.pNext = nullptr;
  temp.dedicatedAllocation = dedicatedAllocation;

  return temp;
}

inline VkDedicatedAllocationBufferCreateInfoNV DedicatedAllocationBufferCreateInfoNV(
  VkBool32 dedicatedAllocation
)
{
  VkDedicatedAllocationBufferCreateInfoNV temp;
  temp.sType = VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV;
  temp.pNext = nullptr;
  temp.dedicatedAllocation = dedicatedAllocation;

  return temp;
}

inline VkDedicatedAllocationMemoryAllocateInfoNV DedicatedAllocationMemoryAllocateInfoNV(
  VkImage image,
  VkBuffer buffer
)
{
  VkDedicatedAllocationMemoryAllocateInfoNV temp;
  temp.sType = VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV;
  temp.pNext = nullptr;
  temp.image = image;
  temp.buffer = buffer;

  return temp;
}

inline VkExternalMemoryImageCreateInfoNV ExternalMemoryImageCreateInfoNV(
  VkExternalMemoryHandleTypeFlagsNV handleTypes
)
{
  VkExternalMemoryImageCreateInfoNV temp;
  temp.sType = VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV;
  temp.pNext = nullptr;
  temp.handleTypes = handleTypes;

  return temp;
}

inline VkExportMemoryAllocateInfoNV ExportMemoryAllocateInfoNV(
  VkExternalMemoryHandleTypeFlagsNV handleTypes
)
{
  VkExportMemoryAllocateInfoNV temp;
  temp.sType = VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV;
  temp.pNext = nullptr;
  temp.handleTypes = handleTypes;

  return temp;
}

#ifdef  VK_USE_PLATFORM_WIN32_KHR
inline VkImportMemoryWin32HandleInfoNV ImportMemoryWin32HandleInfoNV(
  VkExternalMemoryHandleTypeFlagsNV handleType,
  HANDLE handle
)
{
  VkImportMemoryWin32HandleInfoNV temp;
  temp.sType = VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN_32_HANDLE_INFO_NV;
  temp.pNext = nullptr;
  temp.handleType = handleType;
  temp.handle = handle;

  return temp;
}
#endif

#ifdef  VK_USE_PLATFORM_WIN32_KHR
inline VkExportMemoryWin32HandleInfoNV ExportMemoryWin32HandleInfoNV(
  const SECURITY_ATTRIBUTES* pAttributes,
  DWORD dwAccess
)
{
  VkExportMemoryWin32HandleInfoNV temp;
  temp.sType = VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN_32_HANDLE_INFO_NV;
  temp.pNext = nullptr;
  temp.pAttributes = pAttributes;
  temp.dwAccess = dwAccess;

  return temp;
}
#endif

#ifdef  VK_USE_PLATFORM_WIN32_KHR
inline VkWin32KeyedMutexAcquireReleaseInfoNV Win32KeyedMutexAcquireReleaseInfoNV(
  uint32_t acquireCount,
  const VkDeviceMemory* pAcquireSyncs,
  const uint64_t* pAcquireKeys,
  const uint32_t* pAcquireTimeoutMilliseconds,
  uint32_t releaseCount,
  const VkDeviceMemory* pReleaseSyncs,
  const uint64_t* pReleaseKeys
)
{
  VkWin32KeyedMutexAcquireReleaseInfoNV temp;
  temp.sType = VK_STRUCTURE_TYPE_WIN_32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV;
  temp.pNext = nullptr;
  temp.acquireCount = acquireCount;
  temp.pAcquireSyncs = pAcquireSyncs;
  temp.pAcquireKeys = pAcquireKeys;
  temp.pAcquireTimeoutMilliseconds = pAcquireTimeoutMilliseconds;
  temp.releaseCount = releaseCount;
  temp.pReleaseSyncs = pReleaseSyncs;
  temp.pReleaseKeys = pReleaseKeys;

  return temp;
}
#endif

inline VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV PhysicalDeviceDeviceGeneratedCommandsFeaturesNV(
  VkBool32 deviceGeneratedCommands
)
{
  VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV;
  temp.pNext = nullptr;
  temp.deviceGeneratedCommands = deviceGeneratedCommands;

  return temp;
}

inline VkDevicePrivateDataCreateInfoEXT DevicePrivateDataCreateInfoEXT(
  uint32_t privateDataSlotRequestCount
)
{
  VkDevicePrivateDataCreateInfoEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT;
  temp.pNext = nullptr;
  temp.privateDataSlotRequestCount = privateDataSlotRequestCount;

  return temp;
}

inline VkPrivateDataSlotCreateInfoEXT PrivateDataSlotCreateInfoEXT(
  VkPrivateDataSlotCreateFlagsEXT flags
)
{
  VkPrivateDataSlotCreateInfoEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT;
  temp.pNext = nullptr;
  temp.flags = flags;

  return temp;
}

inline VkPhysicalDevicePrivateDataFeaturesEXT PhysicalDevicePrivateDataFeaturesEXT(
  VkBool32 privateData
)
{
  VkPhysicalDevicePrivateDataFeaturesEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT;
  temp.pNext = nullptr;
  temp.privateData = privateData;

  return temp;
}

inline VkGraphicsShaderGroupCreateInfoNV GraphicsShaderGroupCreateInfoNV(
  uint32_t stageCount,
  const VkPipelineShaderStageCreateInfo* pStages,
  const VkPipelineVertexInputStateCreateInfo* pVertexInputState,
  const VkPipelineTessellationStateCreateInfo* pTessellationState
)
{
  VkGraphicsShaderGroupCreateInfoNV temp;
  temp.sType = VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV;
  temp.pNext = nullptr;
  temp.stageCount = stageCount;
  temp.pStages = pStages;
  temp.pVertexInputState = pVertexInputState;
  temp.pTessellationState = pTessellationState;

  return temp;
}

inline VkGraphicsPipelineShaderGroupsCreateInfoNV GraphicsPipelineShaderGroupsCreateInfoNV(
  uint32_t groupCount,
  const VkGraphicsShaderGroupCreateInfoNV* pGroups,
  uint32_t pipelineCount,
  const VkPipeline* pPipelines
)
{
  VkGraphicsPipelineShaderGroupsCreateInfoNV temp;
  temp.sType = VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV;
  temp.pNext = nullptr;
  temp.groupCount = groupCount;
  temp.pGroups = pGroups;
  temp.pipelineCount = pipelineCount;
  temp.pPipelines = pPipelines;

  return temp;
}

inline VkIndirectCommandsLayoutTokenNV IndirectCommandsLayoutTokenNV(
  VkIndirectCommandsTokenTypeNV tokenType,
  uint32_t stream,
  uint32_t offset,
  uint32_t vertexBindingUnit,
  VkBool32 vertexDynamicStride,
  VkPipelineLayout pushconstantPipelineLayout,
  VkShaderStageFlags pushconstantShaderStageFlags,
  uint32_t pushconstantOffset,
  uint32_t pushconstantSize,
  VkIndirectStateFlagsNV indirectStateFlags,
  uint32_t indexTypeCount,
  const VkIndexType* pIndexTypes,
  const uint32_t* pIndexTypeValues
)
{
  VkIndirectCommandsLayoutTokenNV temp;
  temp.sType = VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV;
  temp.pNext = nullptr;
  temp.tokenType = tokenType;
  temp.stream = stream;
  temp.offset = offset;
  temp.vertexBindingUnit = vertexBindingUnit;
  temp.vertexDynamicStride = vertexDynamicStride;
  temp.pushconstantPipelineLayout = pushconstantPipelineLayout;
  temp.pushconstantShaderStageFlags = pushconstantShaderStageFlags;
  temp.pushconstantOffset = pushconstantOffset;
  temp.pushconstantSize = pushconstantSize;
  temp.indirectStateFlags = indirectStateFlags;
  temp.indexTypeCount = indexTypeCount;
  temp.pIndexTypes = pIndexTypes;
  temp.pIndexTypeValues = pIndexTypeValues;

  return temp;
}

inline VkIndirectCommandsLayoutCreateInfoNV IndirectCommandsLayoutCreateInfoNV(
  VkIndirectCommandsLayoutUsageFlagsNV flags,
  VkPipelineBindPoint pipelineBindPoint,
  uint32_t tokenCount,
  const VkIndirectCommandsLayoutTokenNV* pTokens,
  uint32_t streamCount,
  const uint32_t* pStreamStrides
)
{
  VkIndirectCommandsLayoutCreateInfoNV temp;
  temp.sType = VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.pipelineBindPoint = pipelineBindPoint;
  temp.tokenCount = tokenCount;
  temp.pTokens = pTokens;
  temp.streamCount = streamCount;
  temp.pStreamStrides = pStreamStrides;

  return temp;
}

inline VkGeneratedCommandsInfoNV GeneratedCommandsInfoNV(
  VkPipelineBindPoint pipelineBindPoint,
  VkPipeline pipeline,
  VkIndirectCommandsLayoutNV indirectCommandsLayout,
  uint32_t streamCount,
  const VkIndirectCommandsStreamNV* pStreams,
  uint32_t sequencesCount,
  VkBuffer preprocessBuffer,
  VkDeviceSize preprocessOffset,
  VkDeviceSize preprocessSize,
  VkBuffer sequencesCountBuffer,
  VkDeviceSize sequencesCountOffset,
  VkBuffer sequencesIndexBuffer,
  VkDeviceSize sequencesIndexOffset
)
{
  VkGeneratedCommandsInfoNV temp;
  temp.sType = VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV;
  temp.pNext = nullptr;
  temp.pipelineBindPoint = pipelineBindPoint;
  temp.pipeline = pipeline;
  temp.indirectCommandsLayout = indirectCommandsLayout;
  temp.streamCount = streamCount;
  temp.pStreams = pStreams;
  temp.sequencesCount = sequencesCount;
  temp.preprocessBuffer = preprocessBuffer;
  temp.preprocessOffset = preprocessOffset;
  temp.preprocessSize = preprocessSize;
  temp.sequencesCountBuffer = sequencesCountBuffer;
  temp.sequencesCountOffset = sequencesCountOffset;
  temp.sequencesIndexBuffer = sequencesIndexBuffer;
  temp.sequencesIndexOffset = sequencesIndexOffset;

  return temp;
}

inline VkGeneratedCommandsMemoryRequirementsInfoNV GeneratedCommandsMemoryRequirementsInfoNV(
  VkPipelineBindPoint pipelineBindPoint,
  VkPipeline pipeline,
  VkIndirectCommandsLayoutNV indirectCommandsLayout,
  uint32_t maxSequencesCount
)
{
  VkGeneratedCommandsMemoryRequirementsInfoNV temp;
  temp.sType = VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV;
  temp.pNext = nullptr;
  temp.pipelineBindPoint = pipelineBindPoint;
  temp.pipeline = pipeline;
  temp.indirectCommandsLayout = indirectCommandsLayout;
  temp.maxSequencesCount = maxSequencesCount;

  return temp;
}

inline VkPhysicalDeviceFeatures2 PhysicalDeviceFeatures2(
  VkPhysicalDeviceFeatures features
)
{
  VkPhysicalDeviceFeatures2 temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2;
  temp.pNext = nullptr;
  temp.features = features;

  return temp;
}

inline VkPhysicalDeviceImageFormatInfo2 PhysicalDeviceImageFormatInfo2(
  VkFormat format,
  VkImageType type,
  VkImageTiling tiling,
  VkImageUsageFlags usage,
  VkImageCreateFlags flags
)
{
  VkPhysicalDeviceImageFormatInfo2 temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2;
  temp.pNext = nullptr;
  temp.format = format;
  temp.type = type;
  temp.tiling = tiling;
  temp.usage = usage;
  temp.flags = flags;

  return temp;
}

inline VkPhysicalDeviceSparseImageFormatInfo2 PhysicalDeviceSparseImageFormatInfo2(
  VkFormat format,
  VkImageType type,
  VkSampleCountFlagBits samples,
  VkImageUsageFlags usage,
  VkImageTiling tiling
)
{
  VkPhysicalDeviceSparseImageFormatInfo2 temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2;
  temp.pNext = nullptr;
  temp.format = format;
  temp.type = type;
  temp.samples = samples;
  temp.usage = usage;
  temp.tiling = tiling;

  return temp;
}

inline VkPresentRegionsKHR PresentRegionsKHR(
  uint32_t swapchainCount,
  const VkPresentRegionKHR* pRegions
)
{
  VkPresentRegionsKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR;
  temp.pNext = nullptr;
  temp.swapchainCount = swapchainCount;
  temp.pRegions = pRegions;

  return temp;
}

inline VkPhysicalDeviceVariablePointersFeatures PhysicalDeviceVariablePointersFeatures(
  VkBool32 variablePointersStorageBuffer,
  VkBool32 variablePointers
)
{
  VkPhysicalDeviceVariablePointersFeatures temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES;
  temp.pNext = nullptr;
  temp.variablePointersStorageBuffer = variablePointersStorageBuffer;
  temp.variablePointers = variablePointers;

  return temp;
}

inline VkPhysicalDeviceExternalImageFormatInfo PhysicalDeviceExternalImageFormatInfo(
  VkExternalMemoryHandleTypeFlagBits handleType
)
{
  VkPhysicalDeviceExternalImageFormatInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO;
  temp.pNext = nullptr;
  temp.handleType = handleType;

  return temp;
}

inline VkPhysicalDeviceExternalBufferInfo PhysicalDeviceExternalBufferInfo(
  VkBufferCreateFlags flags,
  VkBufferUsageFlags usage,
  VkExternalMemoryHandleTypeFlagBits handleType
)
{
  VkPhysicalDeviceExternalBufferInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.usage = usage;
  temp.handleType = handleType;

  return temp;
}

inline VkExternalMemoryImageCreateInfo ExternalMemoryImageCreateInfo(
  VkExternalMemoryHandleTypeFlags handleTypes
)
{
  VkExternalMemoryImageCreateInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO;
  temp.pNext = nullptr;
  temp.handleTypes = handleTypes;

  return temp;
}

inline VkExternalMemoryBufferCreateInfo ExternalMemoryBufferCreateInfo(
  VkExternalMemoryHandleTypeFlags handleTypes
)
{
  VkExternalMemoryBufferCreateInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO;
  temp.pNext = nullptr;
  temp.handleTypes = handleTypes;

  return temp;
}

inline VkExportMemoryAllocateInfo ExportMemoryAllocateInfo(
  VkExternalMemoryHandleTypeFlags handleTypes
)
{
  VkExportMemoryAllocateInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO;
  temp.pNext = nullptr;
  temp.handleTypes = handleTypes;

  return temp;
}

#ifdef  VK_USE_PLATFORM_WIN32_KHR
inline VkImportMemoryWin32HandleInfoKHR ImportMemoryWin32HandleInfoKHR(
  VkExternalMemoryHandleTypeFlagBits handleType,
  HANDLE handle,
  LPCWSTR name
)
{
  VkImportMemoryWin32HandleInfoKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN_32_HANDLE_INFO_KHR;
  temp.pNext = nullptr;
  temp.handleType = handleType;
  temp.handle = handle;
  temp.name = name;

  return temp;
}
#endif

#ifdef  VK_USE_PLATFORM_WIN32_KHR
inline VkExportMemoryWin32HandleInfoKHR ExportMemoryWin32HandleInfoKHR(
  const SECURITY_ATTRIBUTES* pAttributes,
  DWORD dwAccess,
  LPCWSTR name
)
{
  VkExportMemoryWin32HandleInfoKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN_32_HANDLE_INFO_KHR;
  temp.pNext = nullptr;
  temp.pAttributes = pAttributes;
  temp.dwAccess = dwAccess;
  temp.name = name;

  return temp;
}
#endif

#ifdef  VK_USE_PLATFORM_FUCHSIA
inline VkImportMemoryZirconHandleInfoFUCHSIA ImportMemoryZirconHandleInfoFUCHSIA(
  VkExternalMemoryHandleTypeFlagBits handleType,
  zx_handle_t handle
)
{
  VkImportMemoryZirconHandleInfoFUCHSIA temp;
  temp.sType = VK_STRUCTURE_TYPE_IMPORT_MEMORY_ZIRCON_HANDLE_INFO_FUCHSIA;
  temp.pNext = nullptr;
  temp.handleType = handleType;
  temp.handle = handle;

  return temp;
}
#endif

#ifdef  VK_USE_PLATFORM_FUCHSIA
inline VkMemoryGetZirconHandleInfoFUCHSIA MemoryGetZirconHandleInfoFUCHSIA(
  VkDeviceMemory memory,
  VkExternalMemoryHandleTypeFlagBits handleType
)
{
  VkMemoryGetZirconHandleInfoFUCHSIA temp;
  temp.sType = VK_STRUCTURE_TYPE_MEMORY_GET_ZIRCON_HANDLE_INFO_FUCHSIA;
  temp.pNext = nullptr;
  temp.memory = memory;
  temp.handleType = handleType;

  return temp;
}
#endif

#ifdef  VK_USE_PLATFORM_WIN32_KHR
inline VkMemoryGetWin32HandleInfoKHR MemoryGetWin32HandleInfoKHR(
  VkDeviceMemory memory,
  VkExternalMemoryHandleTypeFlagBits handleType
)
{
  VkMemoryGetWin32HandleInfoKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_MEMORY_GET_WIN_32_HANDLE_INFO_KHR;
  temp.pNext = nullptr;
  temp.memory = memory;
  temp.handleType = handleType;

  return temp;
}
#endif

inline VkImportMemoryFdInfoKHR ImportMemoryFdInfoKHR(
  VkExternalMemoryHandleTypeFlagBits handleType,
  int fd
)
{
  VkImportMemoryFdInfoKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR;
  temp.pNext = nullptr;
  temp.handleType = handleType;
  temp.fd = fd;

  return temp;
}

inline VkMemoryGetFdInfoKHR MemoryGetFdInfoKHR(
  VkDeviceMemory memory,
  VkExternalMemoryHandleTypeFlagBits handleType
)
{
  VkMemoryGetFdInfoKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR;
  temp.pNext = nullptr;
  temp.memory = memory;
  temp.handleType = handleType;

  return temp;
}

#ifdef  VK_USE_PLATFORM_WIN32_KHR
inline VkWin32KeyedMutexAcquireReleaseInfoKHR Win32KeyedMutexAcquireReleaseInfoKHR(
  uint32_t acquireCount,
  const VkDeviceMemory* pAcquireSyncs,
  const uint64_t* pAcquireKeys,
  const uint32_t* pAcquireTimeouts,
  uint32_t releaseCount,
  const VkDeviceMemory* pReleaseSyncs,
  const uint64_t* pReleaseKeys
)
{
  VkWin32KeyedMutexAcquireReleaseInfoKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_WIN_32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR;
  temp.pNext = nullptr;
  temp.acquireCount = acquireCount;
  temp.pAcquireSyncs = pAcquireSyncs;
  temp.pAcquireKeys = pAcquireKeys;
  temp.pAcquireTimeouts = pAcquireTimeouts;
  temp.releaseCount = releaseCount;
  temp.pReleaseSyncs = pReleaseSyncs;
  temp.pReleaseKeys = pReleaseKeys;

  return temp;
}
#endif

inline VkPhysicalDeviceExternalSemaphoreInfo PhysicalDeviceExternalSemaphoreInfo(
  VkExternalSemaphoreHandleTypeFlagBits handleType
)
{
  VkPhysicalDeviceExternalSemaphoreInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO;
  temp.pNext = nullptr;
  temp.handleType = handleType;

  return temp;
}

inline VkExportSemaphoreCreateInfo ExportSemaphoreCreateInfo(
  VkExternalSemaphoreHandleTypeFlags handleTypes
)
{
  VkExportSemaphoreCreateInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO;
  temp.pNext = nullptr;
  temp.handleTypes = handleTypes;

  return temp;
}

#ifdef  VK_USE_PLATFORM_WIN32_KHR
inline VkImportSemaphoreWin32HandleInfoKHR ImportSemaphoreWin32HandleInfoKHR(
  VkSemaphore semaphore,
  VkSemaphoreImportFlags flags,
  VkExternalSemaphoreHandleTypeFlagBits handleType,
  HANDLE handle,
  LPCWSTR name
)
{
  VkImportSemaphoreWin32HandleInfoKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN_32_HANDLE_INFO_KHR;
  temp.pNext = nullptr;
  temp.semaphore = semaphore;
  temp.flags = flags;
  temp.handleType = handleType;
  temp.handle = handle;
  temp.name = name;

  return temp;
}
#endif

#ifdef  VK_USE_PLATFORM_WIN32_KHR
inline VkExportSemaphoreWin32HandleInfoKHR ExportSemaphoreWin32HandleInfoKHR(
  const SECURITY_ATTRIBUTES* pAttributes,
  DWORD dwAccess,
  LPCWSTR name
)
{
  VkExportSemaphoreWin32HandleInfoKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN_32_HANDLE_INFO_KHR;
  temp.pNext = nullptr;
  temp.pAttributes = pAttributes;
  temp.dwAccess = dwAccess;
  temp.name = name;

  return temp;
}
#endif

#ifdef  VK_USE_PLATFORM_WIN32_KHR
inline VkD3D12FenceSubmitInfoKHR D3D12FenceSubmitInfoKHR(
  uint32_t waitSemaphoreValuesCount,
  const uint64_t* pWaitSemaphoreValues,
  uint32_t signalSemaphoreValuesCount,
  const uint64_t* pSignalSemaphoreValues
)
{
  VkD3D12FenceSubmitInfoKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_3_12_FENCE_SUBMIT_INFO_KHR;
  temp.pNext = nullptr;
  temp.waitSemaphoreValuesCount = waitSemaphoreValuesCount;
  temp.pWaitSemaphoreValues = pWaitSemaphoreValues;
  temp.signalSemaphoreValuesCount = signalSemaphoreValuesCount;
  temp.pSignalSemaphoreValues = pSignalSemaphoreValues;

  return temp;
}
#endif

#ifdef  VK_USE_PLATFORM_WIN32_KHR
inline VkSemaphoreGetWin32HandleInfoKHR SemaphoreGetWin32HandleInfoKHR(
  VkSemaphore semaphore,
  VkExternalSemaphoreHandleTypeFlagBits handleType
)
{
  VkSemaphoreGetWin32HandleInfoKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN_32_HANDLE_INFO_KHR;
  temp.pNext = nullptr;
  temp.semaphore = semaphore;
  temp.handleType = handleType;

  return temp;
}
#endif

inline VkImportSemaphoreFdInfoKHR ImportSemaphoreFdInfoKHR(
  VkSemaphore semaphore,
  VkSemaphoreImportFlags flags,
  VkExternalSemaphoreHandleTypeFlagBits handleType,
  int fd
)
{
  VkImportSemaphoreFdInfoKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR;
  temp.pNext = nullptr;
  temp.semaphore = semaphore;
  temp.flags = flags;
  temp.handleType = handleType;
  temp.fd = fd;

  return temp;
}

inline VkSemaphoreGetFdInfoKHR SemaphoreGetFdInfoKHR(
  VkSemaphore semaphore,
  VkExternalSemaphoreHandleTypeFlagBits handleType
)
{
  VkSemaphoreGetFdInfoKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR;
  temp.pNext = nullptr;
  temp.semaphore = semaphore;
  temp.handleType = handleType;

  return temp;
}

#ifdef  VK_USE_PLATFORM_FUCHSIA
inline VkImportSemaphoreZirconHandleInfoFUCHSIA ImportSemaphoreZirconHandleInfoFUCHSIA(
  VkSemaphore semaphore,
  VkSemaphoreImportFlags flags,
  VkExternalSemaphoreHandleTypeFlagBits handleType,
  zx_handle_t zirconHandle
)
{
  VkImportSemaphoreZirconHandleInfoFUCHSIA temp;
  temp.sType = VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_ZIRCON_HANDLE_INFO_FUCHSIA;
  temp.pNext = nullptr;
  temp.semaphore = semaphore;
  temp.flags = flags;
  temp.handleType = handleType;
  temp.zirconHandle = zirconHandle;

  return temp;
}
#endif

#ifdef  VK_USE_PLATFORM_FUCHSIA
inline VkSemaphoreGetZirconHandleInfoFUCHSIA SemaphoreGetZirconHandleInfoFUCHSIA(
  VkSemaphore semaphore,
  VkExternalSemaphoreHandleTypeFlagBits handleType
)
{
  VkSemaphoreGetZirconHandleInfoFUCHSIA temp;
  temp.sType = VK_STRUCTURE_TYPE_SEMAPHORE_GET_ZIRCON_HANDLE_INFO_FUCHSIA;
  temp.pNext = nullptr;
  temp.semaphore = semaphore;
  temp.handleType = handleType;

  return temp;
}
#endif

inline VkPhysicalDeviceExternalFenceInfo PhysicalDeviceExternalFenceInfo(
  VkExternalFenceHandleTypeFlagBits handleType
)
{
  VkPhysicalDeviceExternalFenceInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO;
  temp.pNext = nullptr;
  temp.handleType = handleType;

  return temp;
}

inline VkExportFenceCreateInfo ExportFenceCreateInfo(
  VkExternalFenceHandleTypeFlags handleTypes
)
{
  VkExportFenceCreateInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO;
  temp.pNext = nullptr;
  temp.handleTypes = handleTypes;

  return temp;
}

#ifdef  VK_USE_PLATFORM_WIN32_KHR
inline VkImportFenceWin32HandleInfoKHR ImportFenceWin32HandleInfoKHR(
  VkFence fence,
  VkFenceImportFlags flags,
  VkExternalFenceHandleTypeFlagBits handleType,
  HANDLE handle,
  LPCWSTR name
)
{
  VkImportFenceWin32HandleInfoKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN_32_HANDLE_INFO_KHR;
  temp.pNext = nullptr;
  temp.fence = fence;
  temp.flags = flags;
  temp.handleType = handleType;
  temp.handle = handle;
  temp.name = name;

  return temp;
}
#endif

#ifdef  VK_USE_PLATFORM_WIN32_KHR
inline VkExportFenceWin32HandleInfoKHR ExportFenceWin32HandleInfoKHR(
  const SECURITY_ATTRIBUTES* pAttributes,
  DWORD dwAccess,
  LPCWSTR name
)
{
  VkExportFenceWin32HandleInfoKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN_32_HANDLE_INFO_KHR;
  temp.pNext = nullptr;
  temp.pAttributes = pAttributes;
  temp.dwAccess = dwAccess;
  temp.name = name;

  return temp;
}
#endif

#ifdef  VK_USE_PLATFORM_WIN32_KHR
inline VkFenceGetWin32HandleInfoKHR FenceGetWin32HandleInfoKHR(
  VkFence fence,
  VkExternalFenceHandleTypeFlagBits handleType
)
{
  VkFenceGetWin32HandleInfoKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_FENCE_GET_WIN_32_HANDLE_INFO_KHR;
  temp.pNext = nullptr;
  temp.fence = fence;
  temp.handleType = handleType;

  return temp;
}
#endif

inline VkImportFenceFdInfoKHR ImportFenceFdInfoKHR(
  VkFence fence,
  VkFenceImportFlags flags,
  VkExternalFenceHandleTypeFlagBits handleType,
  int fd
)
{
  VkImportFenceFdInfoKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR;
  temp.pNext = nullptr;
  temp.fence = fence;
  temp.flags = flags;
  temp.handleType = handleType;
  temp.fd = fd;

  return temp;
}

inline VkFenceGetFdInfoKHR FenceGetFdInfoKHR(
  VkFence fence,
  VkExternalFenceHandleTypeFlagBits handleType
)
{
  VkFenceGetFdInfoKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR;
  temp.pNext = nullptr;
  temp.fence = fence;
  temp.handleType = handleType;

  return temp;
}

inline VkPhysicalDeviceMultiviewFeatures PhysicalDeviceMultiviewFeatures(
  VkBool32 multiview,
  VkBool32 multiviewGeometryShader,
  VkBool32 multiviewTessellationShader
)
{
  VkPhysicalDeviceMultiviewFeatures temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES;
  temp.pNext = nullptr;
  temp.multiview = multiview;
  temp.multiviewGeometryShader = multiviewGeometryShader;
  temp.multiviewTessellationShader = multiviewTessellationShader;

  return temp;
}

inline VkRenderPassMultiviewCreateInfo RenderPassMultiviewCreateInfo(
  uint32_t subpassCount,
  const uint32_t* pViewMasks,
  uint32_t dependencyCount,
  const int32_t* pViewOffsets,
  uint32_t correlationMaskCount,
  const uint32_t* pCorrelationMasks
)
{
  VkRenderPassMultiviewCreateInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO;
  temp.pNext = nullptr;
  temp.subpassCount = subpassCount;
  temp.pViewMasks = pViewMasks;
  temp.dependencyCount = dependencyCount;
  temp.pViewOffsets = pViewOffsets;
  temp.correlationMaskCount = correlationMaskCount;
  temp.pCorrelationMasks = pCorrelationMasks;

  return temp;
}

inline VkDisplayPowerInfoEXT DisplayPowerInfoEXT(
  VkDisplayPowerStateEXT powerState
)
{
  VkDisplayPowerInfoEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT;
  temp.pNext = nullptr;
  temp.powerState = powerState;

  return temp;
}

inline VkDeviceEventInfoEXT DeviceEventInfoEXT(
  VkDeviceEventTypeEXT deviceEvent
)
{
  VkDeviceEventInfoEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT;
  temp.pNext = nullptr;
  temp.deviceEvent = deviceEvent;

  return temp;
}

inline VkDisplayEventInfoEXT DisplayEventInfoEXT(
  VkDisplayEventTypeEXT displayEvent
)
{
  VkDisplayEventInfoEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT;
  temp.pNext = nullptr;
  temp.displayEvent = displayEvent;

  return temp;
}

inline VkSwapchainCounterCreateInfoEXT SwapchainCounterCreateInfoEXT(
  VkSurfaceCounterFlagsEXT surfaceCounters
)
{
  VkSwapchainCounterCreateInfoEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT;
  temp.pNext = nullptr;
  temp.surfaceCounters = surfaceCounters;

  return temp;
}

inline VkMemoryAllocateFlagsInfo MemoryAllocateFlagsInfo(
  VkMemoryAllocateFlags flags,
  uint32_t deviceMask
)
{
  VkMemoryAllocateFlagsInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.deviceMask = deviceMask;

  return temp;
}

inline VkBindBufferMemoryInfo BindBufferMemoryInfo(
  VkBuffer buffer,
  VkDeviceMemory memory,
  VkDeviceSize memoryOffset
)
{
  VkBindBufferMemoryInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO;
  temp.pNext = nullptr;
  temp.buffer = buffer;
  temp.memory = memory;
  temp.memoryOffset = memoryOffset;

  return temp;
}

inline VkBindBufferMemoryDeviceGroupInfo BindBufferMemoryDeviceGroupInfo(
  uint32_t deviceIndexCount,
  const uint32_t* pDeviceIndices
)
{
  VkBindBufferMemoryDeviceGroupInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO;
  temp.pNext = nullptr;
  temp.deviceIndexCount = deviceIndexCount;
  temp.pDeviceIndices = pDeviceIndices;

  return temp;
}

inline VkBindImageMemoryInfo BindImageMemoryInfo(
  VkImage image,
  VkDeviceMemory memory,
  VkDeviceSize memoryOffset
)
{
  VkBindImageMemoryInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO;
  temp.pNext = nullptr;
  temp.image = image;
  temp.memory = memory;
  temp.memoryOffset = memoryOffset;

  return temp;
}

inline VkBindImageMemoryDeviceGroupInfo BindImageMemoryDeviceGroupInfo(
  uint32_t deviceIndexCount,
  const uint32_t* pDeviceIndices,
  uint32_t splitInstanceBindRegionCount,
  const VkRect2D* pSplitInstanceBindRegions
)
{
  VkBindImageMemoryDeviceGroupInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO;
  temp.pNext = nullptr;
  temp.deviceIndexCount = deviceIndexCount;
  temp.pDeviceIndices = pDeviceIndices;
  temp.splitInstanceBindRegionCount = splitInstanceBindRegionCount;
  temp.pSplitInstanceBindRegions = pSplitInstanceBindRegions;

  return temp;
}

inline VkDeviceGroupRenderPassBeginInfo DeviceGroupRenderPassBeginInfo(
  uint32_t deviceMask,
  uint32_t deviceRenderAreaCount,
  const VkRect2D* pDeviceRenderAreas
)
{
  VkDeviceGroupRenderPassBeginInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO;
  temp.pNext = nullptr;
  temp.deviceMask = deviceMask;
  temp.deviceRenderAreaCount = deviceRenderAreaCount;
  temp.pDeviceRenderAreas = pDeviceRenderAreas;

  return temp;
}

inline VkDeviceGroupCommandBufferBeginInfo DeviceGroupCommandBufferBeginInfo(
  uint32_t deviceMask
)
{
  VkDeviceGroupCommandBufferBeginInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO;
  temp.pNext = nullptr;
  temp.deviceMask = deviceMask;

  return temp;
}

inline VkDeviceGroupSubmitInfo DeviceGroupSubmitInfo(
  uint32_t waitSemaphoreCount,
  const uint32_t* pWaitSemaphoreDeviceIndices,
  uint32_t commandBufferCount,
  const uint32_t* pCommandBufferDeviceMasks,
  uint32_t signalSemaphoreCount,
  const uint32_t* pSignalSemaphoreDeviceIndices
)
{
  VkDeviceGroupSubmitInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO;
  temp.pNext = nullptr;
  temp.waitSemaphoreCount = waitSemaphoreCount;
  temp.pWaitSemaphoreDeviceIndices = pWaitSemaphoreDeviceIndices;
  temp.commandBufferCount = commandBufferCount;
  temp.pCommandBufferDeviceMasks = pCommandBufferDeviceMasks;
  temp.signalSemaphoreCount = signalSemaphoreCount;
  temp.pSignalSemaphoreDeviceIndices = pSignalSemaphoreDeviceIndices;

  return temp;
}

inline VkDeviceGroupBindSparseInfo DeviceGroupBindSparseInfo(
  uint32_t resourceDeviceIndex,
  uint32_t memoryDeviceIndex
)
{
  VkDeviceGroupBindSparseInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO;
  temp.pNext = nullptr;
  temp.resourceDeviceIndex = resourceDeviceIndex;
  temp.memoryDeviceIndex = memoryDeviceIndex;

  return temp;
}

inline VkImageSwapchainCreateInfoKHR ImageSwapchainCreateInfoKHR(
  VkSwapchainKHR swapchain
)
{
  VkImageSwapchainCreateInfoKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR;
  temp.pNext = nullptr;
  temp.swapchain = swapchain;

  return temp;
}

inline VkBindImageMemorySwapchainInfoKHR BindImageMemorySwapchainInfoKHR(
  VkSwapchainKHR swapchain,
  uint32_t imageIndex
)
{
  VkBindImageMemorySwapchainInfoKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR;
  temp.pNext = nullptr;
  temp.swapchain = swapchain;
  temp.imageIndex = imageIndex;

  return temp;
}

inline VkAcquireNextImageInfoKHR AcquireNextImageInfoKHR(
  VkSwapchainKHR swapchain,
  uint64_t timeout,
  VkSemaphore semaphore,
  VkFence fence,
  uint32_t deviceMask
)
{
  VkAcquireNextImageInfoKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR;
  temp.pNext = nullptr;
  temp.swapchain = swapchain;
  temp.timeout = timeout;
  temp.semaphore = semaphore;
  temp.fence = fence;
  temp.deviceMask = deviceMask;

  return temp;
}

inline VkDeviceGroupPresentInfoKHR DeviceGroupPresentInfoKHR(
  uint32_t swapchainCount,
  const uint32_t* pDeviceMasks,
  VkDeviceGroupPresentModeFlagBitsKHR mode
)
{
  VkDeviceGroupPresentInfoKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR;
  temp.pNext = nullptr;
  temp.swapchainCount = swapchainCount;
  temp.pDeviceMasks = pDeviceMasks;
  temp.mode = mode;

  return temp;
}

inline VkDeviceGroupDeviceCreateInfo DeviceGroupDeviceCreateInfo(
  uint32_t physicalDeviceCount,
  const VkPhysicalDevice* pPhysicalDevices
)
{
  VkDeviceGroupDeviceCreateInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO;
  temp.pNext = nullptr;
  temp.physicalDeviceCount = physicalDeviceCount;
  temp.pPhysicalDevices = pPhysicalDevices;

  return temp;
}

inline VkDeviceGroupSwapchainCreateInfoKHR DeviceGroupSwapchainCreateInfoKHR(
  VkDeviceGroupPresentModeFlagsKHR modes
)
{
  VkDeviceGroupSwapchainCreateInfoKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR;
  temp.pNext = nullptr;
  temp.modes = modes;

  return temp;
}

inline VkDescriptorUpdateTemplateCreateInfo DescriptorUpdateTemplateCreateInfo(
  VkDescriptorUpdateTemplateCreateFlags flags,
  uint32_t descriptorUpdateEntryCount,
  const VkDescriptorUpdateTemplateEntry* pDescriptorUpdateEntries,
  VkDescriptorUpdateTemplateType templateType,
  VkDescriptorSetLayout descriptorSetLayout,
  VkPipelineBindPoint pipelineBindPoint,
  VkPipelineLayout pipelineLayout,
  uint32_t set
)
{
  VkDescriptorUpdateTemplateCreateInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.descriptorUpdateEntryCount = descriptorUpdateEntryCount;
  temp.pDescriptorUpdateEntries = pDescriptorUpdateEntries;
  temp.templateType = templateType;
  temp.descriptorSetLayout = descriptorSetLayout;
  temp.pipelineBindPoint = pipelineBindPoint;
  temp.pipelineLayout = pipelineLayout;
  temp.set = set;

  return temp;
}

inline VkHdrMetadataEXT HdrMetadataEXT(
  VkXYColorEXT displayPrimaryRed,
  VkXYColorEXT displayPrimaryGreen,
  VkXYColorEXT displayPrimaryBlue,
  VkXYColorEXT whitePoint,
  float maxLuminance,
  float minLuminance,
  float maxContentLightLevel,
  float maxFrameAverageLightLevel
)
{
  VkHdrMetadataEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_HDR_METADATA_EXT;
  temp.pNext = nullptr;
  temp.displayPrimaryRed = displayPrimaryRed;
  temp.displayPrimaryGreen = displayPrimaryGreen;
  temp.displayPrimaryBlue = displayPrimaryBlue;
  temp.whitePoint = whitePoint;
  temp.maxLuminance = maxLuminance;
  temp.minLuminance = minLuminance;
  temp.maxContentLightLevel = maxContentLightLevel;
  temp.maxFrameAverageLightLevel = maxFrameAverageLightLevel;

  return temp;
}

inline VkSwapchainDisplayNativeHdrCreateInfoAMD SwapchainDisplayNativeHdrCreateInfoAMD(
  VkBool32 localDimmingEnable
)
{
  VkSwapchainDisplayNativeHdrCreateInfoAMD temp;
  temp.sType = VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD;
  temp.pNext = nullptr;
  temp.localDimmingEnable = localDimmingEnable;

  return temp;
}

inline VkPresentTimesInfoGOOGLE PresentTimesInfoGOOGLE(
  uint32_t swapchainCount,
  const VkPresentTimeGOOGLE* pTimes
)
{
  VkPresentTimesInfoGOOGLE temp;
  temp.sType = VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE;
  temp.pNext = nullptr;
  temp.swapchainCount = swapchainCount;
  temp.pTimes = pTimes;

  return temp;
}

#ifdef  VK_USE_PLATFORM_IOS_MVK
inline VkIOSSurfaceCreateInfoMVK IOSSurfaceCreateInfoMVK(
  VkIOSSurfaceCreateFlagsMVK flags,
  const void* pView
)
{
  VkIOSSurfaceCreateInfoMVK temp;
  temp.sType = VK_STRUCTURE_TYPE_IOSS_CREATE_INFO_MVK;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.pView = pView;

  return temp;
}
#endif

#ifdef  VK_USE_PLATFORM_MACOS_MVK
inline VkMacOSSurfaceCreateInfoMVK MacOSSurfaceCreateInfoMVK(
  VkMacOSSurfaceCreateFlagsMVK flags,
  const void* pView
)
{
  VkMacOSSurfaceCreateInfoMVK temp;
  temp.sType = VK_STRUCTURE_TYPE_MAC_OSS_CREATE_INFO_MVK;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.pView = pView;

  return temp;
}
#endif

#ifdef  VK_USE_PLATFORM_METAL_EXT
inline VkMetalSurfaceCreateInfoEXT MetalSurfaceCreateInfoEXT(
  VkMetalSurfaceCreateFlagsEXT flags,
  const CAMetalLayer* pLayer
)
{
  VkMetalSurfaceCreateInfoEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.pLayer = pLayer;

  return temp;
}
#endif

inline VkPipelineViewportWScalingStateCreateInfoNV PipelineViewportWScalingStateCreateInfoNV(
  VkBool32 viewportWScalingEnable,
  uint32_t viewportCount,
  const VkViewportWScalingNV* pViewportWScalings
)
{
  VkPipelineViewportWScalingStateCreateInfoNV temp;
  temp.sType = VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV;
  temp.pNext = nullptr;
  temp.viewportWScalingEnable = viewportWScalingEnable;
  temp.viewportCount = viewportCount;
  temp.pViewportWScalings = pViewportWScalings;

  return temp;
}

inline VkPipelineViewportSwizzleStateCreateInfoNV PipelineViewportSwizzleStateCreateInfoNV(
  VkPipelineViewportSwizzleStateCreateFlagsNV flags,
  uint32_t viewportCount,
  const VkViewportSwizzleNV* pViewportSwizzles
)
{
  VkPipelineViewportSwizzleStateCreateInfoNV temp;
  temp.sType = VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.viewportCount = viewportCount;
  temp.pViewportSwizzles = pViewportSwizzles;

  return temp;
}

inline VkPipelineDiscardRectangleStateCreateInfoEXT PipelineDiscardRectangleStateCreateInfoEXT(
  VkPipelineDiscardRectangleStateCreateFlagsEXT flags,
  VkDiscardRectangleModeEXT discardRectangleMode,
  uint32_t discardRectangleCount,
  const VkRect2D* pDiscardRectangles
)
{
  VkPipelineDiscardRectangleStateCreateInfoEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.discardRectangleMode = discardRectangleMode;
  temp.discardRectangleCount = discardRectangleCount;
  temp.pDiscardRectangles = pDiscardRectangles;

  return temp;
}

inline VkRenderPassInputAttachmentAspectCreateInfo RenderPassInputAttachmentAspectCreateInfo(
  uint32_t aspectReferenceCount,
  const VkInputAttachmentAspectReference* pAspectReferences
)
{
  VkRenderPassInputAttachmentAspectCreateInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO;
  temp.pNext = nullptr;
  temp.aspectReferenceCount = aspectReferenceCount;
  temp.pAspectReferences = pAspectReferences;

  return temp;
}

inline VkPhysicalDeviceSurfaceInfo2KHR PhysicalDeviceSurfaceInfo2KHR(
  VkSurfaceKHR surface
)
{
  VkPhysicalDeviceSurfaceInfo2KHR temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR;
  temp.pNext = nullptr;
  temp.surface = surface;

  return temp;
}

inline VkDisplayPlaneInfo2KHR DisplayPlaneInfo2KHR(
  VkDisplayModeKHR mode,
  uint32_t planeIndex
)
{
  VkDisplayPlaneInfo2KHR temp;
  temp.sType = VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR;
  temp.pNext = nullptr;
  temp.mode = mode;
  temp.planeIndex = planeIndex;

  return temp;
}

inline VkPhysicalDevice16BitStorageFeatures PhysicalDevice16BitStorageFeatures(
  VkBool32 storageBuffer16BitAccess,
  VkBool32 uniformAndStorageBuffer16BitAccess,
  VkBool32 storagePushConstant16,
  VkBool32 storageInputOutput16
)
{
  VkPhysicalDevice16BitStorageFeatures temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES;
  temp.pNext = nullptr;
  temp.storageBuffer16BitAccess = storageBuffer16BitAccess;
  temp.uniformAndStorageBuffer16BitAccess = uniformAndStorageBuffer16BitAccess;
  temp.storagePushConstant16 = storagePushConstant16;
  temp.storageInputOutput16 = storageInputOutput16;

  return temp;
}

inline VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures PhysicalDeviceShaderSubgroupExtendedTypesFeatures(
  VkBool32 shaderSubgroupExtendedTypes
)
{
  VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES;
  temp.pNext = nullptr;
  temp.shaderSubgroupExtendedTypes = shaderSubgroupExtendedTypes;

  return temp;
}

inline VkBufferMemoryRequirementsInfo2 BufferMemoryRequirementsInfo2(
  VkBuffer buffer
)
{
  VkBufferMemoryRequirementsInfo2 temp;
  temp.sType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2;
  temp.pNext = nullptr;
  temp.buffer = buffer;

  return temp;
}

inline VkImageMemoryRequirementsInfo2 ImageMemoryRequirementsInfo2(
  VkImage image
)
{
  VkImageMemoryRequirementsInfo2 temp;
  temp.sType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2;
  temp.pNext = nullptr;
  temp.image = image;

  return temp;
}

inline VkImageSparseMemoryRequirementsInfo2 ImageSparseMemoryRequirementsInfo2(
  VkImage image
)
{
  VkImageSparseMemoryRequirementsInfo2 temp;
  temp.sType = VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2;
  temp.pNext = nullptr;
  temp.image = image;

  return temp;
}

inline VkMemoryDedicatedAllocateInfo MemoryDedicatedAllocateInfo(
  VkImage image,
  VkBuffer buffer
)
{
  VkMemoryDedicatedAllocateInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO;
  temp.pNext = nullptr;
  temp.image = image;
  temp.buffer = buffer;

  return temp;
}

inline VkImageViewUsageCreateInfo ImageViewUsageCreateInfo(
  VkImageUsageFlags usage
)
{
  VkImageViewUsageCreateInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO;
  temp.pNext = nullptr;
  temp.usage = usage;

  return temp;
}

inline VkPipelineTessellationDomainOriginStateCreateInfo PipelineTessellationDomainOriginStateCreateInfo(
  VkTessellationDomainOrigin domainOrigin
)
{
  VkPipelineTessellationDomainOriginStateCreateInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO;
  temp.pNext = nullptr;
  temp.domainOrigin = domainOrigin;

  return temp;
}

inline VkSamplerYcbcrConversionInfo SamplerYcbcrConversionInfo(
  VkSamplerYcbcrConversion conversion
)
{
  VkSamplerYcbcrConversionInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO;
  temp.pNext = nullptr;
  temp.conversion = conversion;

  return temp;
}

inline VkSamplerYcbcrConversionCreateInfo SamplerYcbcrConversionCreateInfo(
  VkFormat format,
  VkSamplerYcbcrModelConversion ycbcrModel,
  VkSamplerYcbcrRange ycbcrRange,
  VkComponentMapping components,
  VkChromaLocation xChromaOffset,
  VkChromaLocation yChromaOffset,
  VkFilter chromaFilter,
  VkBool32 forceExplicitReconstruction
)
{
  VkSamplerYcbcrConversionCreateInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO;
  temp.pNext = nullptr;
  temp.format = format;
  temp.ycbcrModel = ycbcrModel;
  temp.ycbcrRange = ycbcrRange;
  temp.components = components;
  temp.xChromaOffset = xChromaOffset;
  temp.yChromaOffset = yChromaOffset;
  temp.chromaFilter = chromaFilter;
  temp.forceExplicitReconstruction = forceExplicitReconstruction;

  return temp;
}

inline VkBindImagePlaneMemoryInfo BindImagePlaneMemoryInfo(
  VkImageAspectFlagBits planeAspect
)
{
  VkBindImagePlaneMemoryInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO;
  temp.pNext = nullptr;
  temp.planeAspect = planeAspect;

  return temp;
}

inline VkImagePlaneMemoryRequirementsInfo ImagePlaneMemoryRequirementsInfo(
  VkImageAspectFlagBits planeAspect
)
{
  VkImagePlaneMemoryRequirementsInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO;
  temp.pNext = nullptr;
  temp.planeAspect = planeAspect;

  return temp;
}

inline VkPhysicalDeviceSamplerYcbcrConversionFeatures PhysicalDeviceSamplerYcbcrConversionFeatures(
  VkBool32 samplerYcbcrConversion
)
{
  VkPhysicalDeviceSamplerYcbcrConversionFeatures temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES;
  temp.pNext = nullptr;
  temp.samplerYcbcrConversion = samplerYcbcrConversion;

  return temp;
}

inline VkConditionalRenderingBeginInfoEXT ConditionalRenderingBeginInfoEXT(
  VkBuffer buffer,
  VkDeviceSize offset,
  VkConditionalRenderingFlagsEXT flags
)
{
  VkConditionalRenderingBeginInfoEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT;
  temp.pNext = nullptr;
  temp.buffer = buffer;
  temp.offset = offset;
  temp.flags = flags;

  return temp;
}

inline VkProtectedSubmitInfo ProtectedSubmitInfo(
  VkBool32 protectedSubmit
)
{
  VkProtectedSubmitInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO;
  temp.pNext = nullptr;
  temp.protectedSubmit = protectedSubmit;

  return temp;
}

inline VkPhysicalDeviceProtectedMemoryFeatures PhysicalDeviceProtectedMemoryFeatures(
  VkBool32 protectedMemory
)
{
  VkPhysicalDeviceProtectedMemoryFeatures temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES;
  temp.pNext = nullptr;
  temp.protectedMemory = protectedMemory;

  return temp;
}

inline VkDeviceQueueInfo2 DeviceQueueInfo2(
  VkDeviceQueueCreateFlags flags,
  uint32_t queueFamilyIndex,
  uint32_t queueIndex
)
{
  VkDeviceQueueInfo2 temp;
  temp.sType = VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.queueFamilyIndex = queueFamilyIndex;
  temp.queueIndex = queueIndex;

  return temp;
}

inline VkPipelineCoverageToColorStateCreateInfoNV PipelineCoverageToColorStateCreateInfoNV(
  VkPipelineCoverageToColorStateCreateFlagsNV flags,
  VkBool32 coverageToColorEnable,
  uint32_t coverageToColorLocation
)
{
  VkPipelineCoverageToColorStateCreateInfoNV temp;
  temp.sType = VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.coverageToColorEnable = coverageToColorEnable;
  temp.coverageToColorLocation = coverageToColorLocation;

  return temp;
}

inline VkSampleLocationsInfoEXT SampleLocationsInfoEXT(
  VkSampleCountFlagBits sampleLocationsPerPixel,
  VkExtent2D sampleLocationGridSize,
  uint32_t sampleLocationsCount,
  const VkSampleLocationEXT* pSampleLocations
)
{
  VkSampleLocationsInfoEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT;
  temp.pNext = nullptr;
  temp.sampleLocationsPerPixel = sampleLocationsPerPixel;
  temp.sampleLocationGridSize = sampleLocationGridSize;
  temp.sampleLocationsCount = sampleLocationsCount;
  temp.pSampleLocations = pSampleLocations;

  return temp;
}

inline VkRenderPassSampleLocationsBeginInfoEXT RenderPassSampleLocationsBeginInfoEXT(
  uint32_t attachmentInitialSampleLocationsCount,
  const VkAttachmentSampleLocationsEXT* pAttachmentInitialSampleLocations,
  uint32_t postSubpassSampleLocationsCount,
  const VkSubpassSampleLocationsEXT* pPostSubpassSampleLocations
)
{
  VkRenderPassSampleLocationsBeginInfoEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT;
  temp.pNext = nullptr;
  temp.attachmentInitialSampleLocationsCount = attachmentInitialSampleLocationsCount;
  temp.pAttachmentInitialSampleLocations = pAttachmentInitialSampleLocations;
  temp.postSubpassSampleLocationsCount = postSubpassSampleLocationsCount;
  temp.pPostSubpassSampleLocations = pPostSubpassSampleLocations;

  return temp;
}

inline VkPipelineSampleLocationsStateCreateInfoEXT PipelineSampleLocationsStateCreateInfoEXT(
  VkBool32 sampleLocationsEnable,
  VkSampleLocationsInfoEXT sampleLocationsInfo
)
{
  VkPipelineSampleLocationsStateCreateInfoEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT;
  temp.pNext = nullptr;
  temp.sampleLocationsEnable = sampleLocationsEnable;
  temp.sampleLocationsInfo = sampleLocationsInfo;

  return temp;
}

inline VkSamplerReductionModeCreateInfo SamplerReductionModeCreateInfo(
  VkSamplerReductionMode reductionMode
)
{
  VkSamplerReductionModeCreateInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO;
  temp.pNext = nullptr;
  temp.reductionMode = reductionMode;

  return temp;
}

inline VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT PhysicalDeviceBlendOperationAdvancedFeaturesEXT(
  VkBool32 advancedBlendCoherentOperations
)
{
  VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT;
  temp.pNext = nullptr;
  temp.advancedBlendCoherentOperations = advancedBlendCoherentOperations;

  return temp;
}

inline VkPipelineColorBlendAdvancedStateCreateInfoEXT PipelineColorBlendAdvancedStateCreateInfoEXT(
  VkBool32 srcPremultiplied,
  VkBool32 dstPremultiplied,
  VkBlendOverlapEXT blendOverlap
)
{
  VkPipelineColorBlendAdvancedStateCreateInfoEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT;
  temp.pNext = nullptr;
  temp.srcPremultiplied = srcPremultiplied;
  temp.dstPremultiplied = dstPremultiplied;
  temp.blendOverlap = blendOverlap;

  return temp;
}

inline VkPhysicalDeviceInlineUniformBlockFeaturesEXT PhysicalDeviceInlineUniformBlockFeaturesEXT(
  VkBool32 inlineUniformBlock,
  VkBool32 descriptorBindingInlineUniformBlockUpdateAfterBind
)
{
  VkPhysicalDeviceInlineUniformBlockFeaturesEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT;
  temp.pNext = nullptr;
  temp.inlineUniformBlock = inlineUniformBlock;
  temp.descriptorBindingInlineUniformBlockUpdateAfterBind = descriptorBindingInlineUniformBlockUpdateAfterBind;

  return temp;
}

inline VkWriteDescriptorSetInlineUniformBlockEXT WriteDescriptorSetInlineUniformBlockEXT(
  uint32_t dataSize,
  const void* pData
)
{
  VkWriteDescriptorSetInlineUniformBlockEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT;
  temp.pNext = nullptr;
  temp.dataSize = dataSize;
  temp.pData = pData;

  return temp;
}

inline VkDescriptorPoolInlineUniformBlockCreateInfoEXT DescriptorPoolInlineUniformBlockCreateInfoEXT(
  uint32_t maxInlineUniformBlockBindings
)
{
  VkDescriptorPoolInlineUniformBlockCreateInfoEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT;
  temp.pNext = nullptr;
  temp.maxInlineUniformBlockBindings = maxInlineUniformBlockBindings;

  return temp;
}

inline VkPipelineCoverageModulationStateCreateInfoNV PipelineCoverageModulationStateCreateInfoNV(
  VkPipelineCoverageModulationStateCreateFlagsNV flags,
  VkCoverageModulationModeNV coverageModulationMode,
  VkBool32 coverageModulationTableEnable,
  uint32_t coverageModulationTableCount,
  const float* pCoverageModulationTable
)
{
  VkPipelineCoverageModulationStateCreateInfoNV temp;
  temp.sType = VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.coverageModulationMode = coverageModulationMode;
  temp.coverageModulationTableEnable = coverageModulationTableEnable;
  temp.coverageModulationTableCount = coverageModulationTableCount;
  temp.pCoverageModulationTable = pCoverageModulationTable;

  return temp;
}

inline VkImageFormatListCreateInfo ImageFormatListCreateInfo(
  uint32_t viewFormatCount,
  const VkFormat* pViewFormats
)
{
  VkImageFormatListCreateInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO;
  temp.pNext = nullptr;
  temp.viewFormatCount = viewFormatCount;
  temp.pViewFormats = pViewFormats;

  return temp;
}

inline VkValidationCacheCreateInfoEXT ValidationCacheCreateInfoEXT(
  VkValidationCacheCreateFlagsEXT flags,
  size_t initialDataSize,
  const void* pInitialData
)
{
  VkValidationCacheCreateInfoEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.initialDataSize = initialDataSize;
  temp.pInitialData = pInitialData;

  return temp;
}

inline VkShaderModuleValidationCacheCreateInfoEXT ShaderModuleValidationCacheCreateInfoEXT(
  VkValidationCacheEXT validationCache
)
{
  VkShaderModuleValidationCacheCreateInfoEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT;
  temp.pNext = nullptr;
  temp.validationCache = validationCache;

  return temp;
}

inline VkPhysicalDeviceShaderDrawParametersFeatures PhysicalDeviceShaderDrawParametersFeatures(
  VkBool32 shaderDrawParameters
)
{
  VkPhysicalDeviceShaderDrawParametersFeatures temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES;
  temp.pNext = nullptr;
  temp.shaderDrawParameters = shaderDrawParameters;

  return temp;
}

inline VkPhysicalDeviceShaderFloat16Int8Features PhysicalDeviceShaderFloat16Int8Features(
  VkBool32 shaderFloat16,
  VkBool32 shaderInt8
)
{
  VkPhysicalDeviceShaderFloat16Int8Features temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES;
  temp.pNext = nullptr;
  temp.shaderFloat16 = shaderFloat16;
  temp.shaderInt8 = shaderInt8;

  return temp;
}

inline VkPhysicalDeviceHostQueryResetFeatures PhysicalDeviceHostQueryResetFeatures(
  VkBool32 hostQueryReset
)
{
  VkPhysicalDeviceHostQueryResetFeatures temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES;
  temp.pNext = nullptr;
  temp.hostQueryReset = hostQueryReset;

  return temp;
}

#ifdef  VK_USE_PLATFORM_ANDROID_KHR
inline VkNativeBufferANDROID NativeBufferANDROID(
  const void* handle,
  int stride,
  int format,
  int usage,
  VkNativeBufferUsage2ANDROID usage2
)
{
  VkNativeBufferANDROID temp;
  temp.sType = VK_STRUCTURE_TYPE_NATIVE_BUFFER_ANDROID;
  temp.pNext = nullptr;
  temp.handle = handle;
  temp.stride = stride;
  temp.format = format;
  temp.usage = usage;
  temp.usage2 = usage2;

  return temp;
}
#endif

#ifdef  VK_USE_PLATFORM_ANDROID_KHR
inline VkSwapchainImageCreateInfoANDROID SwapchainImageCreateInfoANDROID(
  VkSwapchainImageUsageFlagsANDROID usage
)
{
  VkSwapchainImageCreateInfoANDROID temp;
  temp.sType = VK_STRUCTURE_TYPE_SWAPCHAIN_IMAGE_CREATE_INFO_ANDROID;
  temp.pNext = nullptr;
  temp.usage = usage;

  return temp;
}
#endif

#ifdef  VK_USE_PLATFORM_ANDROID_KHR
inline VkPhysicalDevicePresentationPropertiesANDROID PhysicalDevicePresentationPropertiesANDROID(
  VkBool32 sharedImage
)
{
  VkPhysicalDevicePresentationPropertiesANDROID temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENTATION_PROPERTIES_ANDROID;
  temp.pNext = nullptr;
  temp.sharedImage = sharedImage;

  return temp;
}
#endif

inline VkDeviceQueueGlobalPriorityCreateInfoEXT DeviceQueueGlobalPriorityCreateInfoEXT(
  VkQueueGlobalPriorityEXT globalPriority
)
{
  VkDeviceQueueGlobalPriorityCreateInfoEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT;
  temp.pNext = nullptr;
  temp.globalPriority = globalPriority;

  return temp;
}

inline VkDebugUtilsObjectNameInfoEXT DebugUtilsObjectNameInfoEXT(
  VkObjectType objectType,
  uint64_t objectHandle,
  const char* pObjectName
)
{
  VkDebugUtilsObjectNameInfoEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT;
  temp.pNext = nullptr;
  temp.objectType = objectType;
  temp.objectHandle = objectHandle;
  temp.pObjectName = pObjectName;

  return temp;
}

inline VkDebugUtilsObjectTagInfoEXT DebugUtilsObjectTagInfoEXT(
  VkObjectType objectType,
  uint64_t objectHandle,
  uint64_t tagName,
  size_t tagSize,
  const void* pTag
)
{
  VkDebugUtilsObjectTagInfoEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT;
  temp.pNext = nullptr;
  temp.objectType = objectType;
  temp.objectHandle = objectHandle;
  temp.tagName = tagName;
  temp.tagSize = tagSize;
  temp.pTag = pTag;

  return temp;
}

inline VkDebugUtilsLabelEXT DebugUtilsLabelEXT(
  const char* pLabelName,
  float color[4]
)
{
  VkDebugUtilsLabelEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT;
  temp.pNext = nullptr;
  temp.pLabelName = pLabelName;
  for(size_t i = 0; i < 4; ++i){
    temp.color[i] = color[i];
  }

  return temp;
}

inline VkDebugUtilsMessengerCreateInfoEXT DebugUtilsMessengerCreateInfoEXT(
  VkDebugUtilsMessengerCreateFlagsEXT flags,
  VkDebugUtilsMessageSeverityFlagsEXT messageSeverity,
  VkDebugUtilsMessageTypeFlagsEXT messageType,
  PFN_vkDebugUtilsMessengerCallbackEXT pfnUserCallback,
  void* pUserData
)
{
  VkDebugUtilsMessengerCreateInfoEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.messageSeverity = messageSeverity;
  temp.messageType = messageType;
  temp.pfnUserCallback = pfnUserCallback;
  temp.pUserData = pUserData;

  return temp;
}

inline VkDebugUtilsMessengerCallbackDataEXT DebugUtilsMessengerCallbackDataEXT(
  VkDebugUtilsMessengerCallbackDataFlagsEXT flags,
  const char* pMessageIdName,
  int32_t messageIdNumber,
  const char* pMessage,
  uint32_t queueLabelCount,
  const VkDebugUtilsLabelEXT* pQueueLabels,
  uint32_t cmdBufLabelCount,
  const VkDebugUtilsLabelEXT* pCmdBufLabels,
  uint32_t objectCount,
  const VkDebugUtilsObjectNameInfoEXT* pObjects
)
{
  VkDebugUtilsMessengerCallbackDataEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.pMessageIdName = pMessageIdName;
  temp.messageIdNumber = messageIdNumber;
  temp.pMessage = pMessage;
  temp.queueLabelCount = queueLabelCount;
  temp.pQueueLabels = pQueueLabels;
  temp.cmdBufLabelCount = cmdBufLabelCount;
  temp.pCmdBufLabels = pCmdBufLabels;
  temp.objectCount = objectCount;
  temp.pObjects = pObjects;

  return temp;
}

inline VkPhysicalDeviceDeviceMemoryReportFeaturesEXT PhysicalDeviceDeviceMemoryReportFeaturesEXT(
  VkBool32 deviceMemoryReport
)
{
  VkPhysicalDeviceDeviceMemoryReportFeaturesEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT;
  temp.pNext = nullptr;
  temp.deviceMemoryReport = deviceMemoryReport;

  return temp;
}

inline VkDeviceDeviceMemoryReportCreateInfoEXT DeviceDeviceMemoryReportCreateInfoEXT(
  VkDeviceMemoryReportFlagsEXT flags,
  PFN_vkDeviceMemoryReportCallbackEXT pfnUserCallback,
  void* pUserData
)
{
  VkDeviceDeviceMemoryReportCreateInfoEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.pfnUserCallback = pfnUserCallback;
  temp.pUserData = pUserData;

  return temp;
}

inline VkImportMemoryHostPointerInfoEXT ImportMemoryHostPointerInfoEXT(
  VkExternalMemoryHandleTypeFlagBits handleType,
  void* pHostPointer
)
{
  VkImportMemoryHostPointerInfoEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT;
  temp.pNext = nullptr;
  temp.handleType = handleType;
  temp.pHostPointer = pHostPointer;

  return temp;
}

inline VkCalibratedTimestampInfoEXT CalibratedTimestampInfoEXT(
  VkTimeDomainEXT timeDomain
)
{
  VkCalibratedTimestampInfoEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT;
  temp.pNext = nullptr;
  temp.timeDomain = timeDomain;

  return temp;
}

inline VkPipelineRasterizationConservativeStateCreateInfoEXT PipelineRasterizationConservativeStateCreateInfoEXT(
  VkPipelineRasterizationConservativeStateCreateFlagsEXT flags,
  VkConservativeRasterizationModeEXT conservativeRasterizationMode,
  float extraPrimitiveOverestimationSize
)
{
  VkPipelineRasterizationConservativeStateCreateInfoEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.conservativeRasterizationMode = conservativeRasterizationMode;
  temp.extraPrimitiveOverestimationSize = extraPrimitiveOverestimationSize;

  return temp;
}

inline VkPhysicalDeviceDescriptorIndexingFeatures PhysicalDeviceDescriptorIndexingFeatures(
  VkBool32 shaderInputAttachmentArrayDynamicIndexing,
  VkBool32 shaderUniformTexelBufferArrayDynamicIndexing,
  VkBool32 shaderStorageTexelBufferArrayDynamicIndexing,
  VkBool32 shaderUniformBufferArrayNonUniformIndexing,
  VkBool32 shaderSampledImageArrayNonUniformIndexing,
  VkBool32 shaderStorageBufferArrayNonUniformIndexing,
  VkBool32 shaderStorageImageArrayNonUniformIndexing,
  VkBool32 shaderInputAttachmentArrayNonUniformIndexing,
  VkBool32 shaderUniformTexelBufferArrayNonUniformIndexing,
  VkBool32 shaderStorageTexelBufferArrayNonUniformIndexing,
  VkBool32 descriptorBindingUniformBufferUpdateAfterBind,
  VkBool32 descriptorBindingSampledImageUpdateAfterBind,
  VkBool32 descriptorBindingStorageImageUpdateAfterBind,
  VkBool32 descriptorBindingStorageBufferUpdateAfterBind,
  VkBool32 descriptorBindingUniformTexelBufferUpdateAfterBind,
  VkBool32 descriptorBindingStorageTexelBufferUpdateAfterBind,
  VkBool32 descriptorBindingUpdateUnusedWhilePending,
  VkBool32 descriptorBindingPartiallyBound,
  VkBool32 descriptorBindingVariableDescriptorCount,
  VkBool32 runtimeDescriptorArray
)
{
  VkPhysicalDeviceDescriptorIndexingFeatures temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES;
  temp.pNext = nullptr;
  temp.shaderInputAttachmentArrayDynamicIndexing = shaderInputAttachmentArrayDynamicIndexing;
  temp.shaderUniformTexelBufferArrayDynamicIndexing = shaderUniformTexelBufferArrayDynamicIndexing;
  temp.shaderStorageTexelBufferArrayDynamicIndexing = shaderStorageTexelBufferArrayDynamicIndexing;
  temp.shaderUniformBufferArrayNonUniformIndexing = shaderUniformBufferArrayNonUniformIndexing;
  temp.shaderSampledImageArrayNonUniformIndexing = shaderSampledImageArrayNonUniformIndexing;
  temp.shaderStorageBufferArrayNonUniformIndexing = shaderStorageBufferArrayNonUniformIndexing;
  temp.shaderStorageImageArrayNonUniformIndexing = shaderStorageImageArrayNonUniformIndexing;
  temp.shaderInputAttachmentArrayNonUniformIndexing = shaderInputAttachmentArrayNonUniformIndexing;
  temp.shaderUniformTexelBufferArrayNonUniformIndexing = shaderUniformTexelBufferArrayNonUniformIndexing;
  temp.shaderStorageTexelBufferArrayNonUniformIndexing = shaderStorageTexelBufferArrayNonUniformIndexing;
  temp.descriptorBindingUniformBufferUpdateAfterBind = descriptorBindingUniformBufferUpdateAfterBind;
  temp.descriptorBindingSampledImageUpdateAfterBind = descriptorBindingSampledImageUpdateAfterBind;
  temp.descriptorBindingStorageImageUpdateAfterBind = descriptorBindingStorageImageUpdateAfterBind;
  temp.descriptorBindingStorageBufferUpdateAfterBind = descriptorBindingStorageBufferUpdateAfterBind;
  temp.descriptorBindingUniformTexelBufferUpdateAfterBind = descriptorBindingUniformTexelBufferUpdateAfterBind;
  temp.descriptorBindingStorageTexelBufferUpdateAfterBind = descriptorBindingStorageTexelBufferUpdateAfterBind;
  temp.descriptorBindingUpdateUnusedWhilePending = descriptorBindingUpdateUnusedWhilePending;
  temp.descriptorBindingPartiallyBound = descriptorBindingPartiallyBound;
  temp.descriptorBindingVariableDescriptorCount = descriptorBindingVariableDescriptorCount;
  temp.runtimeDescriptorArray = runtimeDescriptorArray;

  return temp;
}

inline VkDescriptorSetLayoutBindingFlagsCreateInfo DescriptorSetLayoutBindingFlagsCreateInfo(
  uint32_t bindingCount,
  const VkDescriptorBindingFlags* pBindingFlags
)
{
  VkDescriptorSetLayoutBindingFlagsCreateInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO;
  temp.pNext = nullptr;
  temp.bindingCount = bindingCount;
  temp.pBindingFlags = pBindingFlags;

  return temp;
}

inline VkDescriptorSetVariableDescriptorCountAllocateInfo DescriptorSetVariableDescriptorCountAllocateInfo(
  uint32_t descriptorSetCount,
  const uint32_t* pDescriptorCounts
)
{
  VkDescriptorSetVariableDescriptorCountAllocateInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO;
  temp.pNext = nullptr;
  temp.descriptorSetCount = descriptorSetCount;
  temp.pDescriptorCounts = pDescriptorCounts;

  return temp;
}

inline VkAttachmentDescription2 AttachmentDescription2(
  VkAttachmentDescriptionFlags flags,
  VkFormat format,
  VkSampleCountFlagBits samples,
  VkAttachmentLoadOp loadOp,
  VkAttachmentStoreOp storeOp,
  VkAttachmentLoadOp stencilLoadOp,
  VkAttachmentStoreOp stencilStoreOp,
  VkImageLayout initialLayout,
  VkImageLayout finalLayout
)
{
  VkAttachmentDescription2 temp;
  temp.sType = VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.format = format;
  temp.samples = samples;
  temp.loadOp = loadOp;
  temp.storeOp = storeOp;
  temp.stencilLoadOp = stencilLoadOp;
  temp.stencilStoreOp = stencilStoreOp;
  temp.initialLayout = initialLayout;
  temp.finalLayout = finalLayout;

  return temp;
}

inline VkAttachmentReference2 AttachmentReference2(
  uint32_t attachment,
  VkImageLayout layout,
  VkImageAspectFlags aspectMask
)
{
  VkAttachmentReference2 temp;
  temp.sType = VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2;
  temp.pNext = nullptr;
  temp.attachment = attachment;
  temp.layout = layout;
  temp.aspectMask = aspectMask;

  return temp;
}

inline VkSubpassDescription2 SubpassDescription2(
  VkSubpassDescriptionFlags flags,
  VkPipelineBindPoint pipelineBindPoint,
  uint32_t viewMask,
  uint32_t inputAttachmentCount,
  const VkAttachmentReference2* pInputAttachments,
  uint32_t colorAttachmentCount,
  const VkAttachmentReference2* pColorAttachments,
  const VkAttachmentReference2* pResolveAttachments,
  const VkAttachmentReference2* pDepthStencilAttachment,
  uint32_t preserveAttachmentCount,
  const uint32_t* pPreserveAttachments
)
{
  VkSubpassDescription2 temp;
  temp.sType = VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.pipelineBindPoint = pipelineBindPoint;
  temp.viewMask = viewMask;
  temp.inputAttachmentCount = inputAttachmentCount;
  temp.pInputAttachments = pInputAttachments;
  temp.colorAttachmentCount = colorAttachmentCount;
  temp.pColorAttachments = pColorAttachments;
  temp.pResolveAttachments = pResolveAttachments;
  temp.pDepthStencilAttachment = pDepthStencilAttachment;
  temp.preserveAttachmentCount = preserveAttachmentCount;
  temp.pPreserveAttachments = pPreserveAttachments;

  return temp;
}

inline VkSubpassDependency2 SubpassDependency2(
  uint32_t srcSubpass,
  uint32_t dstSubpass,
  VkPipelineStageFlags srcStageMask,
  VkPipelineStageFlags dstStageMask,
  VkAccessFlags srcAccessMask,
  VkAccessFlags dstAccessMask,
  VkDependencyFlags dependencyFlags,
  int32_t viewOffset
)
{
  VkSubpassDependency2 temp;
  temp.sType = VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2;
  temp.pNext = nullptr;
  temp.srcSubpass = srcSubpass;
  temp.dstSubpass = dstSubpass;
  temp.srcStageMask = srcStageMask;
  temp.dstStageMask = dstStageMask;
  temp.srcAccessMask = srcAccessMask;
  temp.dstAccessMask = dstAccessMask;
  temp.dependencyFlags = dependencyFlags;
  temp.viewOffset = viewOffset;

  return temp;
}

inline VkRenderPassCreateInfo2 RenderPassCreateInfo2(
  VkRenderPassCreateFlags flags,
  uint32_t attachmentCount,
  const VkAttachmentDescription2* pAttachments,
  uint32_t subpassCount,
  const VkSubpassDescription2* pSubpasses,
  uint32_t dependencyCount,
  const VkSubpassDependency2* pDependencies,
  uint32_t correlatedViewMaskCount,
  const uint32_t* pCorrelatedViewMasks
)
{
  VkRenderPassCreateInfo2 temp;
  temp.sType = VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.attachmentCount = attachmentCount;
  temp.pAttachments = pAttachments;
  temp.subpassCount = subpassCount;
  temp.pSubpasses = pSubpasses;
  temp.dependencyCount = dependencyCount;
  temp.pDependencies = pDependencies;
  temp.correlatedViewMaskCount = correlatedViewMaskCount;
  temp.pCorrelatedViewMasks = pCorrelatedViewMasks;

  return temp;
}

inline VkSubpassBeginInfo SubpassBeginInfo(
  VkSubpassContents contents
)
{
  VkSubpassBeginInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO;
  temp.pNext = nullptr;
  temp.contents = contents;

  return temp;
}

inline VkPhysicalDeviceTimelineSemaphoreFeatures PhysicalDeviceTimelineSemaphoreFeatures(
  VkBool32 timelineSemaphore
)
{
  VkPhysicalDeviceTimelineSemaphoreFeatures temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES;
  temp.pNext = nullptr;
  temp.timelineSemaphore = timelineSemaphore;

  return temp;
}

inline VkSemaphoreTypeCreateInfo SemaphoreTypeCreateInfo(
  VkSemaphoreType semaphoreType,
  uint64_t initialValue
)
{
  VkSemaphoreTypeCreateInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO;
  temp.pNext = nullptr;
  temp.semaphoreType = semaphoreType;
  temp.initialValue = initialValue;

  return temp;
}

inline VkTimelineSemaphoreSubmitInfo TimelineSemaphoreSubmitInfo(
  uint32_t waitSemaphoreValueCount,
  const uint64_t* pWaitSemaphoreValues,
  uint32_t signalSemaphoreValueCount,
  const uint64_t* pSignalSemaphoreValues
)
{
  VkTimelineSemaphoreSubmitInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO;
  temp.pNext = nullptr;
  temp.waitSemaphoreValueCount = waitSemaphoreValueCount;
  temp.pWaitSemaphoreValues = pWaitSemaphoreValues;
  temp.signalSemaphoreValueCount = signalSemaphoreValueCount;
  temp.pSignalSemaphoreValues = pSignalSemaphoreValues;

  return temp;
}

inline VkSemaphoreWaitInfo SemaphoreWaitInfo(
  VkSemaphoreWaitFlags flags,
  uint32_t semaphoreCount,
  const VkSemaphore* pSemaphores,
  const uint64_t* pValues
)
{
  VkSemaphoreWaitInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.semaphoreCount = semaphoreCount;
  temp.pSemaphores = pSemaphores;
  temp.pValues = pValues;

  return temp;
}

inline VkSemaphoreSignalInfo SemaphoreSignalInfo(
  VkSemaphore semaphore,
  uint64_t value
)
{
  VkSemaphoreSignalInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO;
  temp.pNext = nullptr;
  temp.semaphore = semaphore;
  temp.value = value;

  return temp;
}

inline VkPipelineVertexInputDivisorStateCreateInfoEXT PipelineVertexInputDivisorStateCreateInfoEXT(
  uint32_t vertexBindingDivisorCount,
  const VkVertexInputBindingDivisorDescriptionEXT* pVertexBindingDivisors
)
{
  VkPipelineVertexInputDivisorStateCreateInfoEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT;
  temp.pNext = nullptr;
  temp.vertexBindingDivisorCount = vertexBindingDivisorCount;
  temp.pVertexBindingDivisors = pVertexBindingDivisors;

  return temp;
}

#ifdef  VK_USE_PLATFORM_ANDROID_KHR
inline VkImportAndroidHardwareBufferInfoANDROID ImportAndroidHardwareBufferInfoANDROID(
  AHardwareBuffer* buffer
)
{
  VkImportAndroidHardwareBufferInfoANDROID temp;
  temp.sType = VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID;
  temp.pNext = nullptr;
  temp.buffer = buffer;

  return temp;
}
#endif

#ifdef  VK_USE_PLATFORM_ANDROID_KHR
inline VkMemoryGetAndroidHardwareBufferInfoANDROID MemoryGetAndroidHardwareBufferInfoANDROID(
  VkDeviceMemory memory
)
{
  VkMemoryGetAndroidHardwareBufferInfoANDROID temp;
  temp.sType = VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID;
  temp.pNext = nullptr;
  temp.memory = memory;

  return temp;
}
#endif

inline VkCommandBufferInheritanceConditionalRenderingInfoEXT CommandBufferInheritanceConditionalRenderingInfoEXT(
  VkBool32 conditionalRenderingEnable
)
{
  VkCommandBufferInheritanceConditionalRenderingInfoEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT;
  temp.pNext = nullptr;
  temp.conditionalRenderingEnable = conditionalRenderingEnable;

  return temp;
}

#ifdef  VK_USE_PLATFORM_ANDROID_KHR
inline VkExternalFormatANDROID ExternalFormatANDROID(
  uint64_t externalFormat
)
{
  VkExternalFormatANDROID temp;
  temp.sType = VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID;
  temp.pNext = nullptr;
  temp.externalFormat = externalFormat;

  return temp;
}
#endif

inline VkPhysicalDevice8BitStorageFeatures PhysicalDevice8BitStorageFeatures(
  VkBool32 storageBuffer8BitAccess,
  VkBool32 uniformAndStorageBuffer8BitAccess,
  VkBool32 storagePushConstant8
)
{
  VkPhysicalDevice8BitStorageFeatures temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES;
  temp.pNext = nullptr;
  temp.storageBuffer8BitAccess = storageBuffer8BitAccess;
  temp.uniformAndStorageBuffer8BitAccess = uniformAndStorageBuffer8BitAccess;
  temp.storagePushConstant8 = storagePushConstant8;

  return temp;
}

inline VkPhysicalDeviceConditionalRenderingFeaturesEXT PhysicalDeviceConditionalRenderingFeaturesEXT(
  VkBool32 conditionalRendering,
  VkBool32 inheritedConditionalRendering
)
{
  VkPhysicalDeviceConditionalRenderingFeaturesEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT;
  temp.pNext = nullptr;
  temp.conditionalRendering = conditionalRendering;
  temp.inheritedConditionalRendering = inheritedConditionalRendering;

  return temp;
}

inline VkPhysicalDeviceVulkanMemoryModelFeatures PhysicalDeviceVulkanMemoryModelFeatures(
  VkBool32 vulkanMemoryModel,
  VkBool32 vulkanMemoryModelDeviceScope,
  VkBool32 vulkanMemoryModelAvailabilityVisibilityChains
)
{
  VkPhysicalDeviceVulkanMemoryModelFeatures temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES;
  temp.pNext = nullptr;
  temp.vulkanMemoryModel = vulkanMemoryModel;
  temp.vulkanMemoryModelDeviceScope = vulkanMemoryModelDeviceScope;
  temp.vulkanMemoryModelAvailabilityVisibilityChains = vulkanMemoryModelAvailabilityVisibilityChains;

  return temp;
}

inline VkPhysicalDeviceShaderAtomicInt64Features PhysicalDeviceShaderAtomicInt64Features(
  VkBool32 shaderBufferInt64Atomics,
  VkBool32 shaderSharedInt64Atomics
)
{
  VkPhysicalDeviceShaderAtomicInt64Features temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES;
  temp.pNext = nullptr;
  temp.shaderBufferInt64Atomics = shaderBufferInt64Atomics;
  temp.shaderSharedInt64Atomics = shaderSharedInt64Atomics;

  return temp;
}

inline VkPhysicalDeviceShaderAtomicFloatFeaturesEXT PhysicalDeviceShaderAtomicFloatFeaturesEXT(
  VkBool32 shaderBufferFloat32Atomics,
  VkBool32 shaderBufferFloat32AtomicAdd,
  VkBool32 shaderBufferFloat64Atomics,
  VkBool32 shaderBufferFloat64AtomicAdd,
  VkBool32 shaderSharedFloat32Atomics,
  VkBool32 shaderSharedFloat32AtomicAdd,
  VkBool32 shaderSharedFloat64Atomics,
  VkBool32 shaderSharedFloat64AtomicAdd,
  VkBool32 shaderImageFloat32Atomics,
  VkBool32 shaderImageFloat32AtomicAdd,
  VkBool32 sparseImageFloat32Atomics,
  VkBool32 sparseImageFloat32AtomicAdd
)
{
  VkPhysicalDeviceShaderAtomicFloatFeaturesEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT;
  temp.pNext = nullptr;
  temp.shaderBufferFloat32Atomics = shaderBufferFloat32Atomics;
  temp.shaderBufferFloat32AtomicAdd = shaderBufferFloat32AtomicAdd;
  temp.shaderBufferFloat64Atomics = shaderBufferFloat64Atomics;
  temp.shaderBufferFloat64AtomicAdd = shaderBufferFloat64AtomicAdd;
  temp.shaderSharedFloat32Atomics = shaderSharedFloat32Atomics;
  temp.shaderSharedFloat32AtomicAdd = shaderSharedFloat32AtomicAdd;
  temp.shaderSharedFloat64Atomics = shaderSharedFloat64Atomics;
  temp.shaderSharedFloat64AtomicAdd = shaderSharedFloat64AtomicAdd;
  temp.shaderImageFloat32Atomics = shaderImageFloat32Atomics;
  temp.shaderImageFloat32AtomicAdd = shaderImageFloat32AtomicAdd;
  temp.sparseImageFloat32Atomics = sparseImageFloat32Atomics;
  temp.sparseImageFloat32AtomicAdd = sparseImageFloat32AtomicAdd;

  return temp;
}

inline VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT PhysicalDeviceVertexAttributeDivisorFeaturesEXT(
  VkBool32 vertexAttributeInstanceRateDivisor,
  VkBool32 vertexAttributeInstanceRateZeroDivisor
)
{
  VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT;
  temp.pNext = nullptr;
  temp.vertexAttributeInstanceRateDivisor = vertexAttributeInstanceRateDivisor;
  temp.vertexAttributeInstanceRateZeroDivisor = vertexAttributeInstanceRateZeroDivisor;

  return temp;
}

inline VkSubpassDescriptionDepthStencilResolve SubpassDescriptionDepthStencilResolve(
  VkResolveModeFlagBits depthResolveMode,
  VkResolveModeFlagBits stencilResolveMode,
  const VkAttachmentReference2* pDepthStencilResolveAttachment
)
{
  VkSubpassDescriptionDepthStencilResolve temp;
  temp.sType = VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE;
  temp.pNext = nullptr;
  temp.depthResolveMode = depthResolveMode;
  temp.stencilResolveMode = stencilResolveMode;
  temp.pDepthStencilResolveAttachment = pDepthStencilResolveAttachment;

  return temp;
}

inline VkImageViewASTCDecodeModeEXT ImageViewASTCDecodeModeEXT(
  VkFormat decodeMode
)
{
  VkImageViewASTCDecodeModeEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT;
  temp.pNext = nullptr;
  temp.decodeMode = decodeMode;

  return temp;
}

inline VkPhysicalDeviceASTCDecodeFeaturesEXT PhysicalDeviceASTCDecodeFeaturesEXT(
  VkBool32 decodeModeSharedExponent
)
{
  VkPhysicalDeviceASTCDecodeFeaturesEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT;
  temp.pNext = nullptr;
  temp.decodeModeSharedExponent = decodeModeSharedExponent;

  return temp;
}

inline VkPhysicalDeviceTransformFeedbackFeaturesEXT PhysicalDeviceTransformFeedbackFeaturesEXT(
  VkBool32 transformFeedback,
  VkBool32 geometryStreams
)
{
  VkPhysicalDeviceTransformFeedbackFeaturesEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT;
  temp.pNext = nullptr;
  temp.transformFeedback = transformFeedback;
  temp.geometryStreams = geometryStreams;

  return temp;
}

inline VkPipelineRasterizationStateStreamCreateInfoEXT PipelineRasterizationStateStreamCreateInfoEXT(
  VkPipelineRasterizationStateStreamCreateFlagsEXT flags,
  uint32_t rasterizationStream
)
{
  VkPipelineRasterizationStateStreamCreateInfoEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.rasterizationStream = rasterizationStream;

  return temp;
}

inline VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV PhysicalDeviceRepresentativeFragmentTestFeaturesNV(
  VkBool32 representativeFragmentTest
)
{
  VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV;
  temp.pNext = nullptr;
  temp.representativeFragmentTest = representativeFragmentTest;

  return temp;
}

inline VkPipelineRepresentativeFragmentTestStateCreateInfoNV PipelineRepresentativeFragmentTestStateCreateInfoNV(
  VkBool32 representativeFragmentTestEnable
)
{
  VkPipelineRepresentativeFragmentTestStateCreateInfoNV temp;
  temp.sType = VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV;
  temp.pNext = nullptr;
  temp.representativeFragmentTestEnable = representativeFragmentTestEnable;

  return temp;
}

inline VkPhysicalDeviceExclusiveScissorFeaturesNV PhysicalDeviceExclusiveScissorFeaturesNV(
  VkBool32 exclusiveScissor
)
{
  VkPhysicalDeviceExclusiveScissorFeaturesNV temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV;
  temp.pNext = nullptr;
  temp.exclusiveScissor = exclusiveScissor;

  return temp;
}

inline VkPipelineViewportExclusiveScissorStateCreateInfoNV PipelineViewportExclusiveScissorStateCreateInfoNV(
  uint32_t exclusiveScissorCount,
  const VkRect2D* pExclusiveScissors
)
{
  VkPipelineViewportExclusiveScissorStateCreateInfoNV temp;
  temp.sType = VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV;
  temp.pNext = nullptr;
  temp.exclusiveScissorCount = exclusiveScissorCount;
  temp.pExclusiveScissors = pExclusiveScissors;

  return temp;
}

inline VkPhysicalDeviceCornerSampledImageFeaturesNV PhysicalDeviceCornerSampledImageFeaturesNV(
  VkBool32 cornerSampledImage
)
{
  VkPhysicalDeviceCornerSampledImageFeaturesNV temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV;
  temp.pNext = nullptr;
  temp.cornerSampledImage = cornerSampledImage;

  return temp;
}

inline VkPhysicalDeviceComputeShaderDerivativesFeaturesNV PhysicalDeviceComputeShaderDerivativesFeaturesNV(
  VkBool32 computeDerivativeGroupQuads,
  VkBool32 computeDerivativeGroupLinear
)
{
  VkPhysicalDeviceComputeShaderDerivativesFeaturesNV temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV;
  temp.pNext = nullptr;
  temp.computeDerivativeGroupQuads = computeDerivativeGroupQuads;
  temp.computeDerivativeGroupLinear = computeDerivativeGroupLinear;

  return temp;
}

inline VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV PhysicalDeviceFragmentShaderBarycentricFeaturesNV(
  VkBool32 fragmentShaderBarycentric
)
{
  VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV;
  temp.pNext = nullptr;
  temp.fragmentShaderBarycentric = fragmentShaderBarycentric;

  return temp;
}

inline VkPhysicalDeviceShaderImageFootprintFeaturesNV PhysicalDeviceShaderImageFootprintFeaturesNV(
  VkBool32 imageFootprint
)
{
  VkPhysicalDeviceShaderImageFootprintFeaturesNV temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV;
  temp.pNext = nullptr;
  temp.imageFootprint = imageFootprint;

  return temp;
}

inline VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV PhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV(
  VkBool32 dedicatedAllocationImageAliasing
)
{
  VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV;
  temp.pNext = nullptr;
  temp.dedicatedAllocationImageAliasing = dedicatedAllocationImageAliasing;

  return temp;
}

inline VkPipelineViewportShadingRateImageStateCreateInfoNV PipelineViewportShadingRateImageStateCreateInfoNV(
  VkBool32 shadingRateImageEnable,
  uint32_t viewportCount,
  const VkShadingRatePaletteNV* pShadingRatePalettes
)
{
  VkPipelineViewportShadingRateImageStateCreateInfoNV temp;
  temp.sType = VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV;
  temp.pNext = nullptr;
  temp.shadingRateImageEnable = shadingRateImageEnable;
  temp.viewportCount = viewportCount;
  temp.pShadingRatePalettes = pShadingRatePalettes;

  return temp;
}

inline VkPhysicalDeviceShadingRateImageFeaturesNV PhysicalDeviceShadingRateImageFeaturesNV(
  VkBool32 shadingRateImage,
  VkBool32 shadingRateCoarseSampleOrder
)
{
  VkPhysicalDeviceShadingRateImageFeaturesNV temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV;
  temp.pNext = nullptr;
  temp.shadingRateImage = shadingRateImage;
  temp.shadingRateCoarseSampleOrder = shadingRateCoarseSampleOrder;

  return temp;
}

inline VkPipelineViewportCoarseSampleOrderStateCreateInfoNV PipelineViewportCoarseSampleOrderStateCreateInfoNV(
  VkCoarseSampleOrderTypeNV sampleOrderType,
  uint32_t customSampleOrderCount,
  const VkCoarseSampleOrderCustomNV* pCustomSampleOrders
)
{
  VkPipelineViewportCoarseSampleOrderStateCreateInfoNV temp;
  temp.sType = VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV;
  temp.pNext = nullptr;
  temp.sampleOrderType = sampleOrderType;
  temp.customSampleOrderCount = customSampleOrderCount;
  temp.pCustomSampleOrders = pCustomSampleOrders;

  return temp;
}

inline VkPhysicalDeviceMeshShaderFeaturesNV PhysicalDeviceMeshShaderFeaturesNV(
  VkBool32 taskShader,
  VkBool32 meshShader
)
{
  VkPhysicalDeviceMeshShaderFeaturesNV temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV;
  temp.pNext = nullptr;
  temp.taskShader = taskShader;
  temp.meshShader = meshShader;

  return temp;
}

inline VkRayTracingShaderGroupCreateInfoNV RayTracingShaderGroupCreateInfoNV(
  VkRayTracingShaderGroupTypeKHR type,
  uint32_t generalShader,
  uint32_t closestHitShader,
  uint32_t anyHitShader,
  uint32_t intersectionShader
)
{
  VkRayTracingShaderGroupCreateInfoNV temp;
  temp.sType = VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV;
  temp.pNext = nullptr;
  temp.type = type;
  temp.generalShader = generalShader;
  temp.closestHitShader = closestHitShader;
  temp.anyHitShader = anyHitShader;
  temp.intersectionShader = intersectionShader;

  return temp;
}

inline VkRayTracingShaderGroupCreateInfoKHR RayTracingShaderGroupCreateInfoKHR(
  VkRayTracingShaderGroupTypeKHR type,
  uint32_t generalShader,
  uint32_t closestHitShader,
  uint32_t anyHitShader,
  uint32_t intersectionShader,
  const void* pShaderGroupCaptureReplayHandle
)
{
  VkRayTracingShaderGroupCreateInfoKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR;
  temp.pNext = nullptr;
  temp.type = type;
  temp.generalShader = generalShader;
  temp.closestHitShader = closestHitShader;
  temp.anyHitShader = anyHitShader;
  temp.intersectionShader = intersectionShader;
  temp.pShaderGroupCaptureReplayHandle = pShaderGroupCaptureReplayHandle;

  return temp;
}

inline VkRayTracingPipelineCreateInfoNV RayTracingPipelineCreateInfoNV(
  VkPipelineCreateFlags flags,
  uint32_t stageCount,
  const VkPipelineShaderStageCreateInfo* pStages,
  uint32_t groupCount,
  const VkRayTracingShaderGroupCreateInfoNV* pGroups,
  uint32_t maxRecursionDepth,
  VkPipelineLayout layout,
  VkPipeline basePipelineHandle,
  int32_t basePipelineIndex
)
{
  VkRayTracingPipelineCreateInfoNV temp;
  temp.sType = VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.stageCount = stageCount;
  temp.pStages = pStages;
  temp.groupCount = groupCount;
  temp.pGroups = pGroups;
  temp.maxRecursionDepth = maxRecursionDepth;
  temp.layout = layout;
  temp.basePipelineHandle = basePipelineHandle;
  temp.basePipelineIndex = basePipelineIndex;

  return temp;
}

inline VkRayTracingPipelineCreateInfoKHR RayTracingPipelineCreateInfoKHR(
  VkPipelineCreateFlags flags,
  uint32_t stageCount,
  const VkPipelineShaderStageCreateInfo* pStages,
  uint32_t groupCount,
  const VkRayTracingShaderGroupCreateInfoKHR* pGroups,
  uint32_t maxPipelineRayRecursionDepth,
  const VkPipelineLibraryCreateInfoKHR* pLibraryInfo,
  const VkRayTracingPipelineInterfaceCreateInfoKHR* pLibraryInterface,
  const VkPipelineDynamicStateCreateInfo* pDynamicState,
  VkPipelineLayout layout,
  VkPipeline basePipelineHandle,
  int32_t basePipelineIndex
)
{
  VkRayTracingPipelineCreateInfoKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.stageCount = stageCount;
  temp.pStages = pStages;
  temp.groupCount = groupCount;
  temp.pGroups = pGroups;
  temp.maxPipelineRayRecursionDepth = maxPipelineRayRecursionDepth;
  temp.pLibraryInfo = pLibraryInfo;
  temp.pLibraryInterface = pLibraryInterface;
  temp.pDynamicState = pDynamicState;
  temp.layout = layout;
  temp.basePipelineHandle = basePipelineHandle;
  temp.basePipelineIndex = basePipelineIndex;

  return temp;
}

inline VkGeometryTrianglesNV GeometryTrianglesNV(
  VkBuffer vertexData,
  VkDeviceSize vertexOffset,
  uint32_t vertexCount,
  VkDeviceSize vertexStride,
  VkFormat vertexFormat,
  VkBuffer indexData,
  VkDeviceSize indexOffset,
  uint32_t indexCount,
  VkIndexType indexType,
  VkBuffer transformData,
  VkDeviceSize transformOffset
)
{
  VkGeometryTrianglesNV temp;
  temp.sType = VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV;
  temp.pNext = nullptr;
  temp.vertexData = vertexData;
  temp.vertexOffset = vertexOffset;
  temp.vertexCount = vertexCount;
  temp.vertexStride = vertexStride;
  temp.vertexFormat = vertexFormat;
  temp.indexData = indexData;
  temp.indexOffset = indexOffset;
  temp.indexCount = indexCount;
  temp.indexType = indexType;
  temp.transformData = transformData;
  temp.transformOffset = transformOffset;

  return temp;
}

inline VkGeometryAABBNV GeometryAABBNV(
  VkBuffer aabbData,
  uint32_t numAABBs,
  uint32_t stride,
  VkDeviceSize offset
)
{
  VkGeometryAABBNV temp;
  temp.sType = VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV;
  temp.pNext = nullptr;
  temp.aabbData = aabbData;
  temp.numAABBs = numAABBs;
  temp.stride = stride;
  temp.offset = offset;

  return temp;
}

inline VkGeometryNV GeometryNV(
  VkGeometryTypeKHR geometryType,
  VkGeometryDataNV geometry,
  VkGeometryFlagsKHR flags
)
{
  VkGeometryNV temp;
  temp.sType = VK_STRUCTURE_TYPE_GEOMETRY_NV;
  temp.pNext = nullptr;
  temp.geometryType = geometryType;
  temp.geometry = geometry;
  temp.flags = flags;

  return temp;
}

inline VkAccelerationStructureInfoNV AccelerationStructureInfoNV(
  VkAccelerationStructureTypeNV type,
  VkBuildAccelerationStructureFlagsNV flags,
  uint32_t instanceCount,
  uint32_t geometryCount,
  const VkGeometryNV* pGeometries
)
{
  VkAccelerationStructureInfoNV temp;
  temp.sType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV;
  temp.pNext = nullptr;
  temp.type = type;
  temp.flags = flags;
  temp.instanceCount = instanceCount;
  temp.geometryCount = geometryCount;
  temp.pGeometries = pGeometries;

  return temp;
}

inline VkAccelerationStructureCreateInfoNV AccelerationStructureCreateInfoNV(
  VkDeviceSize compactedSize,
  VkAccelerationStructureInfoNV info
)
{
  VkAccelerationStructureCreateInfoNV temp;
  temp.sType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV;
  temp.pNext = nullptr;
  temp.compactedSize = compactedSize;
  temp.info = info;

  return temp;
}

inline VkBindAccelerationStructureMemoryInfoNV BindAccelerationStructureMemoryInfoNV(
  VkAccelerationStructureNV accelerationStructure,
  VkDeviceMemory memory,
  VkDeviceSize memoryOffset,
  uint32_t deviceIndexCount,
  const uint32_t* pDeviceIndices
)
{
  VkBindAccelerationStructureMemoryInfoNV temp;
  temp.sType = VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV;
  temp.pNext = nullptr;
  temp.accelerationStructure = accelerationStructure;
  temp.memory = memory;
  temp.memoryOffset = memoryOffset;
  temp.deviceIndexCount = deviceIndexCount;
  temp.pDeviceIndices = pDeviceIndices;

  return temp;
}

inline VkWriteDescriptorSetAccelerationStructureKHR WriteDescriptorSetAccelerationStructureKHR(
  uint32_t accelerationStructureCount,
  const VkAccelerationStructureKHR* pAccelerationStructures
)
{
  VkWriteDescriptorSetAccelerationStructureKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR;
  temp.pNext = nullptr;
  temp.accelerationStructureCount = accelerationStructureCount;
  temp.pAccelerationStructures = pAccelerationStructures;

  return temp;
}

inline VkWriteDescriptorSetAccelerationStructureNV WriteDescriptorSetAccelerationStructureNV(
  uint32_t accelerationStructureCount,
  const VkAccelerationStructureNV* pAccelerationStructures
)
{
  VkWriteDescriptorSetAccelerationStructureNV temp;
  temp.sType = VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV;
  temp.pNext = nullptr;
  temp.accelerationStructureCount = accelerationStructureCount;
  temp.pAccelerationStructures = pAccelerationStructures;

  return temp;
}

inline VkAccelerationStructureMemoryRequirementsInfoNV AccelerationStructureMemoryRequirementsInfoNV(
  VkAccelerationStructureMemoryRequirementsTypeNV type,
  VkAccelerationStructureNV accelerationStructure
)
{
  VkAccelerationStructureMemoryRequirementsInfoNV temp;
  temp.sType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV;
  temp.pNext = nullptr;
  temp.type = type;
  temp.accelerationStructure = accelerationStructure;

  return temp;
}

inline VkPhysicalDeviceAccelerationStructureFeaturesKHR PhysicalDeviceAccelerationStructureFeaturesKHR(
  VkBool32 accelerationStructure,
  VkBool32 accelerationStructureCaptureReplay,
  VkBool32 accelerationStructureIndirectBuild,
  VkBool32 accelerationStructureHostCommands,
  VkBool32 descriptorBindingAccelerationStructureUpdateAfterBind
)
{
  VkPhysicalDeviceAccelerationStructureFeaturesKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR;
  temp.pNext = nullptr;
  temp.accelerationStructure = accelerationStructure;
  temp.accelerationStructureCaptureReplay = accelerationStructureCaptureReplay;
  temp.accelerationStructureIndirectBuild = accelerationStructureIndirectBuild;
  temp.accelerationStructureHostCommands = accelerationStructureHostCommands;
  temp.descriptorBindingAccelerationStructureUpdateAfterBind = descriptorBindingAccelerationStructureUpdateAfterBind;

  return temp;
}

inline VkPhysicalDeviceRayTracingPipelineFeaturesKHR PhysicalDeviceRayTracingPipelineFeaturesKHR(
  VkBool32 rayTracingPipeline,
  VkBool32 rayTracingPipelineShaderGroupHandleCaptureReplay,
  VkBool32 rayTracingPipelineShaderGroupHandleCaptureReplayMixed,
  VkBool32 rayTracingPipelineTraceRaysIndirect,
  VkBool32 rayTraversalPrimitiveCulling
)
{
  VkPhysicalDeviceRayTracingPipelineFeaturesKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR;
  temp.pNext = nullptr;
  temp.rayTracingPipeline = rayTracingPipeline;
  temp.rayTracingPipelineShaderGroupHandleCaptureReplay = rayTracingPipelineShaderGroupHandleCaptureReplay;
  temp.rayTracingPipelineShaderGroupHandleCaptureReplayMixed = rayTracingPipelineShaderGroupHandleCaptureReplayMixed;
  temp.rayTracingPipelineTraceRaysIndirect = rayTracingPipelineTraceRaysIndirect;
  temp.rayTraversalPrimitiveCulling = rayTraversalPrimitiveCulling;

  return temp;
}

inline VkPhysicalDeviceRayQueryFeaturesKHR PhysicalDeviceRayQueryFeaturesKHR(
  VkBool32 rayQuery
)
{
  VkPhysicalDeviceRayQueryFeaturesKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR;
  temp.pNext = nullptr;
  temp.rayQuery = rayQuery;

  return temp;
}

inline VkPhysicalDeviceImageDrmFormatModifierInfoEXT PhysicalDeviceImageDrmFormatModifierInfoEXT(
  uint64_t drmFormatModifier,
  VkSharingMode sharingMode,
  uint32_t queueFamilyIndexCount,
  const uint32_t* pQueueFamilyIndices
)
{
  VkPhysicalDeviceImageDrmFormatModifierInfoEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT;
  temp.pNext = nullptr;
  temp.drmFormatModifier = drmFormatModifier;
  temp.sharingMode = sharingMode;
  temp.queueFamilyIndexCount = queueFamilyIndexCount;
  temp.pQueueFamilyIndices = pQueueFamilyIndices;

  return temp;
}

inline VkImageDrmFormatModifierListCreateInfoEXT ImageDrmFormatModifierListCreateInfoEXT(
  uint32_t drmFormatModifierCount,
  const uint64_t* pDrmFormatModifiers
)
{
  VkImageDrmFormatModifierListCreateInfoEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT;
  temp.pNext = nullptr;
  temp.drmFormatModifierCount = drmFormatModifierCount;
  temp.pDrmFormatModifiers = pDrmFormatModifiers;

  return temp;
}

inline VkImageDrmFormatModifierExplicitCreateInfoEXT ImageDrmFormatModifierExplicitCreateInfoEXT(
  uint64_t drmFormatModifier,
  uint32_t drmFormatModifierPlaneCount,
  const VkSubresourceLayout* pPlaneLayouts
)
{
  VkImageDrmFormatModifierExplicitCreateInfoEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT;
  temp.pNext = nullptr;
  temp.drmFormatModifier = drmFormatModifier;
  temp.drmFormatModifierPlaneCount = drmFormatModifierPlaneCount;
  temp.pPlaneLayouts = pPlaneLayouts;

  return temp;
}

inline VkImageStencilUsageCreateInfo ImageStencilUsageCreateInfo(
  VkImageUsageFlags stencilUsage
)
{
  VkImageStencilUsageCreateInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO;
  temp.pNext = nullptr;
  temp.stencilUsage = stencilUsage;

  return temp;
}

inline VkDeviceMemoryOverallocationCreateInfoAMD DeviceMemoryOverallocationCreateInfoAMD(
  VkMemoryOverallocationBehaviorAMD overallocationBehavior
)
{
  VkDeviceMemoryOverallocationCreateInfoAMD temp;
  temp.sType = VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD;
  temp.pNext = nullptr;
  temp.overallocationBehavior = overallocationBehavior;

  return temp;
}

inline VkPhysicalDeviceFragmentDensityMapFeaturesEXT PhysicalDeviceFragmentDensityMapFeaturesEXT(
  VkBool32 fragmentDensityMap,
  VkBool32 fragmentDensityMapDynamic,
  VkBool32 fragmentDensityMapNonSubsampledImages
)
{
  VkPhysicalDeviceFragmentDensityMapFeaturesEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT;
  temp.pNext = nullptr;
  temp.fragmentDensityMap = fragmentDensityMap;
  temp.fragmentDensityMapDynamic = fragmentDensityMapDynamic;
  temp.fragmentDensityMapNonSubsampledImages = fragmentDensityMapNonSubsampledImages;

  return temp;
}

inline VkPhysicalDeviceFragmentDensityMap2FeaturesEXT PhysicalDeviceFragmentDensityMap2FeaturesEXT(
  VkBool32 fragmentDensityMapDeferred
)
{
  VkPhysicalDeviceFragmentDensityMap2FeaturesEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT;
  temp.pNext = nullptr;
  temp.fragmentDensityMapDeferred = fragmentDensityMapDeferred;

  return temp;
}

inline VkRenderPassFragmentDensityMapCreateInfoEXT RenderPassFragmentDensityMapCreateInfoEXT(
  VkAttachmentReference fragmentDensityMapAttachment
)
{
  VkRenderPassFragmentDensityMapCreateInfoEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT;
  temp.pNext = nullptr;
  temp.fragmentDensityMapAttachment = fragmentDensityMapAttachment;

  return temp;
}

inline VkPhysicalDeviceScalarBlockLayoutFeatures PhysicalDeviceScalarBlockLayoutFeatures(
  VkBool32 scalarBlockLayout
)
{
  VkPhysicalDeviceScalarBlockLayoutFeatures temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES;
  temp.pNext = nullptr;
  temp.scalarBlockLayout = scalarBlockLayout;

  return temp;
}

inline VkSurfaceProtectedCapabilitiesKHR SurfaceProtectedCapabilitiesKHR(
  VkBool32 supportsProtected
)
{
  VkSurfaceProtectedCapabilitiesKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR;
  temp.pNext = nullptr;
  temp.supportsProtected = supportsProtected;

  return temp;
}

inline VkPhysicalDeviceUniformBufferStandardLayoutFeatures PhysicalDeviceUniformBufferStandardLayoutFeatures(
  VkBool32 uniformBufferStandardLayout
)
{
  VkPhysicalDeviceUniformBufferStandardLayoutFeatures temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES;
  temp.pNext = nullptr;
  temp.uniformBufferStandardLayout = uniformBufferStandardLayout;

  return temp;
}

inline VkPhysicalDeviceDepthClipEnableFeaturesEXT PhysicalDeviceDepthClipEnableFeaturesEXT(
  VkBool32 depthClipEnable
)
{
  VkPhysicalDeviceDepthClipEnableFeaturesEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT;
  temp.pNext = nullptr;
  temp.depthClipEnable = depthClipEnable;

  return temp;
}

inline VkPipelineRasterizationDepthClipStateCreateInfoEXT PipelineRasterizationDepthClipStateCreateInfoEXT(
  VkPipelineRasterizationDepthClipStateCreateFlagsEXT flags,
  VkBool32 depthClipEnable
)
{
  VkPipelineRasterizationDepthClipStateCreateInfoEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.depthClipEnable = depthClipEnable;

  return temp;
}

inline VkPhysicalDeviceMemoryPriorityFeaturesEXT PhysicalDeviceMemoryPriorityFeaturesEXT(
  VkBool32 memoryPriority
)
{
  VkPhysicalDeviceMemoryPriorityFeaturesEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT;
  temp.pNext = nullptr;
  temp.memoryPriority = memoryPriority;

  return temp;
}

inline VkMemoryPriorityAllocateInfoEXT MemoryPriorityAllocateInfoEXT(
  float priority
)
{
  VkMemoryPriorityAllocateInfoEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT;
  temp.pNext = nullptr;
  temp.priority = priority;

  return temp;
}

inline VkPhysicalDeviceBufferDeviceAddressFeatures PhysicalDeviceBufferDeviceAddressFeatures(
  VkBool32 bufferDeviceAddress,
  VkBool32 bufferDeviceAddressCaptureReplay,
  VkBool32 bufferDeviceAddressMultiDevice
)
{
  VkPhysicalDeviceBufferDeviceAddressFeatures temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES;
  temp.pNext = nullptr;
  temp.bufferDeviceAddress = bufferDeviceAddress;
  temp.bufferDeviceAddressCaptureReplay = bufferDeviceAddressCaptureReplay;
  temp.bufferDeviceAddressMultiDevice = bufferDeviceAddressMultiDevice;

  return temp;
}

inline VkPhysicalDeviceBufferDeviceAddressFeaturesEXT PhysicalDeviceBufferDeviceAddressFeaturesEXT(
  VkBool32 bufferDeviceAddress,
  VkBool32 bufferDeviceAddressCaptureReplay,
  VkBool32 bufferDeviceAddressMultiDevice
)
{
  VkPhysicalDeviceBufferDeviceAddressFeaturesEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT;
  temp.pNext = nullptr;
  temp.bufferDeviceAddress = bufferDeviceAddress;
  temp.bufferDeviceAddressCaptureReplay = bufferDeviceAddressCaptureReplay;
  temp.bufferDeviceAddressMultiDevice = bufferDeviceAddressMultiDevice;

  return temp;
}

inline VkBufferDeviceAddressInfo BufferDeviceAddressInfo(
  VkBuffer buffer
)
{
  VkBufferDeviceAddressInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO;
  temp.pNext = nullptr;
  temp.buffer = buffer;

  return temp;
}

inline VkBufferOpaqueCaptureAddressCreateInfo BufferOpaqueCaptureAddressCreateInfo(
  uint64_t opaqueCaptureAddress
)
{
  VkBufferOpaqueCaptureAddressCreateInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO;
  temp.pNext = nullptr;
  temp.opaqueCaptureAddress = opaqueCaptureAddress;

  return temp;
}

inline VkBufferDeviceAddressCreateInfoEXT BufferDeviceAddressCreateInfoEXT(
  VkDeviceAddress deviceAddress
)
{
  VkBufferDeviceAddressCreateInfoEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT;
  temp.pNext = nullptr;
  temp.deviceAddress = deviceAddress;

  return temp;
}

inline VkPhysicalDeviceImageViewImageFormatInfoEXT PhysicalDeviceImageViewImageFormatInfoEXT(
  VkImageViewType imageViewType
)
{
  VkPhysicalDeviceImageViewImageFormatInfoEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT;
  temp.pNext = nullptr;
  temp.imageViewType = imageViewType;

  return temp;
}

inline VkPhysicalDeviceImagelessFramebufferFeatures PhysicalDeviceImagelessFramebufferFeatures(
  VkBool32 imagelessFramebuffer
)
{
  VkPhysicalDeviceImagelessFramebufferFeatures temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES;
  temp.pNext = nullptr;
  temp.imagelessFramebuffer = imagelessFramebuffer;

  return temp;
}

inline VkFramebufferAttachmentsCreateInfo FramebufferAttachmentsCreateInfo(
  uint32_t attachmentImageInfoCount,
  const VkFramebufferAttachmentImageInfo* pAttachmentImageInfos
)
{
  VkFramebufferAttachmentsCreateInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO;
  temp.pNext = nullptr;
  temp.attachmentImageInfoCount = attachmentImageInfoCount;
  temp.pAttachmentImageInfos = pAttachmentImageInfos;

  return temp;
}

inline VkFramebufferAttachmentImageInfo FramebufferAttachmentImageInfo(
  VkImageCreateFlags flags,
  VkImageUsageFlags usage,
  uint32_t width,
  uint32_t height,
  uint32_t layerCount,
  uint32_t viewFormatCount,
  const VkFormat* pViewFormats
)
{
  VkFramebufferAttachmentImageInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.usage = usage;
  temp.width = width;
  temp.height = height;
  temp.layerCount = layerCount;
  temp.viewFormatCount = viewFormatCount;
  temp.pViewFormats = pViewFormats;

  return temp;
}

inline VkRenderPassAttachmentBeginInfo RenderPassAttachmentBeginInfo(
  uint32_t attachmentCount,
  const VkImageView* pAttachments
)
{
  VkRenderPassAttachmentBeginInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO;
  temp.pNext = nullptr;
  temp.attachmentCount = attachmentCount;
  temp.pAttachments = pAttachments;

  return temp;
}

inline VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT PhysicalDeviceTextureCompressionASTCHDRFeaturesEXT(
  VkBool32 textureCompressionASTC_HDR
)
{
  VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT;
  temp.pNext = nullptr;
  temp.textureCompressionASTC_HDR = textureCompressionASTC_HDR;

  return temp;
}

inline VkPhysicalDeviceCooperativeMatrixFeaturesNV PhysicalDeviceCooperativeMatrixFeaturesNV(
  VkBool32 cooperativeMatrix,
  VkBool32 cooperativeMatrixRobustBufferAccess
)
{
  VkPhysicalDeviceCooperativeMatrixFeaturesNV temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV;
  temp.pNext = nullptr;
  temp.cooperativeMatrix = cooperativeMatrix;
  temp.cooperativeMatrixRobustBufferAccess = cooperativeMatrixRobustBufferAccess;

  return temp;
}

inline VkCooperativeMatrixPropertiesNV CooperativeMatrixPropertiesNV(
  uint32_t MSize,
  uint32_t NSize,
  uint32_t KSize,
  VkComponentTypeNV AType,
  VkComponentTypeNV BType,
  VkComponentTypeNV CType,
  VkComponentTypeNV DType,
  VkScopeNV scope
)
{
  VkCooperativeMatrixPropertiesNV temp;
  temp.sType = VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV;
  temp.pNext = nullptr;
  temp.MSize = MSize;
  temp.NSize = NSize;
  temp.KSize = KSize;
  temp.AType = AType;
  temp.BType = BType;
  temp.CType = CType;
  temp.DType = DType;
  temp.scope = scope;

  return temp;
}

inline VkPhysicalDeviceYcbcrImageArraysFeaturesEXT PhysicalDeviceYcbcrImageArraysFeaturesEXT(
  VkBool32 ycbcrImageArrays
)
{
  VkPhysicalDeviceYcbcrImageArraysFeaturesEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT;
  temp.pNext = nullptr;
  temp.ycbcrImageArrays = ycbcrImageArrays;

  return temp;
}

inline VkImageViewHandleInfoNVX ImageViewHandleInfoNVX(
  VkImageView imageView,
  VkDescriptorType descriptorType,
  VkSampler sampler
)
{
  VkImageViewHandleInfoNVX temp;
  temp.sType = VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX;
  temp.pNext = nullptr;
  temp.imageView = imageView;
  temp.descriptorType = descriptorType;
  temp.sampler = sampler;

  return temp;
}

#ifdef  VK_USE_PLATFORM_GGP
inline VkPresentFrameTokenGGP PresentFrameTokenGGP(
  GgpFrameToken frameToken
)
{
  VkPresentFrameTokenGGP temp;
  temp.sType = VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP;
  temp.pNext = nullptr;
  temp.frameToken = frameToken;

  return temp;
}
#endif

inline VkPipelineCreationFeedbackCreateInfoEXT PipelineCreationFeedbackCreateInfoEXT(
  VkPipelineCreationFeedbackEXT* pPipelineCreationFeedback,
  uint32_t pipelineStageCreationFeedbackCount,
  VkPipelineCreationFeedbackEXT* pPipelineStageCreationFeedbacks
)
{
  VkPipelineCreationFeedbackCreateInfoEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT;
  temp.pNext = nullptr;
  temp.pPipelineCreationFeedback = pPipelineCreationFeedback;
  temp.pipelineStageCreationFeedbackCount = pipelineStageCreationFeedbackCount;
  temp.pPipelineStageCreationFeedbacks = pPipelineStageCreationFeedbacks;

  return temp;
}

#ifdef  VK_USE_PLATFORM_WIN32_KHR
inline VkSurfaceFullScreenExclusiveInfoEXT SurfaceFullScreenExclusiveInfoEXT(
  VkFullScreenExclusiveEXT fullScreenExclusive
)
{
  VkSurfaceFullScreenExclusiveInfoEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT;
  temp.pNext = nullptr;
  temp.fullScreenExclusive = fullScreenExclusive;

  return temp;
}
#endif

#ifdef  VK_USE_PLATFORM_WIN32_KHR
inline VkSurfaceFullScreenExclusiveWin32InfoEXT SurfaceFullScreenExclusiveWin32InfoEXT(
  HMONITOR hmonitor
)
{
  VkSurfaceFullScreenExclusiveWin32InfoEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN_32_INFO_EXT;
  temp.pNext = nullptr;
  temp.hmonitor = hmonitor;

  return temp;
}
#endif

#ifdef  VK_USE_PLATFORM_WIN32_KHR
inline VkSurfaceCapabilitiesFullScreenExclusiveEXT SurfaceCapabilitiesFullScreenExclusiveEXT(
  VkBool32 fullScreenExclusiveSupported
)
{
  VkSurfaceCapabilitiesFullScreenExclusiveEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT;
  temp.pNext = nullptr;
  temp.fullScreenExclusiveSupported = fullScreenExclusiveSupported;

  return temp;
}
#endif

inline VkPhysicalDevicePerformanceQueryFeaturesKHR PhysicalDevicePerformanceQueryFeaturesKHR(
  VkBool32 performanceCounterQueryPools,
  VkBool32 performanceCounterMultipleQueryPools
)
{
  VkPhysicalDevicePerformanceQueryFeaturesKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR;
  temp.pNext = nullptr;
  temp.performanceCounterQueryPools = performanceCounterQueryPools;
  temp.performanceCounterMultipleQueryPools = performanceCounterMultipleQueryPools;

  return temp;
}

inline VkQueryPoolPerformanceCreateInfoKHR QueryPoolPerformanceCreateInfoKHR(
  uint32_t queueFamilyIndex,
  uint32_t counterIndexCount,
  const uint32_t* pCounterIndices
)
{
  VkQueryPoolPerformanceCreateInfoKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR;
  temp.pNext = nullptr;
  temp.queueFamilyIndex = queueFamilyIndex;
  temp.counterIndexCount = counterIndexCount;
  temp.pCounterIndices = pCounterIndices;

  return temp;
}

inline VkAcquireProfilingLockInfoKHR AcquireProfilingLockInfoKHR(
  VkAcquireProfilingLockFlagsKHR flags,
  uint64_t timeout
)
{
  VkAcquireProfilingLockInfoKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.timeout = timeout;

  return temp;
}

inline VkPerformanceQuerySubmitInfoKHR PerformanceQuerySubmitInfoKHR(
  uint32_t counterPassIndex
)
{
  VkPerformanceQuerySubmitInfoKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR;
  temp.pNext = nullptr;
  temp.counterPassIndex = counterPassIndex;

  return temp;
}

inline VkHeadlessSurfaceCreateInfoEXT HeadlessSurfaceCreateInfoEXT(
  VkHeadlessSurfaceCreateFlagsEXT flags
)
{
  VkHeadlessSurfaceCreateInfoEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT;
  temp.pNext = nullptr;
  temp.flags = flags;

  return temp;
}

inline VkPhysicalDeviceCoverageReductionModeFeaturesNV PhysicalDeviceCoverageReductionModeFeaturesNV(
  VkBool32 coverageReductionMode
)
{
  VkPhysicalDeviceCoverageReductionModeFeaturesNV temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV;
  temp.pNext = nullptr;
  temp.coverageReductionMode = coverageReductionMode;

  return temp;
}

inline VkPipelineCoverageReductionStateCreateInfoNV PipelineCoverageReductionStateCreateInfoNV(
  VkPipelineCoverageReductionStateCreateFlagsNV flags,
  VkCoverageReductionModeNV coverageReductionMode
)
{
  VkPipelineCoverageReductionStateCreateInfoNV temp;
  temp.sType = VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.coverageReductionMode = coverageReductionMode;

  return temp;
}

inline VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL PhysicalDeviceShaderIntegerFunctions2FeaturesINTEL(
  VkBool32 shaderIntegerFunctions2
)
{
  VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL;
  temp.pNext = nullptr;
  temp.shaderIntegerFunctions2 = shaderIntegerFunctions2;

  return temp;
}

inline VkInitializePerformanceApiInfoINTEL InitializePerformanceApiInfoINTEL(
  void* pUserData
)
{
  VkInitializePerformanceApiInfoINTEL temp;
  temp.sType = VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL;
  temp.pNext = nullptr;
  temp.pUserData = pUserData;

  return temp;
}

inline VkQueryPoolPerformanceQueryCreateInfoINTEL QueryPoolPerformanceQueryCreateInfoINTEL(
  VkQueryPoolSamplingModeINTEL performanceCountersSampling
)
{
  VkQueryPoolPerformanceQueryCreateInfoINTEL temp;
  temp.sType = VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL;
  temp.pNext = nullptr;
  temp.performanceCountersSampling = performanceCountersSampling;

  return temp;
}

inline VkPerformanceMarkerInfoINTEL PerformanceMarkerInfoINTEL(
  uint64_t marker
)
{
  VkPerformanceMarkerInfoINTEL temp;
  temp.sType = VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL;
  temp.pNext = nullptr;
  temp.marker = marker;

  return temp;
}

inline VkPerformanceStreamMarkerInfoINTEL PerformanceStreamMarkerInfoINTEL(
  uint32_t marker
)
{
  VkPerformanceStreamMarkerInfoINTEL temp;
  temp.sType = VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL;
  temp.pNext = nullptr;
  temp.marker = marker;

  return temp;
}

inline VkPerformanceOverrideInfoINTEL PerformanceOverrideInfoINTEL(
  VkPerformanceOverrideTypeINTEL type,
  VkBool32 enable,
  uint64_t parameter
)
{
  VkPerformanceOverrideInfoINTEL temp;
  temp.sType = VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL;
  temp.pNext = nullptr;
  temp.type = type;
  temp.enable = enable;
  temp.parameter = parameter;

  return temp;
}

inline VkPerformanceConfigurationAcquireInfoINTEL PerformanceConfigurationAcquireInfoINTEL(
  VkPerformanceConfigurationTypeINTEL type
)
{
  VkPerformanceConfigurationAcquireInfoINTEL temp;
  temp.sType = VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL;
  temp.pNext = nullptr;
  temp.type = type;

  return temp;
}

inline VkPhysicalDeviceShaderClockFeaturesKHR PhysicalDeviceShaderClockFeaturesKHR(
  VkBool32 shaderSubgroupClock,
  VkBool32 shaderDeviceClock
)
{
  VkPhysicalDeviceShaderClockFeaturesKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR;
  temp.pNext = nullptr;
  temp.shaderSubgroupClock = shaderSubgroupClock;
  temp.shaderDeviceClock = shaderDeviceClock;

  return temp;
}

inline VkPhysicalDeviceIndexTypeUint8FeaturesEXT PhysicalDeviceIndexTypeUint8FeaturesEXT(
  VkBool32 indexTypeUint8
)
{
  VkPhysicalDeviceIndexTypeUint8FeaturesEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT;
  temp.pNext = nullptr;
  temp.indexTypeUint8 = indexTypeUint8;

  return temp;
}

inline VkPhysicalDeviceShaderSMBuiltinsFeaturesNV PhysicalDeviceShaderSMBuiltinsFeaturesNV(
  VkBool32 shaderSMBuiltins
)
{
  VkPhysicalDeviceShaderSMBuiltinsFeaturesNV temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV;
  temp.pNext = nullptr;
  temp.shaderSMBuiltins = shaderSMBuiltins;

  return temp;
}

inline VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT PhysicalDeviceFragmentShaderInterlockFeaturesEXT(
  VkBool32 fragmentShaderSampleInterlock,
  VkBool32 fragmentShaderPixelInterlock,
  VkBool32 fragmentShaderShadingRateInterlock
)
{
  VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT;
  temp.pNext = nullptr;
  temp.fragmentShaderSampleInterlock = fragmentShaderSampleInterlock;
  temp.fragmentShaderPixelInterlock = fragmentShaderPixelInterlock;
  temp.fragmentShaderShadingRateInterlock = fragmentShaderShadingRateInterlock;

  return temp;
}

inline VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures PhysicalDeviceSeparateDepthStencilLayoutsFeatures(
  VkBool32 separateDepthStencilLayouts
)
{
  VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES;
  temp.pNext = nullptr;
  temp.separateDepthStencilLayouts = separateDepthStencilLayouts;

  return temp;
}

inline VkAttachmentReferenceStencilLayout AttachmentReferenceStencilLayout(
  VkImageLayout stencilLayout
)
{
  VkAttachmentReferenceStencilLayout temp;
  temp.sType = VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT;
  temp.pNext = nullptr;
  temp.stencilLayout = stencilLayout;

  return temp;
}

inline VkAttachmentDescriptionStencilLayout AttachmentDescriptionStencilLayout(
  VkImageLayout stencilInitialLayout,
  VkImageLayout stencilFinalLayout
)
{
  VkAttachmentDescriptionStencilLayout temp;
  temp.sType = VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT;
  temp.pNext = nullptr;
  temp.stencilInitialLayout = stencilInitialLayout;
  temp.stencilFinalLayout = stencilFinalLayout;

  return temp;
}

inline VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR PhysicalDevicePipelineExecutablePropertiesFeaturesKHR(
  VkBool32 pipelineExecutableInfo
)
{
  VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR;
  temp.pNext = nullptr;
  temp.pipelineExecutableInfo = pipelineExecutableInfo;

  return temp;
}

inline VkPipelineInfoKHR PipelineInfoKHR(
  VkPipeline pipeline
)
{
  VkPipelineInfoKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR;
  temp.pNext = nullptr;
  temp.pipeline = pipeline;

  return temp;
}

inline VkPipelineExecutableInfoKHR PipelineExecutableInfoKHR(
  VkPipeline pipeline,
  uint32_t executableIndex
)
{
  VkPipelineExecutableInfoKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR;
  temp.pNext = nullptr;
  temp.pipeline = pipeline;
  temp.executableIndex = executableIndex;

  return temp;
}

inline VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT PhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT(
  VkBool32 shaderDemoteToHelperInvocation
)
{
  VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT;
  temp.pNext = nullptr;
  temp.shaderDemoteToHelperInvocation = shaderDemoteToHelperInvocation;

  return temp;
}

inline VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT PhysicalDeviceTexelBufferAlignmentFeaturesEXT(
  VkBool32 texelBufferAlignment
)
{
  VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT;
  temp.pNext = nullptr;
  temp.texelBufferAlignment = texelBufferAlignment;

  return temp;
}

inline VkPhysicalDeviceSubgroupSizeControlFeaturesEXT PhysicalDeviceSubgroupSizeControlFeaturesEXT(
  VkBool32 subgroupSizeControl,
  VkBool32 computeFullSubgroups
)
{
  VkPhysicalDeviceSubgroupSizeControlFeaturesEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT;
  temp.pNext = nullptr;
  temp.subgroupSizeControl = subgroupSizeControl;
  temp.computeFullSubgroups = computeFullSubgroups;

  return temp;
}

inline VkMemoryOpaqueCaptureAddressAllocateInfo MemoryOpaqueCaptureAddressAllocateInfo(
  uint64_t opaqueCaptureAddress
)
{
  VkMemoryOpaqueCaptureAddressAllocateInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO;
  temp.pNext = nullptr;
  temp.opaqueCaptureAddress = opaqueCaptureAddress;

  return temp;
}

inline VkDeviceMemoryOpaqueCaptureAddressInfo DeviceMemoryOpaqueCaptureAddressInfo(
  VkDeviceMemory memory
)
{
  VkDeviceMemoryOpaqueCaptureAddressInfo temp;
  temp.sType = VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO;
  temp.pNext = nullptr;
  temp.memory = memory;

  return temp;
}

inline VkPhysicalDeviceLineRasterizationFeaturesEXT PhysicalDeviceLineRasterizationFeaturesEXT(
  VkBool32 rectangularLines,
  VkBool32 bresenhamLines,
  VkBool32 smoothLines,
  VkBool32 stippledRectangularLines,
  VkBool32 stippledBresenhamLines,
  VkBool32 stippledSmoothLines
)
{
  VkPhysicalDeviceLineRasterizationFeaturesEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT;
  temp.pNext = nullptr;
  temp.rectangularLines = rectangularLines;
  temp.bresenhamLines = bresenhamLines;
  temp.smoothLines = smoothLines;
  temp.stippledRectangularLines = stippledRectangularLines;
  temp.stippledBresenhamLines = stippledBresenhamLines;
  temp.stippledSmoothLines = stippledSmoothLines;

  return temp;
}

inline VkPipelineRasterizationLineStateCreateInfoEXT PipelineRasterizationLineStateCreateInfoEXT(
  VkLineRasterizationModeEXT lineRasterizationMode,
  VkBool32 stippledLineEnable,
  uint32_t lineStippleFactor,
  uint16_t lineStipplePattern
)
{
  VkPipelineRasterizationLineStateCreateInfoEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT;
  temp.pNext = nullptr;
  temp.lineRasterizationMode = lineRasterizationMode;
  temp.stippledLineEnable = stippledLineEnable;
  temp.lineStippleFactor = lineStippleFactor;
  temp.lineStipplePattern = lineStipplePattern;

  return temp;
}

inline VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT PhysicalDevicePipelineCreationCacheControlFeaturesEXT(
  VkBool32 pipelineCreationCacheControl
)
{
  VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT;
  temp.pNext = nullptr;
  temp.pipelineCreationCacheControl = pipelineCreationCacheControl;

  return temp;
}

inline VkPhysicalDeviceVulkan11Features PhysicalDeviceVulkan11Features(
  VkBool32 storageBuffer16BitAccess,
  VkBool32 uniformAndStorageBuffer16BitAccess,
  VkBool32 storagePushConstant16,
  VkBool32 storageInputOutput16,
  VkBool32 multiview,
  VkBool32 multiviewGeometryShader,
  VkBool32 multiviewTessellationShader,
  VkBool32 variablePointersStorageBuffer,
  VkBool32 variablePointers,
  VkBool32 protectedMemory,
  VkBool32 samplerYcbcrConversion,
  VkBool32 shaderDrawParameters
)
{
  VkPhysicalDeviceVulkan11Features temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES;
  temp.pNext = nullptr;
  temp.storageBuffer16BitAccess = storageBuffer16BitAccess;
  temp.uniformAndStorageBuffer16BitAccess = uniformAndStorageBuffer16BitAccess;
  temp.storagePushConstant16 = storagePushConstant16;
  temp.storageInputOutput16 = storageInputOutput16;
  temp.multiview = multiview;
  temp.multiviewGeometryShader = multiviewGeometryShader;
  temp.multiviewTessellationShader = multiviewTessellationShader;
  temp.variablePointersStorageBuffer = variablePointersStorageBuffer;
  temp.variablePointers = variablePointers;
  temp.protectedMemory = protectedMemory;
  temp.samplerYcbcrConversion = samplerYcbcrConversion;
  temp.shaderDrawParameters = shaderDrawParameters;

  return temp;
}

inline VkPhysicalDeviceVulkan12Features PhysicalDeviceVulkan12Features(
  VkBool32 samplerMirrorClampToEdge,
  VkBool32 drawIndirectCount,
  VkBool32 storageBuffer8BitAccess,
  VkBool32 uniformAndStorageBuffer8BitAccess,
  VkBool32 storagePushConstant8,
  VkBool32 shaderBufferInt64Atomics,
  VkBool32 shaderSharedInt64Atomics,
  VkBool32 shaderFloat16,
  VkBool32 shaderInt8,
  VkBool32 descriptorIndexing,
  VkBool32 shaderInputAttachmentArrayDynamicIndexing,
  VkBool32 shaderUniformTexelBufferArrayDynamicIndexing,
  VkBool32 shaderStorageTexelBufferArrayDynamicIndexing,
  VkBool32 shaderUniformBufferArrayNonUniformIndexing,
  VkBool32 shaderSampledImageArrayNonUniformIndexing,
  VkBool32 shaderStorageBufferArrayNonUniformIndexing,
  VkBool32 shaderStorageImageArrayNonUniformIndexing,
  VkBool32 shaderInputAttachmentArrayNonUniformIndexing,
  VkBool32 shaderUniformTexelBufferArrayNonUniformIndexing,
  VkBool32 shaderStorageTexelBufferArrayNonUniformIndexing,
  VkBool32 descriptorBindingUniformBufferUpdateAfterBind,
  VkBool32 descriptorBindingSampledImageUpdateAfterBind,
  VkBool32 descriptorBindingStorageImageUpdateAfterBind,
  VkBool32 descriptorBindingStorageBufferUpdateAfterBind,
  VkBool32 descriptorBindingUniformTexelBufferUpdateAfterBind,
  VkBool32 descriptorBindingStorageTexelBufferUpdateAfterBind,
  VkBool32 descriptorBindingUpdateUnusedWhilePending,
  VkBool32 descriptorBindingPartiallyBound,
  VkBool32 descriptorBindingVariableDescriptorCount,
  VkBool32 runtimeDescriptorArray,
  VkBool32 samplerFilterMinmax,
  VkBool32 scalarBlockLayout,
  VkBool32 imagelessFramebuffer,
  VkBool32 uniformBufferStandardLayout,
  VkBool32 shaderSubgroupExtendedTypes,
  VkBool32 separateDepthStencilLayouts,
  VkBool32 hostQueryReset,
  VkBool32 timelineSemaphore,
  VkBool32 bufferDeviceAddress,
  VkBool32 bufferDeviceAddressCaptureReplay,
  VkBool32 bufferDeviceAddressMultiDevice,
  VkBool32 vulkanMemoryModel,
  VkBool32 vulkanMemoryModelDeviceScope,
  VkBool32 vulkanMemoryModelAvailabilityVisibilityChains,
  VkBool32 shaderOutputViewportIndex,
  VkBool32 shaderOutputLayer,
  VkBool32 subgroupBroadcastDynamicId
)
{
  VkPhysicalDeviceVulkan12Features temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES;
  temp.pNext = nullptr;
  temp.samplerMirrorClampToEdge = samplerMirrorClampToEdge;
  temp.drawIndirectCount = drawIndirectCount;
  temp.storageBuffer8BitAccess = storageBuffer8BitAccess;
  temp.uniformAndStorageBuffer8BitAccess = uniformAndStorageBuffer8BitAccess;
  temp.storagePushConstant8 = storagePushConstant8;
  temp.shaderBufferInt64Atomics = shaderBufferInt64Atomics;
  temp.shaderSharedInt64Atomics = shaderSharedInt64Atomics;
  temp.shaderFloat16 = shaderFloat16;
  temp.shaderInt8 = shaderInt8;
  temp.descriptorIndexing = descriptorIndexing;
  temp.shaderInputAttachmentArrayDynamicIndexing = shaderInputAttachmentArrayDynamicIndexing;
  temp.shaderUniformTexelBufferArrayDynamicIndexing = shaderUniformTexelBufferArrayDynamicIndexing;
  temp.shaderStorageTexelBufferArrayDynamicIndexing = shaderStorageTexelBufferArrayDynamicIndexing;
  temp.shaderUniformBufferArrayNonUniformIndexing = shaderUniformBufferArrayNonUniformIndexing;
  temp.shaderSampledImageArrayNonUniformIndexing = shaderSampledImageArrayNonUniformIndexing;
  temp.shaderStorageBufferArrayNonUniformIndexing = shaderStorageBufferArrayNonUniformIndexing;
  temp.shaderStorageImageArrayNonUniformIndexing = shaderStorageImageArrayNonUniformIndexing;
  temp.shaderInputAttachmentArrayNonUniformIndexing = shaderInputAttachmentArrayNonUniformIndexing;
  temp.shaderUniformTexelBufferArrayNonUniformIndexing = shaderUniformTexelBufferArrayNonUniformIndexing;
  temp.shaderStorageTexelBufferArrayNonUniformIndexing = shaderStorageTexelBufferArrayNonUniformIndexing;
  temp.descriptorBindingUniformBufferUpdateAfterBind = descriptorBindingUniformBufferUpdateAfterBind;
  temp.descriptorBindingSampledImageUpdateAfterBind = descriptorBindingSampledImageUpdateAfterBind;
  temp.descriptorBindingStorageImageUpdateAfterBind = descriptorBindingStorageImageUpdateAfterBind;
  temp.descriptorBindingStorageBufferUpdateAfterBind = descriptorBindingStorageBufferUpdateAfterBind;
  temp.descriptorBindingUniformTexelBufferUpdateAfterBind = descriptorBindingUniformTexelBufferUpdateAfterBind;
  temp.descriptorBindingStorageTexelBufferUpdateAfterBind = descriptorBindingStorageTexelBufferUpdateAfterBind;
  temp.descriptorBindingUpdateUnusedWhilePending = descriptorBindingUpdateUnusedWhilePending;
  temp.descriptorBindingPartiallyBound = descriptorBindingPartiallyBound;
  temp.descriptorBindingVariableDescriptorCount = descriptorBindingVariableDescriptorCount;
  temp.runtimeDescriptorArray = runtimeDescriptorArray;
  temp.samplerFilterMinmax = samplerFilterMinmax;
  temp.scalarBlockLayout = scalarBlockLayout;
  temp.imagelessFramebuffer = imagelessFramebuffer;
  temp.uniformBufferStandardLayout = uniformBufferStandardLayout;
  temp.shaderSubgroupExtendedTypes = shaderSubgroupExtendedTypes;
  temp.separateDepthStencilLayouts = separateDepthStencilLayouts;
  temp.hostQueryReset = hostQueryReset;
  temp.timelineSemaphore = timelineSemaphore;
  temp.bufferDeviceAddress = bufferDeviceAddress;
  temp.bufferDeviceAddressCaptureReplay = bufferDeviceAddressCaptureReplay;
  temp.bufferDeviceAddressMultiDevice = bufferDeviceAddressMultiDevice;
  temp.vulkanMemoryModel = vulkanMemoryModel;
  temp.vulkanMemoryModelDeviceScope = vulkanMemoryModelDeviceScope;
  temp.vulkanMemoryModelAvailabilityVisibilityChains = vulkanMemoryModelAvailabilityVisibilityChains;
  temp.shaderOutputViewportIndex = shaderOutputViewportIndex;
  temp.shaderOutputLayer = shaderOutputLayer;
  temp.subgroupBroadcastDynamicId = subgroupBroadcastDynamicId;

  return temp;
}

inline VkPipelineCompilerControlCreateInfoAMD PipelineCompilerControlCreateInfoAMD(
  VkPipelineCompilerControlFlagsAMD compilerControlFlags
)
{
  VkPipelineCompilerControlCreateInfoAMD temp;
  temp.sType = VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD;
  temp.pNext = nullptr;
  temp.compilerControlFlags = compilerControlFlags;

  return temp;
}

inline VkPhysicalDeviceCoherentMemoryFeaturesAMD PhysicalDeviceCoherentMemoryFeaturesAMD(
  VkBool32 deviceCoherentMemory
)
{
  VkPhysicalDeviceCoherentMemoryFeaturesAMD temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD;
  temp.pNext = nullptr;
  temp.deviceCoherentMemory = deviceCoherentMemory;

  return temp;
}

inline VkSamplerCustomBorderColorCreateInfoEXT SamplerCustomBorderColorCreateInfoEXT(
  VkClearColorValue customBorderColor,
  VkFormat format
)
{
  VkSamplerCustomBorderColorCreateInfoEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT;
  temp.pNext = nullptr;
  temp.customBorderColor = customBorderColor;
  temp.format = format;

  return temp;
}

inline VkPhysicalDeviceCustomBorderColorFeaturesEXT PhysicalDeviceCustomBorderColorFeaturesEXT(
  VkBool32 customBorderColors,
  VkBool32 customBorderColorWithoutFormat
)
{
  VkPhysicalDeviceCustomBorderColorFeaturesEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT;
  temp.pNext = nullptr;
  temp.customBorderColors = customBorderColors;
  temp.customBorderColorWithoutFormat = customBorderColorWithoutFormat;

  return temp;
}

inline VkAccelerationStructureGeometryTrianglesDataKHR AccelerationStructureGeometryTrianglesDataKHR(
  VkFormat vertexFormat,
  VkDeviceOrHostAddressConstKHR vertexData,
  VkDeviceSize vertexStride,
  uint32_t maxVertex,
  VkIndexType indexType,
  VkDeviceOrHostAddressConstKHR indexData,
  VkDeviceOrHostAddressConstKHR transformData
)
{
  VkAccelerationStructureGeometryTrianglesDataKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR;
  temp.pNext = nullptr;
  temp.vertexFormat = vertexFormat;
  temp.vertexData = vertexData;
  temp.vertexStride = vertexStride;
  temp.maxVertex = maxVertex;
  temp.indexType = indexType;
  temp.indexData = indexData;
  temp.transformData = transformData;

  return temp;
}

inline VkAccelerationStructureGeometryAabbsDataKHR AccelerationStructureGeometryAabbsDataKHR(
  VkDeviceOrHostAddressConstKHR data,
  VkDeviceSize stride
)
{
  VkAccelerationStructureGeometryAabbsDataKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR;
  temp.pNext = nullptr;
  temp.data = data;
  temp.stride = stride;

  return temp;
}

inline VkAccelerationStructureGeometryInstancesDataKHR AccelerationStructureGeometryInstancesDataKHR(
  VkBool32 arrayOfPointers,
  VkDeviceOrHostAddressConstKHR data
)
{
  VkAccelerationStructureGeometryInstancesDataKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR;
  temp.pNext = nullptr;
  temp.arrayOfPointers = arrayOfPointers;
  temp.data = data;

  return temp;
}

inline VkAccelerationStructureGeometryKHR AccelerationStructureGeometryKHR(
  VkGeometryTypeKHR geometryType,
  VkAccelerationStructureGeometryDataKHR geometry,
  VkGeometryFlagsKHR flags
)
{
  VkAccelerationStructureGeometryKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR;
  temp.pNext = nullptr;
  temp.geometryType = geometryType;
  temp.geometry = geometry;
  temp.flags = flags;

  return temp;
}

inline VkAccelerationStructureBuildGeometryInfoKHR AccelerationStructureBuildGeometryInfoKHR(
  VkAccelerationStructureTypeKHR type,
  VkBuildAccelerationStructureFlagsKHR flags,
  VkBuildAccelerationStructureModeKHR mode,
  VkAccelerationStructureKHR srcAccelerationStructure,
  VkAccelerationStructureKHR dstAccelerationStructure,
  uint32_t geometryCount,
  const VkAccelerationStructureGeometryKHR* pGeometries,
  const VkAccelerationStructureGeometryKHR* const* ppGeometries,
  VkDeviceOrHostAddressKHR scratchData
)
{
  VkAccelerationStructureBuildGeometryInfoKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR;
  temp.pNext = nullptr;
  temp.type = type;
  temp.flags = flags;
  temp.mode = mode;
  temp.srcAccelerationStructure = srcAccelerationStructure;
  temp.dstAccelerationStructure = dstAccelerationStructure;
  temp.geometryCount = geometryCount;
  temp.pGeometries = pGeometries;
  temp.ppGeometries = ppGeometries;
  temp.scratchData = scratchData;

  return temp;
}

inline VkAccelerationStructureCreateInfoKHR AccelerationStructureCreateInfoKHR(
  VkAccelerationStructureCreateFlagsKHR createFlags,
  VkBuffer buffer,
  VkDeviceSize offset,
  VkDeviceSize size,
  VkAccelerationStructureTypeKHR type,
  VkDeviceAddress deviceAddress
)
{
  VkAccelerationStructureCreateInfoKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR;
  temp.pNext = nullptr;
  temp.createFlags = createFlags;
  temp.buffer = buffer;
  temp.offset = offset;
  temp.size = size;
  temp.type = type;
  temp.deviceAddress = deviceAddress;

  return temp;
}

inline VkAccelerationStructureDeviceAddressInfoKHR AccelerationStructureDeviceAddressInfoKHR(
  VkAccelerationStructureKHR accelerationStructure
)
{
  VkAccelerationStructureDeviceAddressInfoKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR;
  temp.pNext = nullptr;
  temp.accelerationStructure = accelerationStructure;

  return temp;
}

inline VkAccelerationStructureVersionInfoKHR AccelerationStructureVersionInfoKHR(
  const uint8_t* pVersionData
)
{
  VkAccelerationStructureVersionInfoKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR;
  temp.pNext = nullptr;
  temp.pVersionData = pVersionData;

  return temp;
}

inline VkCopyAccelerationStructureInfoKHR CopyAccelerationStructureInfoKHR(
  VkAccelerationStructureKHR src,
  VkAccelerationStructureKHR dst,
  VkCopyAccelerationStructureModeKHR mode
)
{
  VkCopyAccelerationStructureInfoKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR;
  temp.pNext = nullptr;
  temp.src = src;
  temp.dst = dst;
  temp.mode = mode;

  return temp;
}

inline VkCopyAccelerationStructureToMemoryInfoKHR CopyAccelerationStructureToMemoryInfoKHR(
  VkAccelerationStructureKHR src,
  VkDeviceOrHostAddressKHR dst,
  VkCopyAccelerationStructureModeKHR mode
)
{
  VkCopyAccelerationStructureToMemoryInfoKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR;
  temp.pNext = nullptr;
  temp.src = src;
  temp.dst = dst;
  temp.mode = mode;

  return temp;
}

inline VkCopyMemoryToAccelerationStructureInfoKHR CopyMemoryToAccelerationStructureInfoKHR(
  VkDeviceOrHostAddressConstKHR src,
  VkAccelerationStructureKHR dst,
  VkCopyAccelerationStructureModeKHR mode
)
{
  VkCopyMemoryToAccelerationStructureInfoKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR;
  temp.pNext = nullptr;
  temp.src = src;
  temp.dst = dst;
  temp.mode = mode;

  return temp;
}

inline VkRayTracingPipelineInterfaceCreateInfoKHR RayTracingPipelineInterfaceCreateInfoKHR(
  uint32_t maxPipelineRayPayloadSize,
  uint32_t maxPipelineRayHitAttributeSize
)
{
  VkRayTracingPipelineInterfaceCreateInfoKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR;
  temp.pNext = nullptr;
  temp.maxPipelineRayPayloadSize = maxPipelineRayPayloadSize;
  temp.maxPipelineRayHitAttributeSize = maxPipelineRayHitAttributeSize;

  return temp;
}

inline VkPipelineLibraryCreateInfoKHR PipelineLibraryCreateInfoKHR(
  uint32_t libraryCount,
  const VkPipeline* pLibraries
)
{
  VkPipelineLibraryCreateInfoKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR;
  temp.pNext = nullptr;
  temp.libraryCount = libraryCount;
  temp.pLibraries = pLibraries;

  return temp;
}

inline VkPhysicalDeviceExtendedDynamicStateFeaturesEXT PhysicalDeviceExtendedDynamicStateFeaturesEXT(
  VkBool32 extendedDynamicState
)
{
  VkPhysicalDeviceExtendedDynamicStateFeaturesEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT;
  temp.pNext = nullptr;
  temp.extendedDynamicState = extendedDynamicState;

  return temp;
}

inline VkPhysicalDeviceExtendedDynamicState2FeaturesEXT PhysicalDeviceExtendedDynamicState2FeaturesEXT(
  VkBool32 extendedDynamicState2,
  VkBool32 extendedDynamicState2LogicOp,
  VkBool32 extendedDynamicState2PatchControlPoints
)
{
  VkPhysicalDeviceExtendedDynamicState2FeaturesEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT;
  temp.pNext = nullptr;
  temp.extendedDynamicState2 = extendedDynamicState2;
  temp.extendedDynamicState2LogicOp = extendedDynamicState2LogicOp;
  temp.extendedDynamicState2PatchControlPoints = extendedDynamicState2PatchControlPoints;

  return temp;
}

inline VkRenderPassTransformBeginInfoQCOM RenderPassTransformBeginInfoQCOM(
  VkSurfaceTransformFlagBitsKHR transform
)
{
  VkRenderPassTransformBeginInfoQCOM temp;
  temp.sType = VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM;
  temp.pNext = nullptr;
  temp.transform = transform;

  return temp;
}

inline VkCopyCommandTransformInfoQCOM CopyCommandTransformInfoQCOM(
  VkSurfaceTransformFlagBitsKHR transform
)
{
  VkCopyCommandTransformInfoQCOM temp;
  temp.sType = VK_STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM;
  temp.pNext = nullptr;
  temp.transform = transform;

  return temp;
}

inline VkCommandBufferInheritanceRenderPassTransformInfoQCOM CommandBufferInheritanceRenderPassTransformInfoQCOM(
  VkSurfaceTransformFlagBitsKHR transform,
  VkRect2D renderArea
)
{
  VkCommandBufferInheritanceRenderPassTransformInfoQCOM temp;
  temp.sType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM;
  temp.pNext = nullptr;
  temp.transform = transform;
  temp.renderArea = renderArea;

  return temp;
}

inline VkPhysicalDeviceDiagnosticsConfigFeaturesNV PhysicalDeviceDiagnosticsConfigFeaturesNV(
  VkBool32 diagnosticsConfig
)
{
  VkPhysicalDeviceDiagnosticsConfigFeaturesNV temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV;
  temp.pNext = nullptr;
  temp.diagnosticsConfig = diagnosticsConfig;

  return temp;
}

inline VkDeviceDiagnosticsConfigCreateInfoNV DeviceDiagnosticsConfigCreateInfoNV(
  VkDeviceDiagnosticsConfigFlagsNV flags
)
{
  VkDeviceDiagnosticsConfigCreateInfoNV temp;
  temp.sType = VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV;
  temp.pNext = nullptr;
  temp.flags = flags;

  return temp;
}

inline VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR PhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR(
  VkBool32 shaderZeroInitializeWorkgroupMemory
)
{
  VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES_KHR;
  temp.pNext = nullptr;
  temp.shaderZeroInitializeWorkgroupMemory = shaderZeroInitializeWorkgroupMemory;

  return temp;
}

inline VkPhysicalDeviceRobustness2FeaturesEXT PhysicalDeviceRobustness2FeaturesEXT(
  VkBool32 robustBufferAccess2,
  VkBool32 robustImageAccess2,
  VkBool32 nullDescriptor
)
{
  VkPhysicalDeviceRobustness2FeaturesEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT;
  temp.pNext = nullptr;
  temp.robustBufferAccess2 = robustBufferAccess2;
  temp.robustImageAccess2 = robustImageAccess2;
  temp.nullDescriptor = nullDescriptor;

  return temp;
}

inline VkPhysicalDeviceImageRobustnessFeaturesEXT PhysicalDeviceImageRobustnessFeaturesEXT(
  VkBool32 robustImageAccess
)
{
  VkPhysicalDeviceImageRobustnessFeaturesEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT;
  temp.pNext = nullptr;
  temp.robustImageAccess = robustImageAccess;

  return temp;
}

inline VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR PhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR(
  VkBool32 workgroupMemoryExplicitLayout,
  VkBool32 workgroupMemoryExplicitLayoutScalarBlockLayout,
  VkBool32 workgroupMemoryExplicitLayout8BitAccess,
  VkBool32 workgroupMemoryExplicitLayout16BitAccess
)
{
  VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR;
  temp.pNext = nullptr;
  temp.workgroupMemoryExplicitLayout = workgroupMemoryExplicitLayout;
  temp.workgroupMemoryExplicitLayoutScalarBlockLayout = workgroupMemoryExplicitLayoutScalarBlockLayout;
  temp.workgroupMemoryExplicitLayout8BitAccess = workgroupMemoryExplicitLayout8BitAccess;
  temp.workgroupMemoryExplicitLayout16BitAccess = workgroupMemoryExplicitLayout16BitAccess;

  return temp;
}

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkPhysicalDevicePortabilitySubsetFeaturesKHR PhysicalDevicePortabilitySubsetFeaturesKHR(
  VkBool32 constantAlphaColorBlendFactors,
  VkBool32 events,
  VkBool32 imageViewFormatReinterpretation,
  VkBool32 imageViewFormatSwizzle,
  VkBool32 imageView2DOn3DImage,
  VkBool32 multisampleArrayImage,
  VkBool32 mutableComparisonSamplers,
  VkBool32 pointPolygons,
  VkBool32 samplerMipLodBias,
  VkBool32 separateStencilMaskRef,
  VkBool32 shaderSampleRateInterpolationFunctions,
  VkBool32 tessellationIsolines,
  VkBool32 tessellationPointMode,
  VkBool32 triangleFans,
  VkBool32 vertexAttributeAccessBeyondStride
)
{
  VkPhysicalDevicePortabilitySubsetFeaturesKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_FEATURES_KHR;
  temp.pNext = nullptr;
  temp.constantAlphaColorBlendFactors = constantAlphaColorBlendFactors;
  temp.events = events;
  temp.imageViewFormatReinterpretation = imageViewFormatReinterpretation;
  temp.imageViewFormatSwizzle = imageViewFormatSwizzle;
  temp.imageView2DOn3DImage = imageView2DOn3DImage;
  temp.multisampleArrayImage = multisampleArrayImage;
  temp.mutableComparisonSamplers = mutableComparisonSamplers;
  temp.pointPolygons = pointPolygons;
  temp.samplerMipLodBias = samplerMipLodBias;
  temp.separateStencilMaskRef = separateStencilMaskRef;
  temp.shaderSampleRateInterpolationFunctions = shaderSampleRateInterpolationFunctions;
  temp.tessellationIsolines = tessellationIsolines;
  temp.tessellationPointMode = tessellationPointMode;
  temp.triangleFans = triangleFans;
  temp.vertexAttributeAccessBeyondStride = vertexAttributeAccessBeyondStride;

  return temp;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkPhysicalDevicePortabilitySubsetPropertiesKHR PhysicalDevicePortabilitySubsetPropertiesKHR(
  uint32_t minVertexInputBindingStrideAlignment
)
{
  VkPhysicalDevicePortabilitySubsetPropertiesKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PORTABILITY_SUBSET_PROPERTIES_KHR;
  temp.pNext = nullptr;
  temp.minVertexInputBindingStrideAlignment = minVertexInputBindingStrideAlignment;

  return temp;
}
#endif

inline VkPhysicalDevice4444FormatsFeaturesEXT PhysicalDevice4444FormatsFeaturesEXT(
  VkBool32 formatA4R4G4B4,
  VkBool32 formatA4B4G4R4
)
{
  VkPhysicalDevice4444FormatsFeaturesEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT;
  temp.pNext = nullptr;
  temp.formatA4R4G4B4 = formatA4R4G4B4;
  temp.formatA4B4G4R4 = formatA4B4G4R4;

  return temp;
}

inline VkBufferCopy2KHR BufferCopy2KHR(
  VkDeviceSize srcOffset,
  VkDeviceSize dstOffset,
  VkDeviceSize size
)
{
  VkBufferCopy2KHR temp;
  temp.sType = VK_STRUCTURE_TYPE_BUFFER_COPY_2_KHR;
  temp.pNext = nullptr;
  temp.srcOffset = srcOffset;
  temp.dstOffset = dstOffset;
  temp.size = size;

  return temp;
}

inline VkImageCopy2KHR ImageCopy2KHR(
  VkImageSubresourceLayers srcSubresource,
  VkOffset3D srcOffset,
  VkImageSubresourceLayers dstSubresource,
  VkOffset3D dstOffset,
  VkExtent3D extent
)
{
  VkImageCopy2KHR temp;
  temp.sType = VK_STRUCTURE_TYPE_IMAGE_COPY_2_KHR;
  temp.pNext = nullptr;
  temp.srcSubresource = srcSubresource;
  temp.srcOffset = srcOffset;
  temp.dstSubresource = dstSubresource;
  temp.dstOffset = dstOffset;
  temp.extent = extent;

  return temp;
}

inline VkImageBlit2KHR ImageBlit2KHR(
  VkImageSubresourceLayers srcSubresource,
  VkOffset3D srcOffsets[2],
  VkImageSubresourceLayers dstSubresource,
  VkOffset3D dstOffsets[2]
)
{
  VkImageBlit2KHR temp;
  temp.sType = VK_STRUCTURE_TYPE_IMAGE_BLIT_2_KHR;
  temp.pNext = nullptr;
  temp.srcSubresource = srcSubresource;
  for(size_t i = 0; i < 2; ++i){
    temp.srcOffsets[i] = srcOffsets[i];
  }
  temp.dstSubresource = dstSubresource;
  for(size_t i = 0; i < 2; ++i){
    temp.dstOffsets[i] = dstOffsets[i];
  }

  return temp;
}

inline VkBufferImageCopy2KHR BufferImageCopy2KHR(
  VkDeviceSize bufferOffset,
  uint32_t bufferRowLength,
  uint32_t bufferImageHeight,
  VkImageSubresourceLayers imageSubresource,
  VkOffset3D imageOffset,
  VkExtent3D imageExtent
)
{
  VkBufferImageCopy2KHR temp;
  temp.sType = VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR;
  temp.pNext = nullptr;
  temp.bufferOffset = bufferOffset;
  temp.bufferRowLength = bufferRowLength;
  temp.bufferImageHeight = bufferImageHeight;
  temp.imageSubresource = imageSubresource;
  temp.imageOffset = imageOffset;
  temp.imageExtent = imageExtent;

  return temp;
}

inline VkImageResolve2KHR ImageResolve2KHR(
  VkImageSubresourceLayers srcSubresource,
  VkOffset3D srcOffset,
  VkImageSubresourceLayers dstSubresource,
  VkOffset3D dstOffset,
  VkExtent3D extent
)
{
  VkImageResolve2KHR temp;
  temp.sType = VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR;
  temp.pNext = nullptr;
  temp.srcSubresource = srcSubresource;
  temp.srcOffset = srcOffset;
  temp.dstSubresource = dstSubresource;
  temp.dstOffset = dstOffset;
  temp.extent = extent;

  return temp;
}

inline VkCopyBufferInfo2KHR CopyBufferInfo2KHR(
  VkBuffer srcBuffer,
  VkBuffer dstBuffer,
  uint32_t regionCount,
  const VkBufferCopy2KHR* pRegions
)
{
  VkCopyBufferInfo2KHR temp;
  temp.sType = VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR;
  temp.pNext = nullptr;
  temp.srcBuffer = srcBuffer;
  temp.dstBuffer = dstBuffer;
  temp.regionCount = regionCount;
  temp.pRegions = pRegions;

  return temp;
}

inline VkCopyImageInfo2KHR CopyImageInfo2KHR(
  VkImage srcImage,
  VkImageLayout srcImageLayout,
  VkImage dstImage,
  VkImageLayout dstImageLayout,
  uint32_t regionCount,
  const VkImageCopy2KHR* pRegions
)
{
  VkCopyImageInfo2KHR temp;
  temp.sType = VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR;
  temp.pNext = nullptr;
  temp.srcImage = srcImage;
  temp.srcImageLayout = srcImageLayout;
  temp.dstImage = dstImage;
  temp.dstImageLayout = dstImageLayout;
  temp.regionCount = regionCount;
  temp.pRegions = pRegions;

  return temp;
}

inline VkBlitImageInfo2KHR BlitImageInfo2KHR(
  VkImage srcImage,
  VkImageLayout srcImageLayout,
  VkImage dstImage,
  VkImageLayout dstImageLayout,
  uint32_t regionCount,
  const VkImageBlit2KHR* pRegions,
  VkFilter filter
)
{
  VkBlitImageInfo2KHR temp;
  temp.sType = VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR;
  temp.pNext = nullptr;
  temp.srcImage = srcImage;
  temp.srcImageLayout = srcImageLayout;
  temp.dstImage = dstImage;
  temp.dstImageLayout = dstImageLayout;
  temp.regionCount = regionCount;
  temp.pRegions = pRegions;
  temp.filter = filter;

  return temp;
}

inline VkCopyBufferToImageInfo2KHR CopyBufferToImageInfo2KHR(
  VkBuffer srcBuffer,
  VkImage dstImage,
  VkImageLayout dstImageLayout,
  uint32_t regionCount,
  const VkBufferImageCopy2KHR* pRegions
)
{
  VkCopyBufferToImageInfo2KHR temp;
  temp.sType = VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR;
  temp.pNext = nullptr;
  temp.srcBuffer = srcBuffer;
  temp.dstImage = dstImage;
  temp.dstImageLayout = dstImageLayout;
  temp.regionCount = regionCount;
  temp.pRegions = pRegions;

  return temp;
}

inline VkCopyImageToBufferInfo2KHR CopyImageToBufferInfo2KHR(
  VkImage srcImage,
  VkImageLayout srcImageLayout,
  VkBuffer dstBuffer,
  uint32_t regionCount,
  const VkBufferImageCopy2KHR* pRegions
)
{
  VkCopyImageToBufferInfo2KHR temp;
  temp.sType = VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR;
  temp.pNext = nullptr;
  temp.srcImage = srcImage;
  temp.srcImageLayout = srcImageLayout;
  temp.dstBuffer = dstBuffer;
  temp.regionCount = regionCount;
  temp.pRegions = pRegions;

  return temp;
}

inline VkResolveImageInfo2KHR ResolveImageInfo2KHR(
  VkImage srcImage,
  VkImageLayout srcImageLayout,
  VkImage dstImage,
  VkImageLayout dstImageLayout,
  uint32_t regionCount,
  const VkImageResolve2KHR* pRegions
)
{
  VkResolveImageInfo2KHR temp;
  temp.sType = VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR;
  temp.pNext = nullptr;
  temp.srcImage = srcImage;
  temp.srcImageLayout = srcImageLayout;
  temp.dstImage = dstImage;
  temp.dstImageLayout = dstImageLayout;
  temp.regionCount = regionCount;
  temp.pRegions = pRegions;

  return temp;
}

inline VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT PhysicalDeviceShaderImageAtomicInt64FeaturesEXT(
  VkBool32 shaderImageInt64Atomics,
  VkBool32 sparseImageInt64Atomics
)
{
  VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT;
  temp.pNext = nullptr;
  temp.shaderImageInt64Atomics = shaderImageInt64Atomics;
  temp.sparseImageInt64Atomics = sparseImageInt64Atomics;

  return temp;
}

inline VkFragmentShadingRateAttachmentInfoKHR FragmentShadingRateAttachmentInfoKHR(
  const VkAttachmentReference2* pFragmentShadingRateAttachment,
  VkExtent2D shadingRateAttachmentTexelSize
)
{
  VkFragmentShadingRateAttachmentInfoKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR;
  temp.pNext = nullptr;
  temp.pFragmentShadingRateAttachment = pFragmentShadingRateAttachment;
  temp.shadingRateAttachmentTexelSize = shadingRateAttachmentTexelSize;

  return temp;
}

inline VkPipelineFragmentShadingRateStateCreateInfoKHR PipelineFragmentShadingRateStateCreateInfoKHR(
  VkExtent2D fragmentSize,
  VkFragmentShadingRateCombinerOpKHR combinerOps[2]
)
{
  VkPipelineFragmentShadingRateStateCreateInfoKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR;
  temp.pNext = nullptr;
  temp.fragmentSize = fragmentSize;
  for(size_t i = 0; i < 2; ++i){
    temp.combinerOps[i] = combinerOps[i];
  }

  return temp;
}

inline VkPhysicalDeviceFragmentShadingRateFeaturesKHR PhysicalDeviceFragmentShadingRateFeaturesKHR(
  VkBool32 pipelineFragmentShadingRate,
  VkBool32 primitiveFragmentShadingRate,
  VkBool32 attachmentFragmentShadingRate
)
{
  VkPhysicalDeviceFragmentShadingRateFeaturesKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR;
  temp.pNext = nullptr;
  temp.pipelineFragmentShadingRate = pipelineFragmentShadingRate;
  temp.primitiveFragmentShadingRate = primitiveFragmentShadingRate;
  temp.attachmentFragmentShadingRate = attachmentFragmentShadingRate;

  return temp;
}

inline VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR PhysicalDeviceShaderTerminateInvocationFeaturesKHR(
  VkBool32 shaderTerminateInvocation
)
{
  VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR;
  temp.pNext = nullptr;
  temp.shaderTerminateInvocation = shaderTerminateInvocation;

  return temp;
}

inline VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV PhysicalDeviceFragmentShadingRateEnumsFeaturesNV(
  VkBool32 fragmentShadingRateEnums,
  VkBool32 supersampleFragmentShadingRates,
  VkBool32 noInvocationFragmentShadingRates
)
{
  VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV;
  temp.pNext = nullptr;
  temp.fragmentShadingRateEnums = fragmentShadingRateEnums;
  temp.supersampleFragmentShadingRates = supersampleFragmentShadingRates;
  temp.noInvocationFragmentShadingRates = noInvocationFragmentShadingRates;

  return temp;
}

inline VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV PhysicalDeviceFragmentShadingRateEnumsPropertiesNV(
  VkSampleCountFlagBits maxFragmentShadingRateInvocationCount
)
{
  VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV;
  temp.pNext = nullptr;
  temp.maxFragmentShadingRateInvocationCount = maxFragmentShadingRateInvocationCount;

  return temp;
}

inline VkPipelineFragmentShadingRateEnumStateCreateInfoNV PipelineFragmentShadingRateEnumStateCreateInfoNV(
  VkFragmentShadingRateTypeNV shadingRateType,
  VkFragmentShadingRateNV shadingRate,
  VkFragmentShadingRateCombinerOpKHR combinerOps[2]
)
{
  VkPipelineFragmentShadingRateEnumStateCreateInfoNV temp;
  temp.sType = VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV;
  temp.pNext = nullptr;
  temp.shadingRateType = shadingRateType;
  temp.shadingRate = shadingRate;
  for(size_t i = 0; i < 2; ++i){
    temp.combinerOps[i] = combinerOps[i];
  }

  return temp;
}

inline VkAccelerationStructureBuildSizesInfoKHR AccelerationStructureBuildSizesInfoKHR(
  VkDeviceSize accelerationStructureSize,
  VkDeviceSize updateScratchSize,
  VkDeviceSize buildScratchSize
)
{
  VkAccelerationStructureBuildSizesInfoKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR;
  temp.pNext = nullptr;
  temp.accelerationStructureSize = accelerationStructureSize;
  temp.updateScratchSize = updateScratchSize;
  temp.buildScratchSize = buildScratchSize;

  return temp;
}

inline VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE PhysicalDeviceMutableDescriptorTypeFeaturesVALVE(
  VkBool32 mutableDescriptorType
)
{
  VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_VALVE;
  temp.pNext = nullptr;
  temp.mutableDescriptorType = mutableDescriptorType;

  return temp;
}

inline VkMutableDescriptorTypeCreateInfoVALVE MutableDescriptorTypeCreateInfoVALVE(
  uint32_t mutableDescriptorTypeListCount,
  const VkMutableDescriptorTypeListVALVE* pMutableDescriptorTypeLists
)
{
  VkMutableDescriptorTypeCreateInfoVALVE temp;
  temp.sType = VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_VALVE;
  temp.pNext = nullptr;
  temp.mutableDescriptorTypeListCount = mutableDescriptorTypeListCount;
  temp.pMutableDescriptorTypeLists = pMutableDescriptorTypeLists;

  return temp;
}

inline VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT PhysicalDeviceVertexInputDynamicStateFeaturesEXT(
  VkBool32 vertexInputDynamicState
)
{
  VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT;
  temp.pNext = nullptr;
  temp.vertexInputDynamicState = vertexInputDynamicState;

  return temp;
}

inline VkVertexInputBindingDescription2EXT VertexInputBindingDescription2EXT(
  uint32_t binding,
  uint32_t stride,
  VkVertexInputRate inputRate,
  uint32_t divisor
)
{
  VkVertexInputBindingDescription2EXT temp;
  temp.sType = VK_STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT;
  temp.pNext = nullptr;
  temp.binding = binding;
  temp.stride = stride;
  temp.inputRate = inputRate;
  temp.divisor = divisor;

  return temp;
}

inline VkVertexInputAttributeDescription2EXT VertexInputAttributeDescription2EXT(
  uint32_t location,
  uint32_t binding,
  VkFormat format,
  uint32_t offset
)
{
  VkVertexInputAttributeDescription2EXT temp;
  temp.sType = VK_STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT;
  temp.pNext = nullptr;
  temp.location = location;
  temp.binding = binding;
  temp.format = format;
  temp.offset = offset;

  return temp;
}

inline VkPhysicalDeviceColorWriteEnableFeaturesEXT PhysicalDeviceColorWriteEnableFeaturesEXT(
  VkBool32 colorWriteEnable
)
{
  VkPhysicalDeviceColorWriteEnableFeaturesEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT;
  temp.pNext = nullptr;
  temp.colorWriteEnable = colorWriteEnable;

  return temp;
}

inline VkPipelineColorWriteCreateInfoEXT PipelineColorWriteCreateInfoEXT(
  uint32_t attachmentCount,
  const VkBool32* pColorWriteEnables
)
{
  VkPipelineColorWriteCreateInfoEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_PIPELINE_COLOR_WRITE_CREATE_INFO_EXT;
  temp.pNext = nullptr;
  temp.attachmentCount = attachmentCount;
  temp.pColorWriteEnables = pColorWriteEnables;

  return temp;
}

inline VkMemoryBarrier2KHR MemoryBarrier2KHR(
  VkPipelineStageFlags2KHR srcStageMask,
  VkAccessFlags2KHR srcAccessMask,
  VkPipelineStageFlags2KHR dstStageMask,
  VkAccessFlags2KHR dstAccessMask
)
{
  VkMemoryBarrier2KHR temp;
  temp.sType = VK_STRUCTURE_TYPE_MEMORY_BARRIER_2_KHR;
  temp.pNext = nullptr;
  temp.srcStageMask = srcStageMask;
  temp.srcAccessMask = srcAccessMask;
  temp.dstStageMask = dstStageMask;
  temp.dstAccessMask = dstAccessMask;

  return temp;
}

inline VkImageMemoryBarrier2KHR ImageMemoryBarrier2KHR(
  VkPipelineStageFlags2KHR srcStageMask,
  VkAccessFlags2KHR srcAccessMask,
  VkPipelineStageFlags2KHR dstStageMask,
  VkAccessFlags2KHR dstAccessMask,
  VkImageLayout oldLayout,
  VkImageLayout newLayout,
  uint32_t srcQueueFamilyIndex,
  uint32_t dstQueueFamilyIndex,
  VkImage image,
  VkImageSubresourceRange subresourceRange
)
{
  VkImageMemoryBarrier2KHR temp;
  temp.sType = VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2_KHR;
  temp.pNext = nullptr;
  temp.srcStageMask = srcStageMask;
  temp.srcAccessMask = srcAccessMask;
  temp.dstStageMask = dstStageMask;
  temp.dstAccessMask = dstAccessMask;
  temp.oldLayout = oldLayout;
  temp.newLayout = newLayout;
  temp.srcQueueFamilyIndex = srcQueueFamilyIndex;
  temp.dstQueueFamilyIndex = dstQueueFamilyIndex;
  temp.image = image;
  temp.subresourceRange = subresourceRange;

  return temp;
}

inline VkBufferMemoryBarrier2KHR BufferMemoryBarrier2KHR(
  VkPipelineStageFlags2KHR srcStageMask,
  VkAccessFlags2KHR srcAccessMask,
  VkPipelineStageFlags2KHR dstStageMask,
  VkAccessFlags2KHR dstAccessMask,
  uint32_t srcQueueFamilyIndex,
  uint32_t dstQueueFamilyIndex,
  VkBuffer buffer,
  VkDeviceSize offset,
  VkDeviceSize size
)
{
  VkBufferMemoryBarrier2KHR temp;
  temp.sType = VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2_KHR;
  temp.pNext = nullptr;
  temp.srcStageMask = srcStageMask;
  temp.srcAccessMask = srcAccessMask;
  temp.dstStageMask = dstStageMask;
  temp.dstAccessMask = dstAccessMask;
  temp.srcQueueFamilyIndex = srcQueueFamilyIndex;
  temp.dstQueueFamilyIndex = dstQueueFamilyIndex;
  temp.buffer = buffer;
  temp.offset = offset;
  temp.size = size;

  return temp;
}

inline VkDependencyInfoKHR DependencyInfoKHR(
  VkDependencyFlags dependencyFlags,
  uint32_t memoryBarrierCount,
  const VkMemoryBarrier2KHR* pMemoryBarriers,
  uint32_t bufferMemoryBarrierCount,
  const VkBufferMemoryBarrier2KHR* pBufferMemoryBarriers,
  uint32_t imageMemoryBarrierCount,
  const VkImageMemoryBarrier2KHR* pImageMemoryBarriers
)
{
  VkDependencyInfoKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_DEPENDENCY_INFO_KHR;
  temp.pNext = nullptr;
  temp.dependencyFlags = dependencyFlags;
  temp.memoryBarrierCount = memoryBarrierCount;
  temp.pMemoryBarriers = pMemoryBarriers;
  temp.bufferMemoryBarrierCount = bufferMemoryBarrierCount;
  temp.pBufferMemoryBarriers = pBufferMemoryBarriers;
  temp.imageMemoryBarrierCount = imageMemoryBarrierCount;
  temp.pImageMemoryBarriers = pImageMemoryBarriers;

  return temp;
}

inline VkSemaphoreSubmitInfoKHR SemaphoreSubmitInfoKHR(
  VkSemaphore semaphore,
  uint64_t value,
  VkPipelineStageFlags2KHR stageMask,
  uint32_t deviceIndex
)
{
  VkSemaphoreSubmitInfoKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO_KHR;
  temp.pNext = nullptr;
  temp.semaphore = semaphore;
  temp.value = value;
  temp.stageMask = stageMask;
  temp.deviceIndex = deviceIndex;

  return temp;
}

inline VkCommandBufferSubmitInfoKHR CommandBufferSubmitInfoKHR(
  VkCommandBuffer commandBuffer,
  uint32_t deviceMask
)
{
  VkCommandBufferSubmitInfoKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO_KHR;
  temp.pNext = nullptr;
  temp.commandBuffer = commandBuffer;
  temp.deviceMask = deviceMask;

  return temp;
}

inline VkSubmitInfo2KHR SubmitInfo2KHR(
  VkSubmitFlagsKHR flags,
  uint32_t waitSemaphoreInfoCount,
  const VkSemaphoreSubmitInfoKHR* pWaitSemaphoreInfos,
  uint32_t commandBufferInfoCount,
  const VkCommandBufferSubmitInfoKHR* pCommandBufferInfos,
  uint32_t signalSemaphoreInfoCount,
  const VkSemaphoreSubmitInfoKHR* pSignalSemaphoreInfos
)
{
  VkSubmitInfo2KHR temp;
  temp.sType = VK_STRUCTURE_TYPE_SUBMIT_INFO_2_KHR;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.waitSemaphoreInfoCount = waitSemaphoreInfoCount;
  temp.pWaitSemaphoreInfos = pWaitSemaphoreInfos;
  temp.commandBufferInfoCount = commandBufferInfoCount;
  temp.pCommandBufferInfos = pCommandBufferInfos;
  temp.signalSemaphoreInfoCount = signalSemaphoreInfoCount;
  temp.pSignalSemaphoreInfos = pSignalSemaphoreInfos;

  return temp;
}

inline VkPhysicalDeviceSynchronization2FeaturesKHR PhysicalDeviceSynchronization2FeaturesKHR(
  VkBool32 synchronization2
)
{
  VkPhysicalDeviceSynchronization2FeaturesKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES_KHR;
  temp.pNext = nullptr;
  temp.synchronization2 = synchronization2;

  return temp;
}

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoQueueFamilyProperties2KHR VideoQueueFamilyProperties2KHR(
  VkVideoCodecOperationFlagsKHR videoCodecOperations
)
{
  VkVideoQueueFamilyProperties2KHR temp;
  temp.sType = VK_STRUCTURE_TYPE_VIDEO_QUEUE_FAMILY_PROPERTIES_2_KHR;
  temp.pNext = nullptr;
  temp.videoCodecOperations = videoCodecOperations;

  return temp;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoProfilesKHR VideoProfilesKHR(
  uint32_t profileCount,
  const VkVideoProfileKHR* pProfiles
)
{
  VkVideoProfilesKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_VIDEO_PROFILES_KHR;
  temp.pNext = nullptr;
  temp.profileCount = profileCount;
  temp.pProfiles = pProfiles;

  return temp;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoProfileKHR VideoProfileKHR(
  VkVideoCodecOperationFlagBitsKHR videoCodecOperation,
  VkVideoChromaSubsamplingFlagsKHR chromaSubsampling,
  VkVideoComponentBitDepthFlagsKHR lumaBitDepth,
  VkVideoComponentBitDepthFlagsKHR chromaBitDepth
)
{
  VkVideoProfileKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_VIDEO_PROFILE_KHR;
  temp.pNext = nullptr;
  temp.videoCodecOperation = videoCodecOperation;
  temp.chromaSubsampling = chromaSubsampling;
  temp.lumaBitDepth = lumaBitDepth;
  temp.chromaBitDepth = chromaBitDepth;

  return temp;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoGetMemoryPropertiesKHR VideoGetMemoryPropertiesKHR(
  uint32_t memoryBindIndex,
  VkMemoryRequirements2* pMemoryRequirements
)
{
  VkVideoGetMemoryPropertiesKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_VIDEO_GET_MEMORY_PROPERTIES_KHR;
  temp.pNext = nullptr;
  temp.memoryBindIndex = memoryBindIndex;
  temp.pMemoryRequirements = pMemoryRequirements;

  return temp;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoBindMemoryKHR VideoBindMemoryKHR(
  uint32_t memoryBindIndex,
  VkDeviceMemory memory,
  VkDeviceSize memoryOffset,
  VkDeviceSize memorySize
)
{
  VkVideoBindMemoryKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_VIDEO_BIND_MEMORY_KHR;
  temp.pNext = nullptr;
  temp.memoryBindIndex = memoryBindIndex;
  temp.memory = memory;
  temp.memoryOffset = memoryOffset;
  temp.memorySize = memorySize;

  return temp;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoPictureResourceKHR VideoPictureResourceKHR(
  VkOffset2D codedOffset,
  VkExtent2D codedExtent,
  uint32_t baseArrayLayer,
  VkImageView imageViewBinding
)
{
  VkVideoPictureResourceKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_VIDEO_PICTURE_RESOURCE_KHR;
  temp.pNext = nullptr;
  temp.codedOffset = codedOffset;
  temp.codedExtent = codedExtent;
  temp.baseArrayLayer = baseArrayLayer;
  temp.imageViewBinding = imageViewBinding;

  return temp;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoReferenceSlotKHR VideoReferenceSlotKHR(
  int8_t slotIndex,
  const VkVideoPictureResourceKHR* pPictureResource
)
{
  VkVideoReferenceSlotKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_VIDEO_REFERENCE_SLOT_KHR;
  temp.pNext = nullptr;
  temp.slotIndex = slotIndex;
  temp.pPictureResource = pPictureResource;

  return temp;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoDecodeInfoKHR VideoDecodeInfoKHR(
  VkVideoDecodeFlagsKHR flags,
  VkOffset2D codedOffset,
  VkExtent2D codedExtent,
  VkBuffer srcBuffer,
  VkDeviceSize srcBufferOffset,
  VkDeviceSize srcBufferRange,
  VkVideoPictureResourceKHR dstPictureResource,
  const VkVideoReferenceSlotKHR* pSetupReferenceSlot,
  uint32_t referenceSlotCount,
  const VkVideoReferenceSlotKHR* pReferenceSlots
)
{
  VkVideoDecodeInfoKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_VIDEO_DECODE_INFO_KHR;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.codedOffset = codedOffset;
  temp.codedExtent = codedExtent;
  temp.srcBuffer = srcBuffer;
  temp.srcBufferOffset = srcBufferOffset;
  temp.srcBufferRange = srcBufferRange;
  temp.dstPictureResource = dstPictureResource;
  temp.pSetupReferenceSlot = pSetupReferenceSlot;
  temp.referenceSlotCount = referenceSlotCount;
  temp.pReferenceSlots = pReferenceSlots;

  return temp;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoDecodeH264ProfileEXT VideoDecodeH264ProfileEXT(
  StdVideoH264ProfileIdc stdProfileIdc,
  VkVideoDecodeH264FieldLayoutFlagsEXT fieldLayout
)
{
  VkVideoDecodeH264ProfileEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_VIDEO_DECODE_264_PROFILE_EXT;
  temp.pNext = nullptr;
  temp.stdProfileIdc = stdProfileIdc;
  temp.fieldLayout = fieldLayout;

  return temp;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoDecodeH264SessionCreateInfoEXT VideoDecodeH264SessionCreateInfoEXT(
  VkVideoDecodeH264CreateFlagsEXT flags,
  const VkExtensionProperties* pStdExtensionVersion
)
{
  VkVideoDecodeH264SessionCreateInfoEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_VIDEO_DECODE_264_SESSION_CREATE_INFO_EXT;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.pStdExtensionVersion = pStdExtensionVersion;

  return temp;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoDecodeH264SessionParametersAddInfoEXT VideoDecodeH264SessionParametersAddInfoEXT(
  uint32_t spsStdCount,
  const StdVideoH264SequenceParameterSet* pSpsStd,
  uint32_t ppsStdCount,
  const StdVideoH264PictureParameterSet* pPpsStd
)
{
  VkVideoDecodeH264SessionParametersAddInfoEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_VIDEO_DECODE_264_SESSION_PARAMETERS_ADD_INFO_EXT;
  temp.pNext = nullptr;
  temp.spsStdCount = spsStdCount;
  temp.pSpsStd = pSpsStd;
  temp.ppsStdCount = ppsStdCount;
  temp.pPpsStd = pPpsStd;

  return temp;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoDecodeH264SessionParametersCreateInfoEXT VideoDecodeH264SessionParametersCreateInfoEXT(
  uint32_t maxSpsStdCount,
  uint32_t maxPpsStdCount,
  const VkVideoDecodeH264SessionParametersAddInfoEXT* pParametersAddInfo
)
{
  VkVideoDecodeH264SessionParametersCreateInfoEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_VIDEO_DECODE_264_SESSION_PARAMETERS_CREATE_INFO_EXT;
  temp.pNext = nullptr;
  temp.maxSpsStdCount = maxSpsStdCount;
  temp.maxPpsStdCount = maxPpsStdCount;
  temp.pParametersAddInfo = pParametersAddInfo;

  return temp;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoDecodeH264PictureInfoEXT VideoDecodeH264PictureInfoEXT(
  const StdVideoDecodeH264PictureInfo* pStdPictureInfo,
  uint32_t slicesCount,
  const uint32_t* pSlicesDataOffsets
)
{
  VkVideoDecodeH264PictureInfoEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_VIDEO_DECODE_264_PICTURE_INFO_EXT;
  temp.pNext = nullptr;
  temp.pStdPictureInfo = pStdPictureInfo;
  temp.slicesCount = slicesCount;
  temp.pSlicesDataOffsets = pSlicesDataOffsets;

  return temp;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoDecodeH264DpbSlotInfoEXT VideoDecodeH264DpbSlotInfoEXT(
  const StdVideoDecodeH264ReferenceInfo* pStdReferenceInfo
)
{
  VkVideoDecodeH264DpbSlotInfoEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_VIDEO_DECODE_264_DPB_SLOT_INFO_EXT;
  temp.pNext = nullptr;
  temp.pStdReferenceInfo = pStdReferenceInfo;

  return temp;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoDecodeH264MvcEXT VideoDecodeH264MvcEXT(
  const StdVideoDecodeH264Mvc* pStdMvc
)
{
  VkVideoDecodeH264MvcEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_VIDEO_DECODE_264_MVC_EXT;
  temp.pNext = nullptr;
  temp.pStdMvc = pStdMvc;

  return temp;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoDecodeH265ProfileEXT VideoDecodeH265ProfileEXT(
  StdVideoH265ProfileIdc stdProfileIdc
)
{
  VkVideoDecodeH265ProfileEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_VIDEO_DECODE_265_PROFILE_EXT;
  temp.pNext = nullptr;
  temp.stdProfileIdc = stdProfileIdc;

  return temp;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoDecodeH265SessionCreateInfoEXT VideoDecodeH265SessionCreateInfoEXT(
  VkVideoDecodeH265CreateFlagsEXT flags,
  const VkExtensionProperties* pStdExtensionVersion
)
{
  VkVideoDecodeH265SessionCreateInfoEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_VIDEO_DECODE_265_SESSION_CREATE_INFO_EXT;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.pStdExtensionVersion = pStdExtensionVersion;

  return temp;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoDecodeH265SessionParametersAddInfoEXT VideoDecodeH265SessionParametersAddInfoEXT(
  uint32_t spsStdCount,
  const StdVideoH265SequenceParameterSet* pSpsStd,
  uint32_t ppsStdCount,
  const StdVideoH265PictureParameterSet* pPpsStd
)
{
  VkVideoDecodeH265SessionParametersAddInfoEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_VIDEO_DECODE_265_SESSION_PARAMETERS_ADD_INFO_EXT;
  temp.pNext = nullptr;
  temp.spsStdCount = spsStdCount;
  temp.pSpsStd = pSpsStd;
  temp.ppsStdCount = ppsStdCount;
  temp.pPpsStd = pPpsStd;

  return temp;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoDecodeH265SessionParametersCreateInfoEXT VideoDecodeH265SessionParametersCreateInfoEXT(
  uint32_t maxSpsStdCount,
  uint32_t maxPpsStdCount,
  const VkVideoDecodeH265SessionParametersAddInfoEXT* pParametersAddInfo
)
{
  VkVideoDecodeH265SessionParametersCreateInfoEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_VIDEO_DECODE_265_SESSION_PARAMETERS_CREATE_INFO_EXT;
  temp.pNext = nullptr;
  temp.maxSpsStdCount = maxSpsStdCount;
  temp.maxPpsStdCount = maxPpsStdCount;
  temp.pParametersAddInfo = pParametersAddInfo;

  return temp;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoDecodeH265PictureInfoEXT VideoDecodeH265PictureInfoEXT(
  StdVideoDecodeH265PictureInfo* pStdPictureInfo,
  uint32_t slicesCount,
  const uint32_t* pSlicesDataOffsets
)
{
  VkVideoDecodeH265PictureInfoEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_VIDEO_DECODE_265_PICTURE_INFO_EXT;
  temp.pNext = nullptr;
  temp.pStdPictureInfo = pStdPictureInfo;
  temp.slicesCount = slicesCount;
  temp.pSlicesDataOffsets = pSlicesDataOffsets;

  return temp;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoDecodeH265DpbSlotInfoEXT VideoDecodeH265DpbSlotInfoEXT(
  const StdVideoDecodeH265ReferenceInfo* pStdReferenceInfo
)
{
  VkVideoDecodeH265DpbSlotInfoEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_VIDEO_DECODE_265_DPB_SLOT_INFO_EXT;
  temp.pNext = nullptr;
  temp.pStdReferenceInfo = pStdReferenceInfo;

  return temp;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoSessionCreateInfoKHR VideoSessionCreateInfoKHR(
  uint32_t queueFamilyIndex,
  VkVideoSessionCreateFlagsKHR flags,
  const VkVideoProfileKHR* pVideoProfile,
  VkFormat pictureFormat,
  VkExtent2D maxCodedExtent,
  VkFormat referencePicturesFormat,
  uint32_t maxReferencePicturesSlotsCount,
  uint32_t maxReferencePicturesActiveCount
)
{
  VkVideoSessionCreateInfoKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_VIDEO_SESSION_CREATE_INFO_KHR;
  temp.pNext = nullptr;
  temp.queueFamilyIndex = queueFamilyIndex;
  temp.flags = flags;
  temp.pVideoProfile = pVideoProfile;
  temp.pictureFormat = pictureFormat;
  temp.maxCodedExtent = maxCodedExtent;
  temp.referencePicturesFormat = referencePicturesFormat;
  temp.maxReferencePicturesSlotsCount = maxReferencePicturesSlotsCount;
  temp.maxReferencePicturesActiveCount = maxReferencePicturesActiveCount;

  return temp;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoSessionParametersCreateInfoKHR VideoSessionParametersCreateInfoKHR(
  VkVideoSessionParametersKHR videoSessionParametersTemplate,
  VkVideoSessionKHR videoSession
)
{
  VkVideoSessionParametersCreateInfoKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_CREATE_INFO_KHR;
  temp.pNext = nullptr;
  temp.videoSessionParametersTemplate = videoSessionParametersTemplate;
  temp.videoSession = videoSession;

  return temp;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoSessionParametersUpdateInfoKHR VideoSessionParametersUpdateInfoKHR(
  uint32_t updateSequenceCount
)
{
  VkVideoSessionParametersUpdateInfoKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_VIDEO_SESSION_PARAMETERS_UPDATE_INFO_KHR;
  temp.pNext = nullptr;
  temp.updateSequenceCount = updateSequenceCount;

  return temp;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoBeginCodingInfoKHR VideoBeginCodingInfoKHR(
  VkVideoBeginCodingFlagsKHR flags,
  VkVideoCodingQualityPresetFlagsKHR codecQualityPreset,
  VkVideoSessionKHR videoSession,
  VkVideoSessionParametersKHR videoSessionParameters,
  uint32_t referenceSlotCount,
  const VkVideoReferenceSlotKHR* pReferenceSlots
)
{
  VkVideoBeginCodingInfoKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_VIDEO_BEGIN_CODING_INFO_KHR;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.codecQualityPreset = codecQualityPreset;
  temp.videoSession = videoSession;
  temp.videoSessionParameters = videoSessionParameters;
  temp.referenceSlotCount = referenceSlotCount;
  temp.pReferenceSlots = pReferenceSlots;

  return temp;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoEndCodingInfoKHR VideoEndCodingInfoKHR(
  VkVideoEndCodingFlagsKHR flags
)
{
  VkVideoEndCodingInfoKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_VIDEO_END_CODING_INFO_KHR;
  temp.pNext = nullptr;
  temp.flags = flags;

  return temp;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoCodingControlInfoKHR VideoCodingControlInfoKHR(
  VkVideoCodingControlFlagsKHR flags
)
{
  VkVideoCodingControlInfoKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_VIDEO_CODING_CONTROL_INFO_KHR;
  temp.pNext = nullptr;
  temp.flags = flags;

  return temp;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoEncodeInfoKHR VideoEncodeInfoKHR(
  VkVideoEncodeFlagsKHR flags,
  uint32_t qualityLevel,
  VkExtent2D codedExtent,
  VkBuffer dstBitstreamBuffer,
  VkDeviceSize dstBitstreamBufferOffset,
  VkDeviceSize dstBitstreamBufferMaxRange,
  VkVideoPictureResourceKHR srcPictureResource,
  const VkVideoReferenceSlotKHR* pSetupReferenceSlot,
  uint32_t referenceSlotCount,
  const VkVideoReferenceSlotKHR* pReferenceSlots
)
{
  VkVideoEncodeInfoKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_VIDEO_ENCODE_INFO_KHR;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.qualityLevel = qualityLevel;
  temp.codedExtent = codedExtent;
  temp.dstBitstreamBuffer = dstBitstreamBuffer;
  temp.dstBitstreamBufferOffset = dstBitstreamBufferOffset;
  temp.dstBitstreamBufferMaxRange = dstBitstreamBufferMaxRange;
  temp.srcPictureResource = srcPictureResource;
  temp.pSetupReferenceSlot = pSetupReferenceSlot;
  temp.referenceSlotCount = referenceSlotCount;
  temp.pReferenceSlots = pReferenceSlots;

  return temp;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoEncodeRateControlInfoKHR VideoEncodeRateControlInfoKHR(
  VkVideoEncodeRateControlFlagsKHR flags,
  VkVideoEncodeRateControlModeFlagBitsKHR rateControlMode,
  uint32_t averageBitrate,
  uint16_t peakToAverageBitrateRatio,
  uint16_t frameRateNumerator,
  uint16_t frameRateDenominator,
  uint32_t virtualBufferSizeInMs
)
{
  VkVideoEncodeRateControlInfoKHR temp;
  temp.sType = VK_STRUCTURE_TYPE_VIDEO_ENCODE_RATE_CONTROL_INFO_KHR;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.rateControlMode = rateControlMode;
  temp.averageBitrate = averageBitrate;
  temp.peakToAverageBitrateRatio = peakToAverageBitrateRatio;
  temp.frameRateNumerator = frameRateNumerator;
  temp.frameRateDenominator = frameRateDenominator;
  temp.virtualBufferSizeInMs = virtualBufferSizeInMs;

  return temp;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoEncodeH264CapabilitiesEXT VideoEncodeH264CapabilitiesEXT(
  VkVideoEncodeH264CapabilitiesFlagsEXT flags,
  VkVideoEncodeH264InputModeFlagsEXT inputModeFlags,
  VkVideoEncodeH264OutputModeFlagsEXT outputModeFlags,
  VkExtent2D minPictureSizeInMbs,
  VkExtent2D maxPictureSizeInMbs,
  VkExtent2D inputImageDataAlignment,
  uint8_t maxNumL0ReferenceForP,
  uint8_t maxNumL0ReferenceForB,
  uint8_t maxNumL1Reference,
  uint8_t qualityLevelCount,
  VkExtensionProperties stdExtensionVersion
)
{
  VkVideoEncodeH264CapabilitiesEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_VIDEO_ENCODE_264_CAPABILITIES_EXT;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.inputModeFlags = inputModeFlags;
  temp.outputModeFlags = outputModeFlags;
  temp.minPictureSizeInMbs = minPictureSizeInMbs;
  temp.maxPictureSizeInMbs = maxPictureSizeInMbs;
  temp.inputImageDataAlignment = inputImageDataAlignment;
  temp.maxNumL0ReferenceForP = maxNumL0ReferenceForP;
  temp.maxNumL0ReferenceForB = maxNumL0ReferenceForB;
  temp.maxNumL1Reference = maxNumL1Reference;
  temp.qualityLevelCount = qualityLevelCount;
  temp.stdExtensionVersion = stdExtensionVersion;

  return temp;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoEncodeH264SessionCreateInfoEXT VideoEncodeH264SessionCreateInfoEXT(
  VkVideoEncodeH264CreateFlagsEXT flags,
  VkExtent2D maxPictureSizeInMbs,
  const VkExtensionProperties* pStdExtensionVersion
)
{
  VkVideoEncodeH264SessionCreateInfoEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_VIDEO_ENCODE_264_SESSION_CREATE_INFO_EXT;
  temp.pNext = nullptr;
  temp.flags = flags;
  temp.maxPictureSizeInMbs = maxPictureSizeInMbs;
  temp.pStdExtensionVersion = pStdExtensionVersion;

  return temp;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoEncodeH264SessionParametersAddInfoEXT VideoEncodeH264SessionParametersAddInfoEXT(
  uint32_t spsStdCount,
  const StdVideoH264SequenceParameterSet* pSpsStd,
  uint32_t ppsStdCount,
  const StdVideoH264PictureParameterSet* pPpsStd
)
{
  VkVideoEncodeH264SessionParametersAddInfoEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_VIDEO_ENCODE_264_SESSION_PARAMETERS_ADD_INFO_EXT;
  temp.pNext = nullptr;
  temp.spsStdCount = spsStdCount;
  temp.pSpsStd = pSpsStd;
  temp.ppsStdCount = ppsStdCount;
  temp.pPpsStd = pPpsStd;

  return temp;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoEncodeH264SessionParametersCreateInfoEXT VideoEncodeH264SessionParametersCreateInfoEXT(
  uint32_t maxSpsStdCount,
  uint32_t maxPpsStdCount,
  const VkVideoEncodeH264SessionParametersAddInfoEXT* pParametersAddInfo
)
{
  VkVideoEncodeH264SessionParametersCreateInfoEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_VIDEO_ENCODE_264_SESSION_PARAMETERS_CREATE_INFO_EXT;
  temp.pNext = nullptr;
  temp.maxSpsStdCount = maxSpsStdCount;
  temp.maxPpsStdCount = maxPpsStdCount;
  temp.pParametersAddInfo = pParametersAddInfo;

  return temp;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoEncodeH264DpbSlotInfoEXT VideoEncodeH264DpbSlotInfoEXT(
  int8_t slotIndex,
  const StdVideoEncodeH264PictureInfo* pStdPictureInfo
)
{
  VkVideoEncodeH264DpbSlotInfoEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_VIDEO_ENCODE_264_DPB_SLOT_INFO_EXT;
  temp.pNext = nullptr;
  temp.slotIndex = slotIndex;
  temp.pStdPictureInfo = pStdPictureInfo;

  return temp;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoEncodeH264VclFrameInfoEXT VideoEncodeH264VclFrameInfoEXT(
  uint8_t refDefaultFinalList0EntryCount,
  const VkVideoEncodeH264DpbSlotInfoEXT* pRefDefaultFinalList0Entries,
  uint8_t refDefaultFinalList1EntryCount,
  const VkVideoEncodeH264DpbSlotInfoEXT* pRefDefaultFinalList1Entries,
  uint32_t naluSliceEntryCount,
  const VkVideoEncodeH264NaluSliceEXT* pNaluSliceEntries,
  const VkVideoEncodeH264DpbSlotInfoEXT* pCurrentPictureInfo
)
{
  VkVideoEncodeH264VclFrameInfoEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_VIDEO_ENCODE_264_VCL_FRAME_INFO_EXT;
  temp.pNext = nullptr;
  temp.refDefaultFinalList0EntryCount = refDefaultFinalList0EntryCount;
  temp.pRefDefaultFinalList0Entries = pRefDefaultFinalList0Entries;
  temp.refDefaultFinalList1EntryCount = refDefaultFinalList1EntryCount;
  temp.pRefDefaultFinalList1Entries = pRefDefaultFinalList1Entries;
  temp.naluSliceEntryCount = naluSliceEntryCount;
  temp.pNaluSliceEntries = pNaluSliceEntries;
  temp.pCurrentPictureInfo = pCurrentPictureInfo;

  return temp;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoEncodeH264EmitPictureParametersEXT VideoEncodeH264EmitPictureParametersEXT(
  uint8_t spsId,
  VkBool32 emitSpsEnable,
  uint32_t ppsIdEntryCount,
  const uint8_t* ppsIdEntries
)
{
  VkVideoEncodeH264EmitPictureParametersEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_VIDEO_ENCODE_264_EMIT_PICTURE_PARAMETERS_EXT;
  temp.pNext = nullptr;
  temp.spsId = spsId;
  temp.emitSpsEnable = emitSpsEnable;
  temp.ppsIdEntryCount = ppsIdEntryCount;
  temp.ppsIdEntries = ppsIdEntries;

  return temp;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoEncodeH264ProfileEXT VideoEncodeH264ProfileEXT(
  StdVideoH264ProfileIdc stdProfileIdc
)
{
  VkVideoEncodeH264ProfileEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_VIDEO_ENCODE_264_PROFILE_EXT;
  temp.pNext = nullptr;
  temp.stdProfileIdc = stdProfileIdc;

  return temp;
}
#endif

#ifdef  VK_ENABLE_BETA_EXTENSIONS
inline VkVideoEncodeH264NaluSliceEXT VideoEncodeH264NaluSliceEXT(
  const StdVideoEncodeH264SliceHeader* pSliceHeaderStd,
  uint32_t mbCount,
  uint8_t refFinalList0EntryCount,
  const VkVideoEncodeH264DpbSlotInfoEXT* pRefFinalList0Entries,
  uint8_t refFinalList1EntryCount,
  const VkVideoEncodeH264DpbSlotInfoEXT* pRefFinalList1Entries,
  uint32_t precedingNaluBytes,
  uint8_t minQp,
  uint8_t maxQp
)
{
  VkVideoEncodeH264NaluSliceEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_VIDEO_ENCODE_264_NALU_SLICE_EXT;
  temp.pNext = nullptr;
  temp.pSliceHeaderStd = pSliceHeaderStd;
  temp.mbCount = mbCount;
  temp.refFinalList0EntryCount = refFinalList0EntryCount;
  temp.pRefFinalList0Entries = pRefFinalList0Entries;
  temp.refFinalList1EntryCount = refFinalList1EntryCount;
  temp.pRefFinalList1Entries = pRefFinalList1Entries;
  temp.precedingNaluBytes = precedingNaluBytes;
  temp.minQp = minQp;
  temp.maxQp = maxQp;

  return temp;
}
#endif

inline VkPhysicalDeviceInheritedViewportScissorFeaturesNV PhysicalDeviceInheritedViewportScissorFeaturesNV(
  VkBool32 inheritedViewportScissor2D
)
{
  VkPhysicalDeviceInheritedViewportScissorFeaturesNV temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV;
  temp.pNext = nullptr;
  temp.inheritedViewportScissor2D = inheritedViewportScissor2D;

  return temp;
}

inline VkCommandBufferInheritanceViewportScissorInfoNV CommandBufferInheritanceViewportScissorInfoNV(
  VkBool32 viewportScissor2D,
  uint32_t viewportDepthCount,
  const VkViewport* pViewportDepths
)
{
  VkCommandBufferInheritanceViewportScissorInfoNV temp;
  temp.sType = VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV;
  temp.pNext = nullptr;
  temp.viewportScissor2D = viewportScissor2D;
  temp.viewportDepthCount = viewportDepthCount;
  temp.pViewportDepths = pViewportDepths;

  return temp;
}

inline VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT PhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT(
  VkBool32 ycbcr2plane444Formats
)
{
  VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT temp;
  temp.sType = VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT;
  temp.pNext = nullptr;
  temp.ycbcr2plane444Formats = ycbcr2plane444Formats;

  return temp;
}

///@}

/**
 * @name VulkanUntaggedStructParamsInit For each small Vulkan API struct,
 * a function to initialize the members of the struct.
 *
 * The use of these functions ensures no member is forgotten by the user.
 * 
 * Usage without these helpers:
 *
 *     VkOffset2D offset;
 *     offset.x = 64;
 *     offset.y = 128;
 *     
 * Usage with these helpers:
 *
 *     auto offset = kr::Offset2D(64, 128);
 *
 */
 ///@{

inline VkOffset2D Offset2D(
  int32_t x,
  int32_t y
)
{
  VkOffset2D temp;
  temp.x = x;
  temp.y = y;

  return temp;
}

inline VkOffset3D Offset3D(
  int32_t x,
  int32_t y,
  int32_t z
)
{
  VkOffset3D temp;
  temp.x = x;
  temp.y = y;
  temp.z = z;

  return temp;
}

inline VkExtent2D Extent2D(
  uint32_t width,
  uint32_t height
)
{
  VkExtent2D temp;
  temp.width = width;
  temp.height = height;

  return temp;
}

inline VkExtent3D Extent3D(
  uint32_t width,
  uint32_t height,
  uint32_t depth
)
{
  VkExtent3D temp;
  temp.width = width;
  temp.height = height;
  temp.depth = depth;

  return temp;
}

inline VkViewport Viewport(
  float x,
  float y,
  float width,
  float height,
  float minDepth,
  float maxDepth
)
{
  VkViewport temp;
  temp.x = x;
  temp.y = y;
  temp.width = width;
  temp.height = height;
  temp.minDepth = minDepth;
  temp.maxDepth = maxDepth;

  return temp;
}

inline VkRect2D Rect2D(
  VkOffset2D offset,
  VkExtent2D extent
)
{
  VkRect2D temp;
  temp.offset = offset;
  temp.extent = extent;

  return temp;
}

inline VkClearRect ClearRect(
  VkRect2D rect,
  uint32_t baseArrayLayer,
  uint32_t layerCount
)
{
  VkClearRect temp;
  temp.rect = rect;
  temp.baseArrayLayer = baseArrayLayer;
  temp.layerCount = layerCount;

  return temp;
}

inline VkComponentMapping ComponentMapping(
  VkComponentSwizzle r,
  VkComponentSwizzle g,
  VkComponentSwizzle b,
  VkComponentSwizzle a
)
{
  VkComponentMapping temp;
  temp.r = r;
  temp.g = g;
  temp.b = b;
  temp.a = a;

  return temp;
}

inline VkAllocationCallbacks AllocationCallbacks(
  void* pUserData,
  PFN_vkAllocationFunction pfnAllocation,
  PFN_vkReallocationFunction pfnReallocation,
  PFN_vkFreeFunction pfnFree,
  PFN_vkInternalAllocationNotification pfnInternalAllocation,
  PFN_vkInternalFreeNotification pfnInternalFree
)
{
  VkAllocationCallbacks temp;
  temp.pUserData = pUserData;
  temp.pfnAllocation = pfnAllocation;
  temp.pfnReallocation = pfnReallocation;
  temp.pfnFree = pfnFree;
  temp.pfnInternalAllocation = pfnInternalAllocation;
  temp.pfnInternalFree = pfnInternalFree;

  return temp;
}

inline VkDescriptorBufferInfo DescriptorBufferInfo(
  VkBuffer buffer,
  VkDeviceSize offset,
  VkDeviceSize range
)
{
  VkDescriptorBufferInfo temp;
  temp.buffer = buffer;
  temp.offset = offset;
  temp.range = range;

  return temp;
}

inline VkDescriptorImageInfo DescriptorImageInfo(
  VkSampler sampler,
  VkImageView imageView,
  VkImageLayout imageLayout
)
{
  VkDescriptorImageInfo temp;
  temp.sampler = sampler;
  temp.imageView = imageView;
  temp.imageLayout = imageLayout;

  return temp;
}

inline VkImageSubresource ImageSubresource(
  VkImageAspectFlags aspectMask,
  uint32_t mipLevel,
  uint32_t arrayLayer
)
{
  VkImageSubresource temp;
  temp.aspectMask = aspectMask;
  temp.mipLevel = mipLevel;
  temp.arrayLayer = arrayLayer;

  return temp;
}

inline VkImageSubresourceLayers ImageSubresourceLayers(
  VkImageAspectFlags aspectMask,
  uint32_t mipLevel,
  uint32_t baseArrayLayer,
  uint32_t layerCount
)
{
  VkImageSubresourceLayers temp;
  temp.aspectMask = aspectMask;
  temp.mipLevel = mipLevel;
  temp.baseArrayLayer = baseArrayLayer;
  temp.layerCount = layerCount;

  return temp;
}

inline VkImageSubresourceRange ImageSubresourceRange(
  VkImageAspectFlags aspectMask,
  uint32_t baseMipLevel,
  uint32_t levelCount,
  uint32_t baseArrayLayer,
  uint32_t layerCount
)
{
  VkImageSubresourceRange temp;
  temp.aspectMask = aspectMask;
  temp.baseMipLevel = baseMipLevel;
  temp.levelCount = levelCount;
  temp.baseArrayLayer = baseArrayLayer;
  temp.layerCount = layerCount;

  return temp;
}

inline VkBufferCopy BufferCopy(
  VkDeviceSize srcOffset,
  VkDeviceSize dstOffset,
  VkDeviceSize size
)
{
  VkBufferCopy temp;
  temp.srcOffset = srcOffset;
  temp.dstOffset = dstOffset;
  temp.size = size;

  return temp;
}

inline VkSparseMemoryBind SparseMemoryBind(
  VkDeviceSize resourceOffset,
  VkDeviceSize size,
  VkDeviceMemory memory,
  VkDeviceSize memoryOffset,
  VkSparseMemoryBindFlags flags
)
{
  VkSparseMemoryBind temp;
  temp.resourceOffset = resourceOffset;
  temp.size = size;
  temp.memory = memory;
  temp.memoryOffset = memoryOffset;
  temp.flags = flags;

  return temp;
}

inline VkSparseImageMemoryBind SparseImageMemoryBind(
  VkImageSubresource subresource,
  VkOffset3D offset,
  VkExtent3D extent,
  VkDeviceMemory memory,
  VkDeviceSize memoryOffset,
  VkSparseMemoryBindFlags flags
)
{
  VkSparseImageMemoryBind temp;
  temp.subresource = subresource;
  temp.offset = offset;
  temp.extent = extent;
  temp.memory = memory;
  temp.memoryOffset = memoryOffset;
  temp.flags = flags;

  return temp;
}

inline VkSparseBufferMemoryBindInfo SparseBufferMemoryBindInfo(
  VkBuffer buffer,
  uint32_t bindCount,
  const VkSparseMemoryBind* pBinds
)
{
  VkSparseBufferMemoryBindInfo temp;
  temp.buffer = buffer;
  temp.bindCount = bindCount;
  temp.pBinds = pBinds;

  return temp;
}

inline VkSparseImageOpaqueMemoryBindInfo SparseImageOpaqueMemoryBindInfo(
  VkImage image,
  uint32_t bindCount,
  const VkSparseMemoryBind* pBinds
)
{
  VkSparseImageOpaqueMemoryBindInfo temp;
  temp.image = image;
  temp.bindCount = bindCount;
  temp.pBinds = pBinds;

  return temp;
}

inline VkSparseImageMemoryBindInfo SparseImageMemoryBindInfo(
  VkImage image,
  uint32_t bindCount,
  const VkSparseImageMemoryBind* pBinds
)
{
  VkSparseImageMemoryBindInfo temp;
  temp.image = image;
  temp.bindCount = bindCount;
  temp.pBinds = pBinds;

  return temp;
}

inline VkImageCopy ImageCopy(
  VkImageSubresourceLayers srcSubresource,
  VkOffset3D srcOffset,
  VkImageSubresourceLayers dstSubresource,
  VkOffset3D dstOffset,
  VkExtent3D extent
)
{
  VkImageCopy temp;
  temp.srcSubresource = srcSubresource;
  temp.srcOffset = srcOffset;
  temp.dstSubresource = dstSubresource;
  temp.dstOffset = dstOffset;
  temp.extent = extent;

  return temp;
}

inline VkImageBlit ImageBlit(
  VkImageSubresourceLayers srcSubresource,
  VkOffset3D srcOffsets[2],
  VkImageSubresourceLayers dstSubresource,
  VkOffset3D dstOffsets[2]
)
{
  VkImageBlit temp;
  temp.srcSubresource = srcSubresource;
  for(size_t i = 0; i < 2; ++i){
    temp.srcOffsets[i] = srcOffsets[i];
  }
  temp.dstSubresource = dstSubresource;
  for(size_t i = 0; i < 2; ++i){
    temp.dstOffsets[i] = dstOffsets[i];
  }

  return temp;
}

inline VkBufferImageCopy BufferImageCopy(
  VkDeviceSize bufferOffset,
  uint32_t bufferRowLength,
  uint32_t bufferImageHeight,
  VkImageSubresourceLayers imageSubresource,
  VkOffset3D imageOffset,
  VkExtent3D imageExtent
)
{
  VkBufferImageCopy temp;
  temp.bufferOffset = bufferOffset;
  temp.bufferRowLength = bufferRowLength;
  temp.bufferImageHeight = bufferImageHeight;
  temp.imageSubresource = imageSubresource;
  temp.imageOffset = imageOffset;
  temp.imageExtent = imageExtent;

  return temp;
}

inline VkImageResolve ImageResolve(
  VkImageSubresourceLayers srcSubresource,
  VkOffset3D srcOffset,
  VkImageSubresourceLayers dstSubresource,
  VkOffset3D dstOffset,
  VkExtent3D extent
)
{
  VkImageResolve temp;
  temp.srcSubresource = srcSubresource;
  temp.srcOffset = srcOffset;
  temp.dstSubresource = dstSubresource;
  temp.dstOffset = dstOffset;
  temp.extent = extent;

  return temp;
}

inline VkDescriptorSetLayoutBinding DescriptorSetLayoutBinding(
  uint32_t binding,
  VkDescriptorType descriptorType,
  uint32_t descriptorCount,
  VkShaderStageFlags stageFlags,
  const VkSampler* pImmutableSamplers
)
{
  VkDescriptorSetLayoutBinding temp;
  temp.binding = binding;
  temp.descriptorType = descriptorType;
  temp.descriptorCount = descriptorCount;
  temp.stageFlags = stageFlags;
  temp.pImmutableSamplers = pImmutableSamplers;

  return temp;
}

inline VkDescriptorPoolSize DescriptorPoolSize(
  VkDescriptorType type,
  uint32_t descriptorCount
)
{
  VkDescriptorPoolSize temp;
  temp.type = type;
  temp.descriptorCount = descriptorCount;

  return temp;
}

inline VkSpecializationMapEntry SpecializationMapEntry(
  uint32_t constantID,
  uint32_t offset,
  size_t size
)
{
  VkSpecializationMapEntry temp;
  temp.constantID = constantID;
  temp.offset = offset;
  temp.size = size;

  return temp;
}

inline VkSpecializationInfo SpecializationInfo(
  uint32_t mapEntryCount,
  const VkSpecializationMapEntry* pMapEntries,
  size_t dataSize,
  const void* pData
)
{
  VkSpecializationInfo temp;
  temp.mapEntryCount = mapEntryCount;
  temp.pMapEntries = pMapEntries;
  temp.dataSize = dataSize;
  temp.pData = pData;

  return temp;
}

inline VkVertexInputBindingDescription VertexInputBindingDescription(
  uint32_t binding,
  uint32_t stride,
  VkVertexInputRate inputRate
)
{
  VkVertexInputBindingDescription temp;
  temp.binding = binding;
  temp.stride = stride;
  temp.inputRate = inputRate;

  return temp;
}

inline VkVertexInputAttributeDescription VertexInputAttributeDescription(
  uint32_t location,
  uint32_t binding,
  VkFormat format,
  uint32_t offset
)
{
  VkVertexInputAttributeDescription temp;
  temp.location = location;
  temp.binding = binding;
  temp.format = format;
  temp.offset = offset;

  return temp;
}

inline VkPipelineColorBlendAttachmentState PipelineColorBlendAttachmentState(
  VkBool32 blendEnable,
  VkBlendFactor srcColorBlendFactor,
  VkBlendFactor dstColorBlendFactor,
  VkBlendOp colorBlendOp,
  VkBlendFactor srcAlphaBlendFactor,
  VkBlendFactor dstAlphaBlendFactor,
  VkBlendOp alphaBlendOp,
  VkColorComponentFlags colorWriteMask
)
{
  VkPipelineColorBlendAttachmentState temp;
  temp.blendEnable = blendEnable;
  temp.srcColorBlendFactor = srcColorBlendFactor;
  temp.dstColorBlendFactor = dstColorBlendFactor;
  temp.colorBlendOp = colorBlendOp;
  temp.srcAlphaBlendFactor = srcAlphaBlendFactor;
  temp.dstAlphaBlendFactor = dstAlphaBlendFactor;
  temp.alphaBlendOp = alphaBlendOp;
  temp.colorWriteMask = colorWriteMask;

  return temp;
}

inline VkStencilOpState StencilOpState(
  VkStencilOp failOp,
  VkStencilOp passOp,
  VkStencilOp depthFailOp,
  VkCompareOp compareOp,
  uint32_t compareMask,
  uint32_t writeMask,
  uint32_t reference
)
{
  VkStencilOpState temp;
  temp.failOp = failOp;
  temp.passOp = passOp;
  temp.depthFailOp = depthFailOp;
  temp.compareOp = compareOp;
  temp.compareMask = compareMask;
  temp.writeMask = writeMask;
  temp.reference = reference;

  return temp;
}

inline VkPushConstantRange PushConstantRange(
  VkShaderStageFlags stageFlags,
  uint32_t offset,
  uint32_t size
)
{
  VkPushConstantRange temp;
  temp.stageFlags = stageFlags;
  temp.offset = offset;
  temp.size = size;

  return temp;
}

inline VkClearDepthStencilValue ClearDepthStencilValue(
  float depth,
  uint32_t stencil
)
{
  VkClearDepthStencilValue temp;
  temp.depth = depth;
  temp.stencil = stencil;

  return temp;
}

inline VkClearAttachment ClearAttachment(
  VkImageAspectFlags aspectMask,
  uint32_t colorAttachment,
  VkClearValue clearValue
)
{
  VkClearAttachment temp;
  temp.aspectMask = aspectMask;
  temp.colorAttachment = colorAttachment;
  temp.clearValue = clearValue;

  return temp;
}

inline VkAttachmentDescription AttachmentDescription(
  VkAttachmentDescriptionFlags flags,
  VkFormat format,
  VkSampleCountFlagBits samples,
  VkAttachmentLoadOp loadOp,
  VkAttachmentStoreOp storeOp,
  VkAttachmentLoadOp stencilLoadOp,
  VkAttachmentStoreOp stencilStoreOp,
  VkImageLayout initialLayout,
  VkImageLayout finalLayout
)
{
  VkAttachmentDescription temp;
  temp.flags = flags;
  temp.format = format;
  temp.samples = samples;
  temp.loadOp = loadOp;
  temp.storeOp = storeOp;
  temp.stencilLoadOp = stencilLoadOp;
  temp.stencilStoreOp = stencilStoreOp;
  temp.initialLayout = initialLayout;
  temp.finalLayout = finalLayout;

  return temp;
}

inline VkAttachmentReference AttachmentReference(
  uint32_t attachment,
  VkImageLayout layout
)
{
  VkAttachmentReference temp;
  temp.attachment = attachment;
  temp.layout = layout;

  return temp;
}

inline VkSubpassDescription SubpassDescription(
  VkSubpassDescriptionFlags flags,
  VkPipelineBindPoint pipelineBindPoint,
  uint32_t inputAttachmentCount,
  const VkAttachmentReference* pInputAttachments,
  uint32_t colorAttachmentCount,
  const VkAttachmentReference* pColorAttachments,
  const VkAttachmentReference* pResolveAttachments,
  const VkAttachmentReference* pDepthStencilAttachment,
  uint32_t preserveAttachmentCount,
  const uint32_t* pPreserveAttachments
)
{
  VkSubpassDescription temp;
  temp.flags = flags;
  temp.pipelineBindPoint = pipelineBindPoint;
  temp.inputAttachmentCount = inputAttachmentCount;
  temp.pInputAttachments = pInputAttachments;
  temp.colorAttachmentCount = colorAttachmentCount;
  temp.pColorAttachments = pColorAttachments;
  temp.pResolveAttachments = pResolveAttachments;
  temp.pDepthStencilAttachment = pDepthStencilAttachment;
  temp.preserveAttachmentCount = preserveAttachmentCount;
  temp.pPreserveAttachments = pPreserveAttachments;

  return temp;
}

inline VkSubpassDependency SubpassDependency(
  uint32_t srcSubpass,
  uint32_t dstSubpass,
  VkPipelineStageFlags srcStageMask,
  VkPipelineStageFlags dstStageMask,
  VkAccessFlags srcAccessMask,
  VkAccessFlags dstAccessMask,
  VkDependencyFlags dependencyFlags
)
{
  VkSubpassDependency temp;
  temp.srcSubpass = srcSubpass;
  temp.dstSubpass = dstSubpass;
  temp.srcStageMask = srcStageMask;
  temp.dstStageMask = dstStageMask;
  temp.srcAccessMask = srcAccessMask;
  temp.dstAccessMask = dstAccessMask;
  temp.dependencyFlags = dependencyFlags;

  return temp;
}

inline VkDrawIndirectCommand DrawIndirectCommand(
  uint32_t vertexCount,
  uint32_t instanceCount,
  uint32_t firstVertex,
  uint32_t firstInstance
)
{
  VkDrawIndirectCommand temp;
  temp.vertexCount = vertexCount;
  temp.instanceCount = instanceCount;
  temp.firstVertex = firstVertex;
  temp.firstInstance = firstInstance;

  return temp;
}

inline VkDrawIndexedIndirectCommand DrawIndexedIndirectCommand(
  uint32_t indexCount,
  uint32_t instanceCount,
  uint32_t firstIndex,
  int32_t vertexOffset,
  uint32_t firstInstance
)
{
  VkDrawIndexedIndirectCommand temp;
  temp.indexCount = indexCount;
  temp.instanceCount = instanceCount;
  temp.firstIndex = firstIndex;
  temp.vertexOffset = vertexOffset;
  temp.firstInstance = firstInstance;

  return temp;
}

inline VkDispatchIndirectCommand DispatchIndirectCommand(
  uint32_t x,
  uint32_t y,
  uint32_t z
)
{
  VkDispatchIndirectCommand temp;
  temp.x = x;
  temp.y = y;
  temp.z = z;

  return temp;
}

inline VkDisplayModeParametersKHR DisplayModeParametersKHR(
  VkExtent2D visibleRegion,
  uint32_t refreshRate
)
{
  VkDisplayModeParametersKHR temp;
  temp.visibleRegion = visibleRegion;
  temp.refreshRate = refreshRate;

  return temp;
}

inline VkBindShaderGroupIndirectCommandNV BindShaderGroupIndirectCommandNV(
  uint32_t groupIndex
)
{
  VkBindShaderGroupIndirectCommandNV temp;
  temp.groupIndex = groupIndex;

  return temp;
}

inline VkBindIndexBufferIndirectCommandNV BindIndexBufferIndirectCommandNV(
  VkDeviceAddress bufferAddress,
  uint32_t size,
  VkIndexType indexType
)
{
  VkBindIndexBufferIndirectCommandNV temp;
  temp.bufferAddress = bufferAddress;
  temp.size = size;
  temp.indexType = indexType;

  return temp;
}

inline VkBindVertexBufferIndirectCommandNV BindVertexBufferIndirectCommandNV(
  VkDeviceAddress bufferAddress,
  uint32_t size,
  uint32_t stride
)
{
  VkBindVertexBufferIndirectCommandNV temp;
  temp.bufferAddress = bufferAddress;
  temp.size = size;
  temp.stride = stride;

  return temp;
}

inline VkSetStateFlagsIndirectCommandNV SetStateFlagsIndirectCommandNV(
  uint32_t data
)
{
  VkSetStateFlagsIndirectCommandNV temp;
  temp.data = data;

  return temp;
}

inline VkIndirectCommandsStreamNV IndirectCommandsStreamNV(
  VkBuffer buffer,
  VkDeviceSize offset
)
{
  VkIndirectCommandsStreamNV temp;
  temp.buffer = buffer;
  temp.offset = offset;

  return temp;
}

inline VkConformanceVersion ConformanceVersion(
  uint8_t major,
  uint8_t minor,
  uint8_t subminor,
  uint8_t patch
)
{
  VkConformanceVersion temp;
  temp.major = major;
  temp.minor = minor;
  temp.subminor = subminor;
  temp.patch = patch;

  return temp;
}

inline VkPresentRegionKHR PresentRegionKHR(
  uint32_t rectangleCount,
  const VkRectLayerKHR* pRectangles
)
{
  VkPresentRegionKHR temp;
  temp.rectangleCount = rectangleCount;
  temp.pRectangles = pRectangles;

  return temp;
}

inline VkRectLayerKHR RectLayerKHR(
  VkOffset2D offset,
  VkExtent2D extent,
  uint32_t layer
)
{
  VkRectLayerKHR temp;
  temp.offset = offset;
  temp.extent = extent;
  temp.layer = layer;

  return temp;
}

inline VkDescriptorUpdateTemplateEntry DescriptorUpdateTemplateEntry(
  uint32_t dstBinding,
  uint32_t dstArrayElement,
  uint32_t descriptorCount,
  VkDescriptorType descriptorType,
  size_t offset,
  size_t stride
)
{
  VkDescriptorUpdateTemplateEntry temp;
  temp.dstBinding = dstBinding;
  temp.dstArrayElement = dstArrayElement;
  temp.descriptorCount = descriptorCount;
  temp.descriptorType = descriptorType;
  temp.offset = offset;
  temp.stride = stride;

  return temp;
}

inline VkXYColorEXT XYColorEXT(
  float x,
  float y
)
{
  VkXYColorEXT temp;
  temp.x = x;
  temp.y = y;

  return temp;
}

inline VkPresentTimeGOOGLE PresentTimeGOOGLE(
  uint32_t presentID,
  uint64_t desiredPresentTime
)
{
  VkPresentTimeGOOGLE temp;
  temp.presentID = presentID;
  temp.desiredPresentTime = desiredPresentTime;

  return temp;
}

inline VkViewportWScalingNV ViewportWScalingNV(
  float xcoeff,
  float ycoeff
)
{
  VkViewportWScalingNV temp;
  temp.xcoeff = xcoeff;
  temp.ycoeff = ycoeff;

  return temp;
}

inline VkViewportSwizzleNV ViewportSwizzleNV(
  VkViewportCoordinateSwizzleNV x,
  VkViewportCoordinateSwizzleNV y,
  VkViewportCoordinateSwizzleNV z,
  VkViewportCoordinateSwizzleNV w
)
{
  VkViewportSwizzleNV temp;
  temp.x = x;
  temp.y = y;
  temp.z = z;
  temp.w = w;

  return temp;
}

inline VkInputAttachmentAspectReference InputAttachmentAspectReference(
  uint32_t subpass,
  uint32_t inputAttachmentIndex,
  VkImageAspectFlags aspectMask
)
{
  VkInputAttachmentAspectReference temp;
  temp.subpass = subpass;
  temp.inputAttachmentIndex = inputAttachmentIndex;
  temp.aspectMask = aspectMask;

  return temp;
}

inline VkSampleLocationEXT SampleLocationEXT(
  float x,
  float y
)
{
  VkSampleLocationEXT temp;
  temp.x = x;
  temp.y = y;

  return temp;
}

inline VkAttachmentSampleLocationsEXT AttachmentSampleLocationsEXT(
  uint32_t attachmentIndex,
  VkSampleLocationsInfoEXT sampleLocationsInfo
)
{
  VkAttachmentSampleLocationsEXT temp;
  temp.attachmentIndex = attachmentIndex;
  temp.sampleLocationsInfo = sampleLocationsInfo;

  return temp;
}

inline VkSubpassSampleLocationsEXT SubpassSampleLocationsEXT(
  uint32_t subpassIndex,
  VkSampleLocationsInfoEXT sampleLocationsInfo
)
{
  VkSubpassSampleLocationsEXT temp;
  temp.subpassIndex = subpassIndex;
  temp.sampleLocationsInfo = sampleLocationsInfo;

  return temp;
}

#ifdef  VK_USE_PLATFORM_ANDROID_KHR
inline VkNativeBufferUsage2ANDROID NativeBufferUsage2ANDROID(
  uint64_t consumer,
  uint64_t producer
)
{
  VkNativeBufferUsage2ANDROID temp;
  temp.consumer = consumer;
  temp.producer = producer;

  return temp;
}
#endif

inline VkVertexInputBindingDivisorDescriptionEXT VertexInputBindingDivisorDescriptionEXT(
  uint32_t binding,
  uint32_t divisor
)
{
  VkVertexInputBindingDivisorDescriptionEXT temp;
  temp.binding = binding;
  temp.divisor = divisor;

  return temp;
}

inline VkShadingRatePaletteNV ShadingRatePaletteNV(
  uint32_t shadingRatePaletteEntryCount,
  const VkShadingRatePaletteEntryNV* pShadingRatePaletteEntries
)
{
  VkShadingRatePaletteNV temp;
  temp.shadingRatePaletteEntryCount = shadingRatePaletteEntryCount;
  temp.pShadingRatePaletteEntries = pShadingRatePaletteEntries;

  return temp;
}

inline VkCoarseSampleLocationNV CoarseSampleLocationNV(
  uint32_t pixelX,
  uint32_t pixelY,
  uint32_t sample
)
{
  VkCoarseSampleLocationNV temp;
  temp.pixelX = pixelX;
  temp.pixelY = pixelY;
  temp.sample = sample;

  return temp;
}

inline VkCoarseSampleOrderCustomNV CoarseSampleOrderCustomNV(
  VkShadingRatePaletteEntryNV shadingRate,
  uint32_t sampleCount,
  uint32_t sampleLocationCount,
  const VkCoarseSampleLocationNV* pSampleLocations
)
{
  VkCoarseSampleOrderCustomNV temp;
  temp.shadingRate = shadingRate;
  temp.sampleCount = sampleCount;
  temp.sampleLocationCount = sampleLocationCount;
  temp.pSampleLocations = pSampleLocations;

  return temp;
}

inline VkDrawMeshTasksIndirectCommandNV DrawMeshTasksIndirectCommandNV(
  uint32_t taskCount,
  uint32_t firstTask
)
{
  VkDrawMeshTasksIndirectCommandNV temp;
  temp.taskCount = taskCount;
  temp.firstTask = firstTask;

  return temp;
}

inline VkGeometryDataNV GeometryDataNV(
  VkGeometryTrianglesNV triangles,
  VkGeometryAABBNV aabbs
)
{
  VkGeometryDataNV temp;
  temp.triangles = triangles;
  temp.aabbs = aabbs;

  return temp;
}

inline VkStridedDeviceAddressRegionKHR StridedDeviceAddressRegionKHR(
  VkDeviceAddress deviceAddress,
  VkDeviceSize stride,
  VkDeviceSize size
)
{
  VkStridedDeviceAddressRegionKHR temp;
  temp.deviceAddress = deviceAddress;
  temp.stride = stride;
  temp.size = size;

  return temp;
}

inline VkTraceRaysIndirectCommandKHR TraceRaysIndirectCommandKHR(
  uint32_t width,
  uint32_t height,
  uint32_t depth
)
{
  VkTraceRaysIndirectCommandKHR temp;
  temp.width = width;
  temp.height = height;
  temp.depth = depth;

  return temp;
}

inline VkPerformanceValueINTEL PerformanceValueINTEL(
  VkPerformanceValueTypeINTEL type,
  VkPerformanceValueDataINTEL data
)
{
  VkPerformanceValueINTEL temp;
  temp.type = type;
  temp.data = data;

  return temp;
}

inline VkAccelerationStructureBuildRangeInfoKHR AccelerationStructureBuildRangeInfoKHR(
  uint32_t primitiveCount,
  uint32_t primitiveOffset,
  uint32_t firstVertex,
  uint32_t transformOffset
)
{
  VkAccelerationStructureBuildRangeInfoKHR temp;
  temp.primitiveCount = primitiveCount;
  temp.primitiveOffset = primitiveOffset;
  temp.firstVertex = firstVertex;
  temp.transformOffset = transformOffset;

  return temp;
}

inline VkAabbPositionsKHR AabbPositionsKHR(
  float minX,
  float minY,
  float minZ,
  float maxX,
  float maxY,
  float maxZ
)
{
  VkAabbPositionsKHR temp;
  temp.minX = minX;
  temp.minY = minY;
  temp.minZ = minZ;
  temp.maxX = maxX;
  temp.maxY = maxY;
  temp.maxZ = maxZ;

  return temp;
}

inline VkAccelerationStructureInstanceKHR AccelerationStructureInstanceKHR(
  VkTransformMatrixKHR transform,
  uint32_t instanceCustomIndex,
  uint32_t mask,
  uint32_t instanceShaderBindingTableRecordOffset,
  VkGeometryInstanceFlagsKHR flags,
  uint64_t accelerationStructureReference
)
{
  VkAccelerationStructureInstanceKHR temp;
  temp.transform = transform;
  temp.instanceCustomIndex = instanceCustomIndex;
  temp.mask = mask;
  temp.instanceShaderBindingTableRecordOffset = instanceShaderBindingTableRecordOffset;
  temp.flags = flags;
  temp.accelerationStructureReference = accelerationStructureReference;

  return temp;
}

inline VkMutableDescriptorTypeListVALVE MutableDescriptorTypeListVALVE(
  uint32_t descriptorTypeCount,
  const VkDescriptorType* pDescriptorTypes
)
{
  VkMutableDescriptorTypeListVALVE temp;
  temp.descriptorTypeCount = descriptorTypeCount;
  temp.pDescriptorTypes = pDescriptorTypes;

  return temp;
}

///@}

} // namespace Krust

#endif // #ifndef KRUST_STRUCT_INIT_H_INCLUDED_E26EF
